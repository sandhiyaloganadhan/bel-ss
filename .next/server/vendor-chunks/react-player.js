"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-player";
exports.ids = ["vendor-chunks/react-player"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-player/lib/Player.js":
/*!*************************************************!*\
  !*** ./node_modules/react-player/lib/Player.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _props = __webpack_require__(/*! ./props */ \"(ssr)/./node_modules/react-player/lib/props.js\");\nvar _utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function _getRequireWildcardCache() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n        return {\n            \"default\": obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj[\"default\"] = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function _typeof(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nfunction _extends() {\n    _extends = Object.assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _createSuper(Derived) {\n    return function() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (_isNativeReflectConstruct()) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    }\n    return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar SEEK_ON_PLAY_EXPIRY = 5000;\nvar Player = /*#__PURE__*/ function(_Component) {\n    _inherits(Player, _Component);\n    var _super = _createSuper(Player);\n    function Player() {\n        var _this;\n        _classCallCheck(this, Player);\n        for(var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++){\n            _args[_key] = arguments[_key];\n        }\n        _this = _super.call.apply(_super, [\n            this\n        ].concat(_args));\n        _defineProperty(_assertThisInitialized(_this), \"mounted\", false);\n        _defineProperty(_assertThisInitialized(_this), \"isReady\", false);\n        _defineProperty(_assertThisInitialized(_this), \"isPlaying\", false);\n        _defineProperty(_assertThisInitialized(_this), \"isLoading\", true);\n        _defineProperty(_assertThisInitialized(_this), \"loadOnReady\", null);\n        _defineProperty(_assertThisInitialized(_this), \"startOnPlay\", true);\n        _defineProperty(_assertThisInitialized(_this), \"seekOnPlay\", null);\n        _defineProperty(_assertThisInitialized(_this), \"onDurationCalled\", false);\n        _defineProperty(_assertThisInitialized(_this), \"getInternalPlayer\", function(key) {\n            if (!_this.player) return null;\n            return _this.player[key];\n        });\n        _defineProperty(_assertThisInitialized(_this), \"progress\", function() {\n            if (_this.props.url && _this.player && _this.isReady) {\n                var playedSeconds = _this.getCurrentTime() || 0;\n                var loadedSeconds = _this.getSecondsLoaded();\n                var duration = _this.getDuration();\n                if (duration) {\n                    var progress = {\n                        playedSeconds: playedSeconds,\n                        played: playedSeconds / duration\n                    };\n                    if (loadedSeconds !== null) {\n                        progress.loadedSeconds = loadedSeconds;\n                        progress.loaded = loadedSeconds / duration;\n                    } // Only call onProgress if values have changed\n                    if (progress.playedSeconds !== _this.prevPlayed || progress.loadedSeconds !== _this.prevLoaded) {\n                        _this.props.onProgress(progress);\n                    }\n                    _this.prevPlayed = progress.playedSeconds;\n                    _this.prevLoaded = progress.loadedSeconds;\n                }\n            }\n            _this.progressTimeout = setTimeout(_this.progress, _this.props.progressFrequency || _this.props.progressInterval);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"handleReady\", function() {\n            if (!_this.mounted) return;\n            _this.isReady = true;\n            _this.isLoading = false;\n            var _this$props = _this.props, onReady = _this$props.onReady, playing = _this$props.playing, volume = _this$props.volume, muted = _this$props.muted;\n            onReady();\n            if (!muted && volume !== null) {\n                _this.player.setVolume(volume);\n            }\n            if (_this.loadOnReady) {\n                _this.player.load(_this.loadOnReady, true);\n                _this.loadOnReady = null;\n            } else if (playing) {\n                _this.player.play();\n            }\n            _this.handleDurationCheck();\n        });\n        _defineProperty(_assertThisInitialized(_this), \"handlePlay\", function() {\n            _this.isPlaying = true;\n            _this.isLoading = false;\n            var _this$props2 = _this.props, onStart = _this$props2.onStart, onPlay = _this$props2.onPlay, playbackRate = _this$props2.playbackRate;\n            if (_this.startOnPlay) {\n                if (_this.player.setPlaybackRate && playbackRate !== 1) {\n                    _this.player.setPlaybackRate(playbackRate);\n                }\n                onStart();\n                _this.startOnPlay = false;\n            }\n            onPlay();\n            if (_this.seekOnPlay) {\n                _this.seekTo(_this.seekOnPlay);\n                _this.seekOnPlay = null;\n            }\n            _this.handleDurationCheck();\n        });\n        _defineProperty(_assertThisInitialized(_this), \"handlePause\", function(e) {\n            _this.isPlaying = false;\n            if (!_this.isLoading) {\n                _this.props.onPause(e);\n            }\n        });\n        _defineProperty(_assertThisInitialized(_this), \"handleEnded\", function() {\n            var _this$props3 = _this.props, activePlayer = _this$props3.activePlayer, loop = _this$props3.loop, onEnded = _this$props3.onEnded;\n            if (activePlayer.loopOnEnded && loop) {\n                _this.seekTo(0);\n            }\n            if (!loop) {\n                _this.isPlaying = false;\n                onEnded();\n            }\n        });\n        _defineProperty(_assertThisInitialized(_this), \"handleError\", function() {\n            var _this$props4;\n            _this.isLoading = false;\n            (_this$props4 = _this.props).onError.apply(_this$props4, arguments);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"handleDurationCheck\", function() {\n            clearTimeout(_this.durationCheckTimeout);\n            var duration = _this.getDuration();\n            if (duration) {\n                if (!_this.onDurationCalled) {\n                    _this.props.onDuration(duration);\n                    _this.onDurationCalled = true;\n                }\n            } else {\n                _this.durationCheckTimeout = setTimeout(_this.handleDurationCheck, 100);\n            }\n        });\n        _defineProperty(_assertThisInitialized(_this), \"handleLoaded\", function() {\n            // Sometimes we know loading has stopped but onReady/onPlay are never called\n            // so this provides a way for players to avoid getting stuck\n            _this.isLoading = false;\n        });\n        _defineProperty(_assertThisInitialized(_this), \"ref\", function(player) {\n            if (player) {\n                _this.player = player;\n            }\n        });\n        return _this;\n    }\n    _createClass(Player, [\n        {\n            key: \"componentDidMount\",\n            value: function componentDidMount() {\n                this.mounted = true;\n                this.player.load(this.props.url);\n                this.progress();\n            }\n        },\n        {\n            key: \"componentWillUnmount\",\n            value: function componentWillUnmount() {\n                clearTimeout(this.progressTimeout);\n                clearTimeout(this.durationCheckTimeout);\n                if (this.isReady) {\n                    this.player.stop();\n                }\n                if (this.player.disablePIP) {\n                    this.player.disablePIP();\n                }\n                this.mounted = false;\n            }\n        },\n        {\n            key: \"componentDidUpdate\",\n            value: function componentDidUpdate(prevProps) {\n                var _this2 = this;\n                // Invoke player methods based on changed props\n                var _this$props5 = this.props, url = _this$props5.url, playing = _this$props5.playing, volume = _this$props5.volume, muted = _this$props5.muted, playbackRate = _this$props5.playbackRate, pip = _this$props5.pip, loop = _this$props5.loop, activePlayer = _this$props5.activePlayer;\n                if (!(0, _utils.isEqual)(prevProps.url, url)) {\n                    if (this.isLoading && !activePlayer.forceLoad) {\n                        console.warn(\"ReactPlayer: the attempt to load \".concat(url, \" is being deferred until the player has loaded\"));\n                        this.loadOnReady = url;\n                        return;\n                    }\n                    this.isLoading = true;\n                    this.startOnPlay = true;\n                    this.onDurationCalled = false;\n                    this.player.load(url, this.isReady);\n                }\n                if (!prevProps.playing && playing && !this.isPlaying) {\n                    this.player.play();\n                }\n                if (prevProps.playing && !playing && this.isPlaying) {\n                    this.player.pause();\n                }\n                if (!prevProps.pip && pip && this.player.enablePIP) {\n                    this.player.enablePIP();\n                }\n                if (prevProps.pip && !pip && this.player.disablePIP) {\n                    this.player.disablePIP();\n                }\n                if (prevProps.volume !== volume && volume !== null) {\n                    this.player.setVolume(volume);\n                }\n                if (prevProps.muted !== muted) {\n                    if (muted) {\n                        this.player.mute();\n                    } else {\n                        this.player.unmute();\n                        if (volume !== null) {\n                            // Set volume next tick to fix a bug with DailyMotion\n                            setTimeout(function() {\n                                return _this2.player.setVolume(volume);\n                            });\n                        }\n                    }\n                }\n                if (prevProps.playbackRate !== playbackRate && this.player.setPlaybackRate) {\n                    this.player.setPlaybackRate(playbackRate);\n                }\n                if (prevProps.loop !== loop && this.player.setLoop) {\n                    this.player.setLoop(loop);\n                }\n            }\n        },\n        {\n            key: \"getDuration\",\n            value: function getDuration() {\n                if (!this.isReady) return null;\n                return this.player.getDuration();\n            }\n        },\n        {\n            key: \"getCurrentTime\",\n            value: function getCurrentTime() {\n                if (!this.isReady) return null;\n                return this.player.getCurrentTime();\n            }\n        },\n        {\n            key: \"getSecondsLoaded\",\n            value: function getSecondsLoaded() {\n                if (!this.isReady) return null;\n                return this.player.getSecondsLoaded();\n            }\n        },\n        {\n            key: \"seekTo\",\n            value: function seekTo(amount, type) {\n                var _this3 = this;\n                // When seeking before player is ready, store value and seek later\n                if (!this.isReady && amount !== 0) {\n                    this.seekOnPlay = amount;\n                    setTimeout(function() {\n                        _this3.seekOnPlay = null;\n                    }, SEEK_ON_PLAY_EXPIRY);\n                    return;\n                }\n                var isFraction = !type ? amount > 0 && amount < 1 : type === \"fraction\";\n                if (isFraction) {\n                    // Convert fraction to seconds based on duration\n                    var duration = this.player.getDuration();\n                    if (!duration) {\n                        console.warn(\"ReactPlayer: could not seek using fraction –\\xa0duration not yet available\");\n                        return;\n                    }\n                    this.player.seekTo(duration * amount);\n                    return;\n                }\n                this.player.seekTo(amount);\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var Player = this.props.activePlayer;\n                if (!Player) {\n                    return null;\n                }\n                return /*#__PURE__*/ _react[\"default\"].createElement(Player, _extends({}, this.props, {\n                    ref: this.ref,\n                    onReady: this.handleReady,\n                    onPlay: this.handlePlay,\n                    onPause: this.handlePause,\n                    onEnded: this.handleEnded,\n                    onLoaded: this.handleLoaded,\n                    onError: this.handleError\n                }));\n            }\n        }\n    ]);\n    return Player;\n}(_react.Component);\nexports[\"default\"] = Player;\n_defineProperty(Player, \"displayName\", \"Player\");\n_defineProperty(Player, \"propTypes\", _props.propTypes);\n_defineProperty(Player, \"defaultProps\", _props.defaultProps);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/Player.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/Preview.js":
/*!**************************************************!*\
  !*** ./node_modules/react-player/lib/Preview.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function _getRequireWildcardCache() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n        return {\n            \"default\": obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj[\"default\"] = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function _typeof(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        });\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys(Object(source), true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _createSuper(Derived) {\n    return function() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (_isNativeReflectConstruct()) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    }\n    return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar ICON_SIZE = \"64px\";\nvar Preview = /*#__PURE__*/ function(_Component) {\n    _inherits(Preview, _Component);\n    var _super = _createSuper(Preview);\n    function Preview() {\n        var _this;\n        _classCallCheck(this, Preview);\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = _super.call.apply(_super, [\n            this\n        ].concat(args));\n        _defineProperty(_assertThisInitialized(_this), \"mounted\", false);\n        _defineProperty(_assertThisInitialized(_this), \"state\", {\n            image: null\n        });\n        return _this;\n    }\n    _createClass(Preview, [\n        {\n            key: \"componentDidMount\",\n            value: function componentDidMount() {\n                this.mounted = true;\n                this.fetchImage(this.props);\n            }\n        },\n        {\n            key: \"componentDidUpdate\",\n            value: function componentDidUpdate(prevProps) {\n                var _this$props = this.props, url = _this$props.url, light = _this$props.light;\n                if (prevProps.url !== url || prevProps.light !== light) {\n                    this.fetchImage(this.props);\n                }\n            }\n        },\n        {\n            key: \"componentWillUnmount\",\n            value: function componentWillUnmount() {\n                this.mounted = false;\n            }\n        },\n        {\n            key: \"fetchImage\",\n            value: function fetchImage(_ref) {\n                var _this2 = this;\n                var url = _ref.url, light = _ref.light;\n                if (typeof light === \"string\") {\n                    this.setState({\n                        image: light\n                    });\n                    return;\n                }\n                this.setState({\n                    image: null\n                });\n                return window.fetch(\"https://noembed.com/embed?url=\".concat(url)).then(function(response) {\n                    return response.json();\n                }).then(function(data) {\n                    if (data.thumbnail_url && _this2.mounted) {\n                        var image = data.thumbnail_url.replace(\"height=100\", \"height=480\");\n                        _this2.setState({\n                            image: image\n                        });\n                    }\n                });\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var _this$props2 = this.props, onClick = _this$props2.onClick, playIcon = _this$props2.playIcon;\n                var image = this.state.image;\n                var flexCenter = {\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\"\n                };\n                var styles = {\n                    preview: _objectSpread({\n                        width: \"100%\",\n                        height: \"100%\",\n                        backgroundImage: image ? \"url(\".concat(image, \")\") : undefined,\n                        backgroundSize: \"cover\",\n                        backgroundPosition: \"center\",\n                        cursor: \"pointer\"\n                    }, flexCenter),\n                    shadow: _objectSpread({\n                        background: \"radial-gradient(rgb(0, 0, 0, 0.3), rgba(0, 0, 0, 0) 60%)\",\n                        borderRadius: ICON_SIZE,\n                        width: ICON_SIZE,\n                        height: ICON_SIZE\n                    }, flexCenter),\n                    playIcon: {\n                        borderStyle: \"solid\",\n                        borderWidth: \"16px 0 16px 26px\",\n                        borderColor: \"transparent transparent transparent white\",\n                        marginLeft: \"7px\"\n                    }\n                };\n                var defaultPlayIcon = /*#__PURE__*/ _react[\"default\"].createElement(\"div\", {\n                    style: styles.shadow,\n                    className: \"react-player__shadow\"\n                }, /*#__PURE__*/ _react[\"default\"].createElement(\"div\", {\n                    style: styles.playIcon,\n                    className: \"react-player__play-icon\"\n                }));\n                return /*#__PURE__*/ _react[\"default\"].createElement(\"div\", {\n                    style: styles.preview,\n                    className: \"react-player__preview\",\n                    onClick: onClick\n                }, playIcon || defaultPlayIcon);\n            }\n        }\n    ]);\n    return Preview;\n}(_react.Component);\nexports[\"default\"] = Preview;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/Preview.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/ReactPlayer.js":
/*!******************************************************!*\
  !*** ./node_modules/react-player/lib/ReactPlayer.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"FilePlayer\", ({\n    enumerable: true,\n    get: function get() {\n        return _FilePlayer[\"default\"];\n    }\n}));\nObject.defineProperty(exports, \"YouTube\", ({\n    enumerable: true,\n    get: function get() {\n        return _YouTube[\"default\"];\n    }\n}));\nObject.defineProperty(exports, \"SoundCloud\", ({\n    enumerable: true,\n    get: function get() {\n        return _SoundCloud[\"default\"];\n    }\n}));\nObject.defineProperty(exports, \"Vimeo\", ({\n    enumerable: true,\n    get: function get() {\n        return _Vimeo[\"default\"];\n    }\n}));\nObject.defineProperty(exports, \"Facebook\", ({\n    enumerable: true,\n    get: function get() {\n        return _Facebook[\"default\"];\n    }\n}));\nObject.defineProperty(exports, \"Streamable\", ({\n    enumerable: true,\n    get: function get() {\n        return _Streamable[\"default\"];\n    }\n}));\nObject.defineProperty(exports, \"Wistia\", ({\n    enumerable: true,\n    get: function get() {\n        return _Wistia[\"default\"];\n    }\n}));\nObject.defineProperty(exports, \"Twitch\", ({\n    enumerable: true,\n    get: function get() {\n        return _Twitch[\"default\"];\n    }\n}));\nObject.defineProperty(exports, \"DailyMotion\", ({\n    enumerable: true,\n    get: function get() {\n        return _DailyMotion[\"default\"];\n    }\n}));\nObject.defineProperty(exports, \"Mixcloud\", ({\n    enumerable: true,\n    get: function get() {\n        return _Mixcloud[\"default\"];\n    }\n}));\nexports[\"default\"] = void 0;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _props = __webpack_require__(/*! ./props */ \"(ssr)/./node_modules/react-player/lib/props.js\");\nvar _utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nvar _players = _interopRequireDefault(__webpack_require__(/*! ./players */ \"(ssr)/./node_modules/react-player/lib/players/index.js\"));\nvar _Player4 = _interopRequireDefault(__webpack_require__(/*! ./Player */ \"(ssr)/./node_modules/react-player/lib/Player.js\"));\nvar _Preview = _interopRequireDefault(__webpack_require__(/*! ./Preview */ \"(ssr)/./node_modules/react-player/lib/Preview.js\"));\nvar _FilePlayer = _interopRequireWildcard(__webpack_require__(/*! ./players/FilePlayer */ \"(ssr)/./node_modules/react-player/lib/players/FilePlayer.js\"));\nvar _preload = _interopRequireDefault(__webpack_require__(/*! ./preload */ \"(ssr)/./node_modules/react-player/lib/preload.js\"));\nvar _YouTube = _interopRequireDefault(__webpack_require__(/*! ./players/YouTube */ \"(ssr)/./node_modules/react-player/lib/players/YouTube.js\"));\nvar _SoundCloud = _interopRequireDefault(__webpack_require__(/*! ./players/SoundCloud */ \"(ssr)/./node_modules/react-player/lib/players/SoundCloud.js\"));\nvar _Vimeo = _interopRequireDefault(__webpack_require__(/*! ./players/Vimeo */ \"(ssr)/./node_modules/react-player/lib/players/Vimeo.js\"));\nvar _Facebook = _interopRequireDefault(__webpack_require__(/*! ./players/Facebook */ \"(ssr)/./node_modules/react-player/lib/players/Facebook.js\"));\nvar _Streamable = _interopRequireDefault(__webpack_require__(/*! ./players/Streamable */ \"(ssr)/./node_modules/react-player/lib/players/Streamable.js\"));\nvar _Wistia = _interopRequireDefault(__webpack_require__(/*! ./players/Wistia */ \"(ssr)/./node_modules/react-player/lib/players/Wistia.js\"));\nvar _Twitch = _interopRequireDefault(__webpack_require__(/*! ./players/Twitch */ \"(ssr)/./node_modules/react-player/lib/players/Twitch.js\"));\nvar _DailyMotion = _interopRequireDefault(__webpack_require__(/*! ./players/DailyMotion */ \"(ssr)/./node_modules/react-player/lib/players/DailyMotion.js\"));\nvar _Mixcloud = _interopRequireDefault(__webpack_require__(/*! ./players/Mixcloud */ \"(ssr)/./node_modules/react-player/lib/players/Mixcloud.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        \"default\": obj\n    };\n}\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function _getRequireWildcardCache() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n        return {\n            \"default\": obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj[\"default\"] = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function _typeof(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        });\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys(Object(source), true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nfunction _extends() {\n    _extends = Object.assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction _toConsumableArray(arr) {\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _iterableToArray(iter) {\n    if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++){\n        arr2[i] = arr[i];\n    }\n    return arr2;\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _createSuper(Derived) {\n    return function() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (_isNativeReflectConstruct()) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    }\n    return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar SUPPORTED_PROPS = Object.keys(_props.propTypes);\nvar customPlayers = [];\nvar ReactPlayer = /*#__PURE__*/ function(_Component) {\n    _inherits(ReactPlayer, _Component);\n    var _super = _createSuper(ReactPlayer);\n    function ReactPlayer() {\n        var _this;\n        _classCallCheck(this, ReactPlayer);\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = _super.call.apply(_super, [\n            this\n        ].concat(args));\n        _defineProperty(_assertThisInitialized(_this), \"config\", (0, _utils.getConfig)(_this.props, _props.defaultProps, true));\n        _defineProperty(_assertThisInitialized(_this), \"state\", {\n            showPreview: !!_this.props.light\n        });\n        _defineProperty(_assertThisInitialized(_this), \"handleClickPreview\", function() {\n            _this.setState({\n                showPreview: false\n            });\n        });\n        _defineProperty(_assertThisInitialized(_this), \"showPreview\", function() {\n            _this.setState({\n                showPreview: true\n            });\n        });\n        _defineProperty(_assertThisInitialized(_this), \"getDuration\", function() {\n            if (!_this.player) return null;\n            return _this.player.getDuration();\n        });\n        _defineProperty(_assertThisInitialized(_this), \"getCurrentTime\", function() {\n            if (!_this.player) return null;\n            return _this.player.getCurrentTime();\n        });\n        _defineProperty(_assertThisInitialized(_this), \"getSecondsLoaded\", function() {\n            if (!_this.player) return null;\n            return _this.player.getSecondsLoaded();\n        });\n        _defineProperty(_assertThisInitialized(_this), \"getInternalPlayer\", function() {\n            var key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"player\";\n            if (!_this.player) return null;\n            return _this.player.getInternalPlayer(key);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"seekTo\", function(fraction, type) {\n            if (!_this.player) return null;\n            _this.player.seekTo(fraction, type);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"handleReady\", function() {\n            _this.props.onReady(_assertThisInitialized(_this));\n        });\n        _defineProperty(_assertThisInitialized(_this), \"wrapperRef\", function(wrapper) {\n            _this.wrapper = wrapper;\n        });\n        _defineProperty(_assertThisInitialized(_this), \"activePlayerRef\", function(player) {\n            _this.player = player;\n        });\n        return _this;\n    }\n    _createClass(ReactPlayer, [\n        {\n            key: \"componentDidMount\",\n            value: function componentDidMount() {\n                if (this.props.progressFrequency) {\n                    var message = \"ReactPlayer: %cprogressFrequency%c is deprecated, please use %cprogressInterval%c instead\";\n                    console.warn(message, \"font-weight: bold\", \"\", \"font-weight: bold\", \"\");\n                }\n            }\n        },\n        {\n            key: \"shouldComponentUpdate\",\n            value: function shouldComponentUpdate(nextProps, nextState) {\n                return !(0, _utils.isEqual)(this.props, nextProps) || !(0, _utils.isEqual)(this.state, nextState);\n            }\n        },\n        {\n            key: \"componentDidUpdate\",\n            value: function componentDidUpdate(prevProps) {\n                var light = this.props.light;\n                this.config = (0, _utils.getConfig)(this.props, _props.defaultProps);\n                if (!prevProps.light && light) {\n                    this.setState({\n                        showPreview: true\n                    });\n                }\n                if (prevProps.light && !light) {\n                    this.setState({\n                        showPreview: false\n                    });\n                }\n            }\n        },\n        {\n            key: \"getActivePlayer\",\n            value: function getActivePlayer(url) {\n                for(var _i = 0, _arr = [].concat(_toConsumableArray(customPlayers), _toConsumableArray(_players[\"default\"])); _i < _arr.length; _i++){\n                    var _Player = _arr[_i];\n                    if (_Player.canPlay(url)) {\n                        return _Player;\n                    }\n                } // Fall back to FilePlayer if nothing else can play the URL\n                return _FilePlayer.FilePlayer;\n            }\n        },\n        {\n            key: \"renderActivePlayer\",\n            value: function renderActivePlayer(url, activePlayer) {\n                if (!url) return null;\n                return /*#__PURE__*/ _react[\"default\"].createElement(_Player4[\"default\"], _extends({}, this.props, {\n                    key: activePlayer.displayName,\n                    ref: this.activePlayerRef,\n                    config: this.config,\n                    activePlayer: activePlayer,\n                    onReady: this.handleReady\n                }));\n            }\n        },\n        {\n            key: \"sortPlayers\",\n            value: function sortPlayers(a, b) {\n                // Retain player order to prevent weird iframe behaviour when switching players\n                if (a && b) {\n                    return a.key < b.key ? -1 : 1;\n                }\n                return 0;\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var _this$props = this.props, url = _this$props.url, controls = _this$props.controls, style = _this$props.style, width = _this$props.width, height = _this$props.height, light = _this$props.light, playIcon = _this$props.playIcon, Wrapper = _this$props.wrapper;\n                var showPreview = this.state.showPreview && url;\n                var otherProps = (0, _utils.omit)(this.props, SUPPORTED_PROPS, _props.DEPRECATED_CONFIG_PROPS);\n                var activePlayer = this.getActivePlayer(url);\n                var renderedActivePlayer = this.renderActivePlayer(url, activePlayer);\n                var preloadPlayers = (0, _preload[\"default\"])(url, controls, this.config);\n                var players = [\n                    renderedActivePlayer\n                ].concat(_toConsumableArray(preloadPlayers)).sort(this.sortPlayers);\n                var preview = /*#__PURE__*/ _react[\"default\"].createElement(_Preview[\"default\"], {\n                    url: url,\n                    light: light,\n                    playIcon: playIcon,\n                    onClick: this.handleClickPreview\n                });\n                return /*#__PURE__*/ _react[\"default\"].createElement(Wrapper, _extends({\n                    ref: this.wrapperRef,\n                    style: _objectSpread({}, style, {\n                        width: width,\n                        height: height\n                    })\n                }, otherProps), showPreview ? preview : players);\n            }\n        }\n    ]);\n    return ReactPlayer;\n}(_react.Component);\nexports[\"default\"] = ReactPlayer;\n_defineProperty(ReactPlayer, \"addCustomPlayer\", function(player) {\n    customPlayers.push(player);\n});\n_defineProperty(ReactPlayer, \"removeCustomPlayers\", function() {\n    customPlayers = [];\n});\n_defineProperty(ReactPlayer, \"displayName\", \"ReactPlayer\");\n_defineProperty(ReactPlayer, \"propTypes\", _props.propTypes);\n_defineProperty(ReactPlayer, \"defaultProps\", _props.defaultProps);\n_defineProperty(ReactPlayer, \"canPlay\", function(url) {\n    for(var _i2 = 0, _arr2 = [].concat(_toConsumableArray(customPlayers), _toConsumableArray(_players[\"default\"])); _i2 < _arr2.length; _i2++){\n        var _Player2 = _arr2[_i2];\n        if (_Player2.canPlay(url)) {\n            return true;\n        }\n    }\n    return false;\n});\n_defineProperty(ReactPlayer, \"canEnablePIP\", function(url) {\n    for(var _i3 = 0, _arr3 = [].concat(_toConsumableArray(customPlayers), _toConsumableArray(_players[\"default\"])); _i3 < _arr3.length; _i3++){\n        var _Player3 = _arr3[_i3];\n        if (_Player3.canEnablePIP && _Player3.canEnablePIP(url)) {\n            return true;\n        }\n    }\n    return false;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/ReactPlayer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/players/DailyMotion.js":
/*!**************************************************************!*\
  !*** ./node_modules/react-player/lib/players/DailyMotion.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = exports.DailyMotion = void 0;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nvar _singlePlayer = _interopRequireDefault(__webpack_require__(/*! ../singlePlayer */ \"(ssr)/./node_modules/react-player/lib/singlePlayer.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        \"default\": obj\n    };\n}\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function _getRequireWildcardCache() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n        return {\n            \"default\": obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj[\"default\"] = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function _typeof(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        });\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys(Object(source), true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nfunction _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++){\n        arr2[i] = arr[i];\n    }\n    return arr2;\n}\nfunction _iterableToArrayLimit(arr, i) {\n    if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n    try {\n        for(var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\nfunction _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _createSuper(Derived) {\n    return function() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (_isNativeReflectConstruct()) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    }\n    return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar SDK_URL = \"https://api.dmcdn.net/all.js\";\nvar SDK_GLOBAL = \"DM\";\nvar SDK_GLOBAL_READY = \"dmAsyncInit\";\nvar MATCH_URL = /^(?:(?:https?):)?(?:\\/\\/)?(?:www\\.)?(?:(?:dailymotion\\.com(?:\\/embed)?\\/video)|dai\\.ly)\\/([a-zA-Z0-9]+)(?:_[\\w_-]+)?$/;\nvar DailyMotion = /*#__PURE__*/ function(_Component) {\n    _inherits(DailyMotion, _Component);\n    var _super = _createSuper(DailyMotion);\n    function DailyMotion() {\n        var _this;\n        _classCallCheck(this, DailyMotion);\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = _super.call.apply(_super, [\n            this\n        ].concat(args));\n        _defineProperty(_assertThisInitialized(_this), \"callPlayer\", _utils.callPlayer);\n        _defineProperty(_assertThisInitialized(_this), \"onDurationChange\", function() {\n            var duration = _this.getDuration();\n            _this.props.onDuration(duration);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"mute\", function() {\n            _this.callPlayer(\"setMuted\", true);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"unmute\", function() {\n            _this.callPlayer(\"setMuted\", false);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"ref\", function(container) {\n            _this.container = container;\n        });\n        return _this;\n    }\n    _createClass(DailyMotion, [\n        {\n            key: \"load\",\n            value: function load(url) {\n                var _this2 = this;\n                var _this$props = this.props, controls = _this$props.controls, config = _this$props.config, onError = _this$props.onError, playing = _this$props.playing;\n                var _url$match = url.match(MATCH_URL), _url$match2 = _slicedToArray(_url$match, 2), id = _url$match2[1];\n                if (this.player) {\n                    this.player.load(id, {\n                        start: (0, _utils.parseStartTime)(url),\n                        autoplay: playing\n                    });\n                    return;\n                }\n                (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY, function(DM) {\n                    return DM.player;\n                }).then(function(DM) {\n                    if (!_this2.container) return;\n                    var Player = DM.player;\n                    _this2.player = new Player(_this2.container, {\n                        width: \"100%\",\n                        height: \"100%\",\n                        video: id,\n                        params: _objectSpread({\n                            controls: controls,\n                            autoplay: _this2.props.playing,\n                            mute: _this2.props.muted,\n                            start: (0, _utils.parseStartTime)(url),\n                            origin: window.location.origin\n                        }, config.dailymotion.params),\n                        events: {\n                            apiready: _this2.props.onReady,\n                            seeked: function seeked() {\n                                return _this2.props.onSeek(_this2.player.currentTime);\n                            },\n                            video_end: _this2.props.onEnded,\n                            durationchange: _this2.onDurationChange,\n                            pause: _this2.props.onPause,\n                            playing: _this2.props.onPlay,\n                            waiting: _this2.props.onBuffer,\n                            error: function error(event) {\n                                return onError(event);\n                            }\n                        }\n                    });\n                }, onError);\n            }\n        },\n        {\n            key: \"play\",\n            value: function play() {\n                this.callPlayer(\"play\");\n            }\n        },\n        {\n            key: \"pause\",\n            value: function pause() {\n                this.callPlayer(\"pause\");\n            }\n        },\n        {\n            key: \"stop\",\n            value: function stop() {}\n        },\n        {\n            key: \"seekTo\",\n            value: function seekTo(seconds) {\n                this.callPlayer(\"seek\", seconds);\n            }\n        },\n        {\n            key: \"setVolume\",\n            value: function setVolume(fraction) {\n                this.callPlayer(\"setVolume\", fraction);\n            }\n        },\n        {\n            key: \"getDuration\",\n            value: function getDuration() {\n                return this.player.duration || null;\n            }\n        },\n        {\n            key: \"getCurrentTime\",\n            value: function getCurrentTime() {\n                return this.player.currentTime;\n            }\n        },\n        {\n            key: \"getSecondsLoaded\",\n            value: function getSecondsLoaded() {\n                return this.player.bufferedTime;\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var display = this.props.display;\n                var style = {\n                    width: \"100%\",\n                    height: \"100%\",\n                    display: display\n                };\n                return /*#__PURE__*/ _react[\"default\"].createElement(\"div\", {\n                    style: style\n                }, /*#__PURE__*/ _react[\"default\"].createElement(\"div\", {\n                    ref: this.ref\n                }));\n            }\n        }\n    ]);\n    return DailyMotion;\n}(_react.Component);\nexports.DailyMotion = DailyMotion;\n_defineProperty(DailyMotion, \"displayName\", \"DailyMotion\");\n_defineProperty(DailyMotion, \"canPlay\", function(url) {\n    return MATCH_URL.test(url);\n});\n_defineProperty(DailyMotion, \"loopOnEnded\", true);\nvar _default = (0, _singlePlayer[\"default\"])(DailyMotion);\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/players/DailyMotion.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/players/Facebook.js":
/*!***********************************************************!*\
  !*** ./node_modules/react-player/lib/players/Facebook.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = exports.Facebook = void 0;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nvar _singlePlayer = _interopRequireDefault(__webpack_require__(/*! ../singlePlayer */ \"(ssr)/./node_modules/react-player/lib/singlePlayer.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        \"default\": obj\n    };\n}\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function _getRequireWildcardCache() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n        return {\n            \"default\": obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj[\"default\"] = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function _typeof(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _createSuper(Derived) {\n    return function() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (_isNativeReflectConstruct()) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    }\n    return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar SDK_URL = \"https://connect.facebook.net/en_US/sdk.js\";\nvar SDK_GLOBAL = \"FB\";\nvar SDK_GLOBAL_READY = \"fbAsyncInit\";\nvar MATCH_URL = /^https?:\\/\\/(www\\.)?facebook\\.com.*\\/(video(s)?|watch|story)(\\.php?|\\/).+$/;\nvar PLAYER_ID_PREFIX = \"facebook-player-\";\nvar Facebook = /*#__PURE__*/ function(_Component) {\n    _inherits(Facebook, _Component);\n    var _super = _createSuper(Facebook);\n    function Facebook() {\n        var _this;\n        _classCallCheck(this, Facebook);\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = _super.call.apply(_super, [\n            this\n        ].concat(args));\n        _defineProperty(_assertThisInitialized(_this), \"callPlayer\", _utils.callPlayer);\n        _defineProperty(_assertThisInitialized(_this), \"playerID\", _this.props.config.facebook.playerId || \"\".concat(PLAYER_ID_PREFIX).concat((0, _utils.randomString)()));\n        _defineProperty(_assertThisInitialized(_this), \"mute\", function() {\n            _this.callPlayer(\"mute\");\n        });\n        _defineProperty(_assertThisInitialized(_this), \"unmute\", function() {\n            _this.callPlayer(\"unmute\");\n        });\n        return _this;\n    }\n    _createClass(Facebook, [\n        {\n            key: \"load\",\n            value: function load(url, isReady) {\n                var _this2 = this;\n                if (isReady) {\n                    (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY).then(function(FB) {\n                        return FB.XFBML.parse();\n                    });\n                    return;\n                }\n                (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY).then(function(FB) {\n                    FB.init({\n                        appId: _this2.props.config.facebook.appId,\n                        xfbml: true,\n                        version: _this2.props.config.facebook.version\n                    });\n                    FB.Event.subscribe(\"xfbml.render\", function(msg) {\n                        // Here we know the SDK has loaded, even if onReady/onPlay\n                        // is not called due to a video that cannot be embedded\n                        _this2.props.onLoaded();\n                    });\n                    FB.Event.subscribe(\"xfbml.ready\", function(msg) {\n                        if (msg.type === \"video\" && msg.id === _this2.playerID) {\n                            _this2.player = msg.instance;\n                            _this2.player.subscribe(\"startedPlaying\", _this2.props.onPlay);\n                            _this2.player.subscribe(\"paused\", _this2.props.onPause);\n                            _this2.player.subscribe(\"finishedPlaying\", _this2.props.onEnded);\n                            _this2.player.subscribe(\"startedBuffering\", _this2.props.onBuffer);\n                            _this2.player.subscribe(\"finishedBuffering\", _this2.props.onBufferEnd);\n                            _this2.player.subscribe(\"error\", _this2.props.onError);\n                            if (!_this2.props.muted) {\n                                // Player is muted by default\n                                _this2.callPlayer(\"unmute\");\n                            }\n                            _this2.props.onReady(); // For some reason Facebook have added `visibility: hidden`\n                            // to the iframe when autoplay fails, so here we set it back\n                            document.getElementById(_this2.playerID).querySelector(\"iframe\").style.visibility = \"visible\";\n                        }\n                    });\n                });\n            }\n        },\n        {\n            key: \"play\",\n            value: function play() {\n                this.callPlayer(\"play\");\n            }\n        },\n        {\n            key: \"pause\",\n            value: function pause() {\n                this.callPlayer(\"pause\");\n            }\n        },\n        {\n            key: \"stop\",\n            value: function stop() {}\n        },\n        {\n            key: \"seekTo\",\n            value: function seekTo(seconds) {\n                this.callPlayer(\"seek\", seconds);\n            }\n        },\n        {\n            key: \"setVolume\",\n            value: function setVolume(fraction) {\n                this.callPlayer(\"setVolume\", fraction);\n            }\n        },\n        {\n            key: \"getDuration\",\n            value: function getDuration() {\n                return this.callPlayer(\"getDuration\");\n            }\n        },\n        {\n            key: \"getCurrentTime\",\n            value: function getCurrentTime() {\n                return this.callPlayer(\"getCurrentPosition\");\n            }\n        },\n        {\n            key: \"getSecondsLoaded\",\n            value: function getSecondsLoaded() {\n                return null;\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var style = {\n                    width: \"100%\",\n                    height: \"100%\"\n                };\n                return /*#__PURE__*/ _react[\"default\"].createElement(\"div\", {\n                    style: style,\n                    id: this.playerID,\n                    className: \"fb-video\",\n                    \"data-href\": this.props.url,\n                    \"data-autoplay\": this.props.playing ? \"true\" : \"false\",\n                    \"data-allowfullscreen\": \"true\",\n                    \"data-controls\": this.props.controls ? \"true\" : \"false\"\n                });\n            }\n        }\n    ]);\n    return Facebook;\n}(_react.Component);\nexports.Facebook = Facebook;\n_defineProperty(Facebook, \"displayName\", \"Facebook\");\n_defineProperty(Facebook, \"canPlay\", function(url) {\n    return MATCH_URL.test(url);\n});\n_defineProperty(Facebook, \"loopOnEnded\", true);\nvar _default = (0, _singlePlayer[\"default\"])(Facebook);\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/players/Facebook.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/players/FilePlayer.js":
/*!*************************************************************!*\
  !*** ./node_modules/react-player/lib/players/FilePlayer.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = exports.FilePlayer = void 0;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nvar _singlePlayer = _interopRequireDefault(__webpack_require__(/*! ../singlePlayer */ \"(ssr)/./node_modules/react-player/lib/singlePlayer.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        \"default\": obj\n    };\n}\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function _getRequireWildcardCache() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n        return {\n            \"default\": obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj[\"default\"] = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function _typeof(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nfunction _extends() {\n    _extends = Object.assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _createSuper(Derived) {\n    return function() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (_isNativeReflectConstruct()) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    }\n    return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _createForOfIteratorHelper(o) {\n    if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n        if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) {\n            var i = 0;\n            var F = function F() {};\n            return {\n                s: F,\n                n: function n() {\n                    if (i >= o.length) return {\n                        done: true\n                    };\n                    return {\n                        done: false,\n                        value: o[i++]\n                    };\n                },\n                e: function e(_e) {\n                    throw _e;\n                },\n                f: F\n            };\n        }\n        throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n    }\n    var it, normalCompletion = true, didErr = false, err;\n    return {\n        s: function s() {\n            it = o[Symbol.iterator]();\n        },\n        n: function n() {\n            var step = it.next();\n            normalCompletion = step.done;\n            return step;\n        },\n        e: function e(_e2) {\n            didErr = true;\n            err = _e2;\n        },\n        f: function f() {\n            try {\n                if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n            } finally{\n                if (didErr) throw err;\n            }\n        }\n    };\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++){\n        arr2[i] = arr[i];\n    }\n    return arr2;\n}\nvar IOS = typeof navigator !== \"undefined\" && /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\nvar AUDIO_EXTENSIONS = /\\.(m4a|mp4a|mpga|mp2|mp2a|mp3|m2a|m3a|wav|weba|aac|oga|spx)($|\\?)/i;\nvar VIDEO_EXTENSIONS = /\\.(mp4|og[gv]|webm|mov|m4v)($|\\?)/i;\nvar HLS_EXTENSIONS = /\\.(m3u8)($|\\?)/i;\nvar HLS_SDK_URL = \"https://cdn.jsdelivr.net/npm/hls.js@VERSION/dist/hls.min.js\";\nvar HLS_GLOBAL = \"Hls\";\nvar DASH_EXTENSIONS = /\\.(mpd)($|\\?)/i;\nvar DASH_SDK_URL = \"https://cdnjs.cloudflare.com/ajax/libs/dashjs/VERSION/dash.all.min.js\";\nvar DASH_GLOBAL = \"dashjs\";\nvar MATCH_DROPBOX_URL = /www\\.dropbox\\.com\\/.+/;\nfunction canPlay(url) {\n    if (url instanceof Array) {\n        var _iterator = _createForOfIteratorHelper(url), _step;\n        try {\n            for(_iterator.s(); !(_step = _iterator.n()).done;){\n                var item = _step.value;\n                if (typeof item === \"string\" && canPlay(item)) {\n                    return true;\n                }\n                if (canPlay(item.src)) {\n                    return true;\n                }\n            }\n        } catch (err) {\n            _iterator.e(err);\n        } finally{\n            _iterator.f();\n        }\n        return false;\n    }\n    if ((0, _utils.isMediaStream)(url)) {\n        return true;\n    }\n    return AUDIO_EXTENSIONS.test(url) || VIDEO_EXTENSIONS.test(url) || HLS_EXTENSIONS.test(url) || DASH_EXTENSIONS.test(url);\n}\nfunction supportsWebKitPresentationMode(video) {\n    if (!video) video = document.createElement(\"video\"); // Check if Safari supports PiP, and is not on mobile (other than iPad)\n    // iPhone safari appears to \"support\" PiP through the check, however PiP does not function\n    return video.webkitSupportsPresentationMode && typeof video.webkitSetPresentationMode === \"function\" && !/iPhone|iPod/.test(navigator.userAgent);\n}\nfunction canEnablePIP(url) {\n    return canPlay(url) && (!!document.pictureInPictureEnabled || supportsWebKitPresentationMode()) && !AUDIO_EXTENSIONS.test(url);\n}\nvar FilePlayer = /*#__PURE__*/ function(_Component) {\n    _inherits(FilePlayer, _Component);\n    var _super = _createSuper(FilePlayer);\n    function FilePlayer() {\n        var _this;\n        _classCallCheck(this, FilePlayer);\n        for(var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++){\n            _args[_key] = arguments[_key];\n        }\n        _this = _super.call.apply(_super, [\n            this\n        ].concat(_args));\n        _defineProperty(_assertThisInitialized(_this), \"onReady\", function() {\n            var _this$props;\n            return (_this$props = _this.props).onReady.apply(_this$props, arguments);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onPlay\", function() {\n            var _this$props2;\n            return (_this$props2 = _this.props).onPlay.apply(_this$props2, arguments);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onBuffer\", function() {\n            var _this$props3;\n            return (_this$props3 = _this.props).onBuffer.apply(_this$props3, arguments);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onBufferEnd\", function() {\n            var _this$props4;\n            return (_this$props4 = _this.props).onBufferEnd.apply(_this$props4, arguments);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onPause\", function() {\n            var _this$props5;\n            return (_this$props5 = _this.props).onPause.apply(_this$props5, arguments);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onEnded\", function() {\n            var _this$props6;\n            return (_this$props6 = _this.props).onEnded.apply(_this$props6, arguments);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onError\", function() {\n            var _this$props7;\n            return (_this$props7 = _this.props).onError.apply(_this$props7, arguments);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onEnablePIP\", function() {\n            var _this$props8;\n            return (_this$props8 = _this.props).onEnablePIP.apply(_this$props8, arguments);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onDisablePIP\", function(e) {\n            var _this$props9 = _this.props, onDisablePIP = _this$props9.onDisablePIP, playing = _this$props9.playing;\n            onDisablePIP(e);\n            if (playing) {\n                _this.play();\n            }\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onPresentationModeChange\", function(e) {\n            if (_this.player && supportsWebKitPresentationMode(_this.player)) {\n                var webkitPresentationMode = _this.player.webkitPresentationMode;\n                if (webkitPresentationMode === \"picture-in-picture\") {\n                    _this.onEnablePIP(e);\n                } else if (webkitPresentationMode === \"inline\") {\n                    _this.onDisablePIP(e);\n                }\n            }\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onSeek\", function(e) {\n            _this.props.onSeek(e.target.currentTime);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"mute\", function() {\n            _this.player.muted = true;\n        });\n        _defineProperty(_assertThisInitialized(_this), \"unmute\", function() {\n            _this.player.muted = false;\n        });\n        _defineProperty(_assertThisInitialized(_this), \"renderSourceElement\", function(source, index) {\n            if (typeof source === \"string\") {\n                return /*#__PURE__*/ _react[\"default\"].createElement(\"source\", {\n                    key: index,\n                    src: source\n                });\n            }\n            return /*#__PURE__*/ _react[\"default\"].createElement(\"source\", _extends({\n                key: index\n            }, source));\n        });\n        _defineProperty(_assertThisInitialized(_this), \"renderTrack\", function(track, index) {\n            return /*#__PURE__*/ _react[\"default\"].createElement(\"track\", _extends({\n                key: index\n            }, track));\n        });\n        _defineProperty(_assertThisInitialized(_this), \"ref\", function(player) {\n            if (_this.player) {\n                // Store previous player to be used by removeListeners()\n                _this.prevPlayer = _this.player;\n            }\n            _this.player = player;\n        });\n        return _this;\n    }\n    _createClass(FilePlayer, [\n        {\n            key: \"componentDidMount\",\n            value: function componentDidMount() {\n                this.addListeners(this.player);\n                if (IOS) {\n                    this.player.load();\n                }\n            }\n        },\n        {\n            key: \"componentDidUpdate\",\n            value: function componentDidUpdate(prevProps) {\n                if (this.shouldUseAudio(this.props) !== this.shouldUseAudio(prevProps)) {\n                    this.removeListeners(this.prevPlayer);\n                    this.addListeners(this.player);\n                }\n            }\n        },\n        {\n            key: \"componentWillUnmount\",\n            value: function componentWillUnmount() {\n                this.removeListeners(this.player);\n                if (this.hls) {\n                    this.hls.destroy();\n                }\n            }\n        },\n        {\n            key: \"addListeners\",\n            value: function addListeners(player) {\n                var playsinline = this.props.playsinline;\n                player.addEventListener(\"canplay\", this.onReady);\n                player.addEventListener(\"play\", this.onPlay);\n                player.addEventListener(\"waiting\", this.onBuffer);\n                player.addEventListener(\"playing\", this.onBufferEnd);\n                player.addEventListener(\"pause\", this.onPause);\n                player.addEventListener(\"seeked\", this.onSeek);\n                player.addEventListener(\"ended\", this.onEnded);\n                player.addEventListener(\"error\", this.onError);\n                player.addEventListener(\"enterpictureinpicture\", this.onEnablePIP);\n                player.addEventListener(\"leavepictureinpicture\", this.onDisablePIP);\n                player.addEventListener(\"webkitpresentationmodechanged\", this.onPresentationModeChange);\n                if (playsinline) {\n                    player.setAttribute(\"playsinline\", \"\");\n                    player.setAttribute(\"webkit-playsinline\", \"\");\n                    player.setAttribute(\"x5-playsinline\", \"\");\n                }\n            }\n        },\n        {\n            key: \"removeListeners\",\n            value: function removeListeners(player) {\n                player.removeEventListener(\"canplay\", this.onReady);\n                player.removeEventListener(\"play\", this.onPlay);\n                player.removeEventListener(\"waiting\", this.onBuffer);\n                player.removeEventListener(\"playing\", this.onBufferEnd);\n                player.removeEventListener(\"pause\", this.onPause);\n                player.removeEventListener(\"seeked\", this.onSeek);\n                player.removeEventListener(\"ended\", this.onEnded);\n                player.removeEventListener(\"error\", this.onError);\n                player.removeEventListener(\"enterpictureinpicture\", this.onEnablePIP);\n                player.removeEventListener(\"leavepictureinpicture\", this.onDisablePIP);\n                player.removeEventListener(\"webkitpresentationmodechanged\", this.onPresentationModeChange);\n            } // Proxy methods to prevent listener leaks\n        },\n        {\n            key: \"shouldUseAudio\",\n            value: function shouldUseAudio(props) {\n                if (props.config.file.forceVideo) {\n                    return false;\n                }\n                if (props.config.file.attributes.poster) {\n                    return false; // Use <video> so that poster is shown\n                }\n                return AUDIO_EXTENSIONS.test(props.url) || props.config.file.forceAudio;\n            }\n        },\n        {\n            key: \"shouldUseHLS\",\n            value: function shouldUseHLS(url) {\n                return HLS_EXTENSIONS.test(url) && !IOS || this.props.config.file.forceHLS;\n            }\n        },\n        {\n            key: \"shouldUseDASH\",\n            value: function shouldUseDASH(url) {\n                return DASH_EXTENSIONS.test(url) || this.props.config.file.forceDASH;\n            }\n        },\n        {\n            key: \"load\",\n            value: function load(url) {\n                var _this2 = this;\n                var _this$props$config$fi = this.props.config.file, hlsVersion = _this$props$config$fi.hlsVersion, dashVersion = _this$props$config$fi.dashVersion;\n                if (this.shouldUseHLS(url)) {\n                    (0, _utils.getSDK)(HLS_SDK_URL.replace(\"VERSION\", hlsVersion), HLS_GLOBAL).then(function(Hls) {\n                        _this2.hls = new Hls(_this2.props.config.file.hlsOptions);\n                        _this2.hls.on(Hls.Events.ERROR, function(e, data) {\n                            _this2.props.onError(e, data, _this2.hls, Hls);\n                        });\n                        _this2.hls.loadSource(url);\n                        _this2.hls.attachMedia(_this2.player);\n                    });\n                }\n                if (this.shouldUseDASH(url)) {\n                    (0, _utils.getSDK)(DASH_SDK_URL.replace(\"VERSION\", dashVersion), DASH_GLOBAL).then(function(dashjs) {\n                        _this2.dash = dashjs.MediaPlayer().create();\n                        _this2.dash.initialize(_this2.player, url, _this2.props.playing);\n                        _this2.dash.on(\"error\", _this2.props.onError);\n                        _this2.dash.getDebug().setLogToBrowserConsole(false);\n                    });\n                }\n                if (url instanceof Array) {\n                    // When setting new urls (<source>) on an already loaded video,\n                    // HTMLMediaElement.load() is needed to reset the media element\n                    // and restart the media resource. Just replacing children source\n                    // dom nodes is not enough\n                    this.player.load();\n                } else if ((0, _utils.isMediaStream)(url)) {\n                    try {\n                        this.player.srcObject = url;\n                    } catch (e) {\n                        this.player.src = window.URL.createObjectURL(url);\n                    }\n                }\n            }\n        },\n        {\n            key: \"play\",\n            value: function play() {\n                var promise = this.player.play();\n                if (promise) {\n                    promise[\"catch\"](this.props.onError);\n                }\n            }\n        },\n        {\n            key: \"pause\",\n            value: function pause() {\n                this.player.pause();\n            }\n        },\n        {\n            key: \"stop\",\n            value: function stop() {\n                this.player.removeAttribute(\"src\");\n                if (this.dash) {\n                    this.dash.reset();\n                }\n            }\n        },\n        {\n            key: \"seekTo\",\n            value: function seekTo(seconds) {\n                this.player.currentTime = seconds;\n            }\n        },\n        {\n            key: \"setVolume\",\n            value: function setVolume(fraction) {\n                this.player.volume = fraction;\n            }\n        },\n        {\n            key: \"enablePIP\",\n            value: function enablePIP() {\n                if (this.player.requestPictureInPicture && document.pictureInPictureElement !== this.player) {\n                    this.player.requestPictureInPicture();\n                } else if (supportsWebKitPresentationMode(this.player) && this.player.webkitPresentationMode !== \"picture-in-picture\") {\n                    this.player.webkitSetPresentationMode(\"picture-in-picture\");\n                }\n            }\n        },\n        {\n            key: \"disablePIP\",\n            value: function disablePIP() {\n                if (document.exitPictureInPicture && document.pictureInPictureElement === this.player) {\n                    document.exitPictureInPicture();\n                } else if (supportsWebKitPresentationMode(this.player) && this.player.webkitPresentationMode !== \"inline\") {\n                    this.player.webkitSetPresentationMode(\"inline\");\n                }\n            }\n        },\n        {\n            key: \"setPlaybackRate\",\n            value: function setPlaybackRate(rate) {\n                this.player.playbackRate = rate;\n            }\n        },\n        {\n            key: \"getDuration\",\n            value: function getDuration() {\n                if (!this.player) return null;\n                var _this$player = this.player, duration = _this$player.duration, seekable = _this$player.seekable; // on iOS, live streams return Infinity for the duration\n                // so instead we use the end of the seekable timerange\n                if (duration === Infinity && seekable.length > 0) {\n                    return seekable.end(seekable.length - 1);\n                }\n                return duration;\n            }\n        },\n        {\n            key: \"getCurrentTime\",\n            value: function getCurrentTime() {\n                if (!this.player) return null;\n                return this.player.currentTime;\n            }\n        },\n        {\n            key: \"getSecondsLoaded\",\n            value: function getSecondsLoaded() {\n                if (!this.player) return null;\n                var buffered = this.player.buffered;\n                if (buffered.length === 0) {\n                    return 0;\n                }\n                var end = buffered.end(buffered.length - 1);\n                var duration = this.getDuration();\n                if (end > duration) {\n                    return duration;\n                }\n                return end;\n            }\n        },\n        {\n            key: \"getSource\",\n            value: function getSource(url) {\n                var useHLS = this.shouldUseHLS(url);\n                var useDASH = this.shouldUseDASH(url);\n                if (url instanceof Array || (0, _utils.isMediaStream)(url) || useHLS || useDASH) {\n                    return undefined;\n                }\n                if (MATCH_DROPBOX_URL.test(url)) {\n                    return url.replace(\"www.dropbox.com\", \"dl.dropboxusercontent.com\");\n                }\n                return url;\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var _this$props10 = this.props, url = _this$props10.url, playing = _this$props10.playing, loop = _this$props10.loop, controls = _this$props10.controls, muted = _this$props10.muted, config = _this$props10.config, width = _this$props10.width, height = _this$props10.height;\n                var useAudio = this.shouldUseAudio(this.props);\n                var Element = useAudio ? \"audio\" : \"video\";\n                var style = {\n                    width: width === \"auto\" ? width : \"100%\",\n                    height: height === \"auto\" ? height : \"100%\"\n                };\n                return /*#__PURE__*/ _react[\"default\"].createElement(Element, _extends({\n                    ref: this.ref,\n                    src: this.getSource(url),\n                    style: style,\n                    preload: \"auto\",\n                    autoPlay: playing || undefined,\n                    controls: controls,\n                    muted: muted,\n                    loop: loop\n                }, config.file.attributes), url instanceof Array && url.map(this.renderSourceElement), config.file.tracks.map(this.renderTrack));\n            }\n        }\n    ]);\n    return FilePlayer;\n}(_react.Component);\nexports.FilePlayer = FilePlayer;\n_defineProperty(FilePlayer, \"displayName\", \"FilePlayer\");\n_defineProperty(FilePlayer, \"canPlay\", canPlay);\n_defineProperty(FilePlayer, \"canEnablePIP\", canEnablePIP);\nvar _default = (0, _singlePlayer[\"default\"])(FilePlayer);\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtcGxheWVyL2xpYi9wbGF5ZXJzL0ZpbGVQbGF5ZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZELGtCQUFrQixHQUFHQSxrQkFBa0IsR0FBRyxLQUFLO0FBRS9DLElBQUlHLFNBQVNDLHdCQUF3QkMsbUJBQU9BLENBQUMsd0dBQU87QUFFcEQsSUFBSUMsU0FBU0QsbUJBQU9BLENBQUMsZ0VBQVU7QUFFL0IsSUFBSUUsZ0JBQWdCQyx1QkFBdUJILG1CQUFPQSxDQUFDLDhFQUFpQjtBQUVwRSxTQUFTRyx1QkFBdUJDLEdBQUc7SUFBSSxPQUFPQSxPQUFPQSxJQUFJQyxVQUFVLEdBQUdELE1BQU07UUFBRSxXQUFXQTtJQUFJO0FBQUc7QUFFaEcsU0FBU0U7SUFBNkIsSUFBSSxPQUFPQyxZQUFZLFlBQVksT0FBTztJQUFNLElBQUlDLFFBQVEsSUFBSUQ7SUFBV0QsMkJBQTJCLFNBQVNBO1FBQTZCLE9BQU9FO0lBQU87SUFBRyxPQUFPQTtBQUFPO0FBRWpOLFNBQVNULHdCQUF3QkssR0FBRztJQUFJLElBQUlBLE9BQU9BLElBQUlDLFVBQVUsRUFBRTtRQUFFLE9BQU9EO0lBQUs7SUFBRSxJQUFJQSxRQUFRLFFBQVFLLFFBQVFMLFNBQVMsWUFBWSxPQUFPQSxRQUFRLFlBQVk7UUFBRSxPQUFPO1lBQUUsV0FBV0E7UUFBSTtJQUFHO0lBQUUsSUFBSUksUUFBUUY7SUFBNEIsSUFBSUUsU0FBU0EsTUFBTUUsR0FBRyxDQUFDTixNQUFNO1FBQUUsT0FBT0ksTUFBTUcsR0FBRyxDQUFDUDtJQUFNO0lBQUUsSUFBSVEsU0FBUyxDQUFDO0lBQUcsSUFBSUMsd0JBQXdCcEIsT0FBT0MsY0FBYyxJQUFJRCxPQUFPcUIsd0JBQXdCO0lBQUUsSUFBSyxJQUFJQyxPQUFPWCxJQUFLO1FBQUUsSUFBSVgsT0FBT3VCLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNkLEtBQUtXLE1BQU07WUFBRSxJQUFJSSxPQUFPTix3QkFBd0JwQixPQUFPcUIsd0JBQXdCLENBQUNWLEtBQUtXLE9BQU87WUFBTSxJQUFJSSxRQUFTQSxDQUFBQSxLQUFLUixHQUFHLElBQUlRLEtBQUtDLEdBQUcsR0FBRztnQkFBRTNCLE9BQU9DLGNBQWMsQ0FBQ2tCLFFBQVFHLEtBQUtJO1lBQU8sT0FBTztnQkFBRVAsTUFBTSxDQUFDRyxJQUFJLEdBQUdYLEdBQUcsQ0FBQ1csSUFBSTtZQUFFO1FBQUU7SUFBRTtJQUFFSCxNQUFNLENBQUMsVUFBVSxHQUFHUjtJQUFLLElBQUlJLE9BQU87UUFBRUEsTUFBTVksR0FBRyxDQUFDaEIsS0FBS1E7SUFBUztJQUFFLE9BQU9BO0FBQVE7QUFFN3VCLFNBQVNILFFBQVFMLEdBQUc7SUFBSTtJQUEyQixJQUFJLE9BQU9pQixXQUFXLGNBQWMsT0FBT0EsT0FBT0MsUUFBUSxLQUFLLFVBQVU7UUFBRWIsVUFBVSxTQUFTQSxRQUFRTCxHQUFHO1lBQUksT0FBTyxPQUFPQTtRQUFLO0lBQUcsT0FBTztRQUFFSyxVQUFVLFNBQVNBLFFBQVFMLEdBQUc7WUFBSSxPQUFPQSxPQUFPLE9BQU9pQixXQUFXLGNBQWNqQixJQUFJbUIsV0FBVyxLQUFLRixVQUFVakIsUUFBUWlCLE9BQU9MLFNBQVMsR0FBRyxXQUFXLE9BQU9aO1FBQUs7SUFBRztJQUFFLE9BQU9LLFFBQVFMO0FBQU07QUFFelgsU0FBU29CO0lBQWFBLFdBQVcvQixPQUFPZ0MsTUFBTSxJQUFJLFNBQVVDLE1BQU07UUFBSSxJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUMsVUFBVUMsTUFBTSxFQUFFRixJQUFLO1lBQUUsSUFBSUcsU0FBU0YsU0FBUyxDQUFDRCxFQUFFO1lBQUUsSUFBSyxJQUFJWixPQUFPZSxPQUFRO2dCQUFFLElBQUlyQyxPQUFPdUIsU0FBUyxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQ1ksUUFBUWYsTUFBTTtvQkFBRVcsTUFBTSxDQUFDWCxJQUFJLEdBQUdlLE1BQU0sQ0FBQ2YsSUFBSTtnQkFBRTtZQUFFO1FBQUU7UUFBRSxPQUFPVztJQUFRO0lBQUcsT0FBT0YsU0FBU08sS0FBSyxDQUFDLElBQUksRUFBRUg7QUFBWTtBQUU1VCxTQUFTSSxnQkFBZ0JDLFFBQVEsRUFBRUMsV0FBVztJQUFJLElBQUksQ0FBRUQsQ0FBQUEsb0JBQW9CQyxXQUFVLEdBQUk7UUFBRSxNQUFNLElBQUlDLFVBQVU7SUFBc0M7QUFBRTtBQUV4SixTQUFTQyxrQkFBa0JWLE1BQU0sRUFBRVcsS0FBSztJQUFJLElBQUssSUFBSVYsSUFBSSxHQUFHQSxJQUFJVSxNQUFNUixNQUFNLEVBQUVGLElBQUs7UUFBRSxJQUFJVyxhQUFhRCxLQUFLLENBQUNWLEVBQUU7UUFBRVcsV0FBV0MsVUFBVSxHQUFHRCxXQUFXQyxVQUFVLElBQUk7UUFBT0QsV0FBV0UsWUFBWSxHQUFHO1FBQU0sSUFBSSxXQUFXRixZQUFZQSxXQUFXRyxRQUFRLEdBQUc7UUFBTWhELE9BQU9DLGNBQWMsQ0FBQ2dDLFFBQVFZLFdBQVd2QixHQUFHLEVBQUV1QjtJQUFhO0FBQUU7QUFFNVQsU0FBU0ksYUFBYVIsV0FBVyxFQUFFUyxVQUFVLEVBQUVDLFdBQVc7SUFBSSxJQUFJRCxZQUFZUCxrQkFBa0JGLFlBQVlsQixTQUFTLEVBQUUyQjtJQUFhLElBQUlDLGFBQWFSLGtCQUFrQkYsYUFBYVU7SUFBYyxPQUFPVjtBQUFhO0FBRXROLFNBQVNXLGFBQWFDLE9BQU87SUFBSSxPQUFPO1FBQWMsSUFBSUMsUUFBUUMsZ0JBQWdCRixVQUFVRztRQUFRLElBQUlDLDZCQUE2QjtZQUFFLElBQUlDLFlBQVlILGdCQUFnQixJQUFJLEVBQUV6QixXQUFXO1lBQUUwQixTQUFTRyxRQUFRQyxTQUFTLENBQUNOLE9BQU9uQixXQUFXdUI7UUFBWSxPQUFPO1lBQUVGLFNBQVNGLE1BQU1oQixLQUFLLENBQUMsSUFBSSxFQUFFSDtRQUFZO1FBQUUsT0FBTzBCLDJCQUEyQixJQUFJLEVBQUVMO0lBQVM7QUFBRztBQUV6VixTQUFTSywyQkFBMkJDLElBQUksRUFBRXJDLElBQUk7SUFBSSxJQUFJQSxRQUFTVCxDQUFBQSxRQUFRUyxVQUFVLFlBQVksT0FBT0EsU0FBUyxVQUFTLEdBQUk7UUFBRSxPQUFPQTtJQUFNO0lBQUUsT0FBT3NDLHVCQUF1QkQ7QUFBTztBQUVoTCxTQUFTQyx1QkFBdUJELElBQUk7SUFBSSxJQUFJQSxTQUFTLEtBQUssR0FBRztRQUFFLE1BQU0sSUFBSUUsZUFBZTtJQUE4RDtJQUFFLE9BQU9GO0FBQU07QUFFckssU0FBU0w7SUFBOEIsSUFBSSxPQUFPRSxZQUFZLGVBQWUsQ0FBQ0EsUUFBUUMsU0FBUyxFQUFFLE9BQU87SUFBTyxJQUFJRCxRQUFRQyxTQUFTLENBQUNLLElBQUksRUFBRSxPQUFPO0lBQU8sSUFBSSxPQUFPQyxVQUFVLFlBQVksT0FBTztJQUFNLElBQUk7UUFBRUMsS0FBSzVDLFNBQVMsQ0FBQzZDLFFBQVEsQ0FBQzNDLElBQUksQ0FBQ2tDLFFBQVFDLFNBQVMsQ0FBQ08sTUFBTSxFQUFFLEVBQUUsWUFBYTtRQUFLLE9BQU87SUFBTSxFQUFFLE9BQU9FLEdBQUc7UUFBRSxPQUFPO0lBQU87QUFBRTtBQUVuVSxTQUFTZCxnQkFBZ0JlLENBQUM7SUFBSWYsa0JBQWtCdkQsT0FBT3VFLGNBQWMsR0FBR3ZFLE9BQU93RSxjQUFjLEdBQUcsU0FBU2pCLGdCQUFnQmUsQ0FBQztRQUFJLE9BQU9BLEVBQUVHLFNBQVMsSUFBSXpFLE9BQU93RSxjQUFjLENBQUNGO0lBQUk7SUFBRyxPQUFPZixnQkFBZ0JlO0FBQUk7QUFFNU0sU0FBU0ksVUFBVUMsUUFBUSxFQUFFQyxVQUFVO0lBQUksSUFBSSxPQUFPQSxlQUFlLGNBQWNBLGVBQWUsTUFBTTtRQUFFLE1BQU0sSUFBSWxDLFVBQVU7SUFBdUQ7SUFBRWlDLFNBQVNwRCxTQUFTLEdBQUd2QixPQUFPNkUsTUFBTSxDQUFDRCxjQUFjQSxXQUFXckQsU0FBUyxFQUFFO1FBQUVPLGFBQWE7WUFBRTNCLE9BQU93RTtZQUFVM0IsVUFBVTtZQUFNRCxjQUFjO1FBQUs7SUFBRTtJQUFJLElBQUk2QixZQUFZRSxnQkFBZ0JILFVBQVVDO0FBQWE7QUFFaFksU0FBU0UsZ0JBQWdCUixDQUFDLEVBQUVTLENBQUM7SUFBSUQsa0JBQWtCOUUsT0FBT3VFLGNBQWMsSUFBSSxTQUFTTyxnQkFBZ0JSLENBQUMsRUFBRVMsQ0FBQztRQUFJVCxFQUFFRyxTQUFTLEdBQUdNO1FBQUcsT0FBT1Q7SUFBRztJQUFHLE9BQU9RLGdCQUFnQlIsR0FBR1M7QUFBSTtBQUV6SyxTQUFTQyxnQkFBZ0JyRSxHQUFHLEVBQUVXLEdBQUcsRUFBRW5CLEtBQUs7SUFBSSxJQUFJbUIsT0FBT1gsS0FBSztRQUFFWCxPQUFPQyxjQUFjLENBQUNVLEtBQUtXLEtBQUs7WUFBRW5CLE9BQU9BO1lBQU8yQyxZQUFZO1lBQU1DLGNBQWM7WUFBTUMsVUFBVTtRQUFLO0lBQUksT0FBTztRQUFFckMsR0FBRyxDQUFDVyxJQUFJLEdBQUduQjtJQUFPO0lBQUUsT0FBT1E7QUFBSztBQUVoTixTQUFTc0UsMkJBQTJCWCxDQUFDO0lBQUksSUFBSSxPQUFPMUMsV0FBVyxlQUFlMEMsQ0FBQyxDQUFDMUMsT0FBT0MsUUFBUSxDQUFDLElBQUksTUFBTTtRQUFFLElBQUlxRCxNQUFNQyxPQUFPLENBQUNiLE1BQU9BLENBQUFBLElBQUljLDRCQUE0QmQsRUFBQyxHQUFJO1lBQUUsSUFBSXBDLElBQUk7WUFBRyxJQUFJbUQsSUFBSSxTQUFTQSxLQUFLO1lBQUcsT0FBTztnQkFBRUMsR0FBR0Q7Z0JBQUdFLEdBQUcsU0FBU0E7b0JBQU0sSUFBSXJELEtBQUtvQyxFQUFFbEMsTUFBTSxFQUFFLE9BQU87d0JBQUVvRCxNQUFNO29CQUFLO29CQUFHLE9BQU87d0JBQUVBLE1BQU07d0JBQU9yRixPQUFPbUUsQ0FBQyxDQUFDcEMsSUFBSTtvQkFBQztnQkFBRztnQkFBR21DLEdBQUcsU0FBU0EsRUFBRW9CLEVBQUU7b0JBQUksTUFBTUE7Z0JBQUk7Z0JBQUdDLEdBQUdMO1lBQUU7UUFBRztRQUFFLE1BQU0sSUFBSTNDLFVBQVU7SUFBMEk7SUFBRSxJQUFJaUQsSUFBSUMsbUJBQW1CLE1BQU1DLFNBQVMsT0FBT0M7SUFBSyxPQUFPO1FBQUVSLEdBQUcsU0FBU0E7WUFBTUssS0FBS3JCLENBQUMsQ0FBQzFDLE9BQU9DLFFBQVEsQ0FBQztRQUFJO1FBQUcwRCxHQUFHLFNBQVNBO1lBQU0sSUFBSVEsT0FBT0osR0FBR0ssSUFBSTtZQUFJSixtQkFBbUJHLEtBQUtQLElBQUk7WUFBRSxPQUFPTztRQUFNO1FBQUcxQixHQUFHLFNBQVNBLEVBQUU0QixHQUFHO1lBQUlKLFNBQVM7WUFBTUMsTUFBTUc7UUFBSztRQUFHUCxHQUFHLFNBQVNBO1lBQU0sSUFBSTtnQkFBRSxJQUFJLENBQUNFLG9CQUFvQkQsRUFBRSxDQUFDLFNBQVMsSUFBSSxNQUFNQSxFQUFFLENBQUMsU0FBUztZQUFJLFNBQVU7Z0JBQUUsSUFBSUUsUUFBUSxNQUFNQztZQUFLO1FBQUU7SUFBRTtBQUFHO0FBRXg0QixTQUFTViw0QkFBNEJkLENBQUMsRUFBRTRCLE1BQU07SUFBSSxJQUFJLENBQUM1QixHQUFHO0lBQVEsSUFBSSxPQUFPQSxNQUFNLFVBQVUsT0FBTzZCLGtCQUFrQjdCLEdBQUc0QjtJQUFTLElBQUlYLElBQUl2RixPQUFPdUIsU0FBUyxDQUFDNkMsUUFBUSxDQUFDM0MsSUFBSSxDQUFDNkMsR0FBRzhCLEtBQUssQ0FBQyxHQUFHLENBQUM7SUFBSSxJQUFJYixNQUFNLFlBQVlqQixFQUFFeEMsV0FBVyxFQUFFeUQsSUFBSWpCLEVBQUV4QyxXQUFXLENBQUN1RSxJQUFJO0lBQUUsSUFBSWQsTUFBTSxTQUFTQSxNQUFNLE9BQU8sT0FBT0wsTUFBTW9CLElBQUksQ0FBQ2Y7SUFBSSxJQUFJQSxNQUFNLGVBQWUsMkNBQTJDZ0IsSUFBSSxDQUFDaEIsSUFBSSxPQUFPWSxrQkFBa0I3QixHQUFHNEI7QUFBUztBQUUvWixTQUFTQyxrQkFBa0JLLEdBQUcsRUFBRUMsR0FBRztJQUFJLElBQUlBLE9BQU8sUUFBUUEsTUFBTUQsSUFBSXBFLE1BQU0sRUFBRXFFLE1BQU1ELElBQUlwRSxNQUFNO0lBQUUsSUFBSyxJQUFJRixJQUFJLEdBQUd3RSxPQUFPLElBQUl4QixNQUFNdUIsTUFBTXZFLElBQUl1RSxLQUFLdkUsSUFBSztRQUFFd0UsSUFBSSxDQUFDeEUsRUFBRSxHQUFHc0UsR0FBRyxDQUFDdEUsRUFBRTtJQUFFO0lBQUUsT0FBT3dFO0FBQU07QUFFdEwsSUFBSUMsTUFBTSxPQUFPQyxjQUFjLGVBQWUsbUJBQW1CTCxJQUFJLENBQUNLLFVBQVVDLFNBQVMsS0FBSyxDQUFDQyxPQUFPQyxRQUFRO0FBQzlHLElBQUlDLG1CQUFtQjtBQUN2QixJQUFJQyxtQkFBbUI7QUFDdkIsSUFBSUMsaUJBQWlCO0FBQ3JCLElBQUlDLGNBQWM7QUFDbEIsSUFBSUMsYUFBYTtBQUNqQixJQUFJQyxrQkFBa0I7QUFDdEIsSUFBSUMsZUFBZTtBQUNuQixJQUFJQyxjQUFjO0FBQ2xCLElBQUlDLG9CQUFvQjtBQUV4QixTQUFTQyxRQUFRQyxHQUFHO0lBQ2xCLElBQUlBLGVBQWV4QyxPQUFPO1FBQ3hCLElBQUl5QyxZQUFZMUMsMkJBQTJCeUMsTUFDdkNFO1FBRUosSUFBSTtZQUNGLElBQUtELFVBQVVyQyxDQUFDLElBQUksQ0FBQyxDQUFDc0MsUUFBUUQsVUFBVXBDLENBQUMsRUFBQyxFQUFHQyxJQUFJLEVBQUc7Z0JBQ2xELElBQUlxQyxPQUFPRCxNQUFNekgsS0FBSztnQkFFdEIsSUFBSSxPQUFPMEgsU0FBUyxZQUFZSixRQUFRSSxPQUFPO29CQUM3QyxPQUFPO2dCQUNUO2dCQUVBLElBQUlKLFFBQVFJLEtBQUtDLEdBQUcsR0FBRztvQkFDckIsT0FBTztnQkFDVDtZQUNGO1FBQ0YsRUFBRSxPQUFPaEMsS0FBSztZQUNaNkIsVUFBVXRELENBQUMsQ0FBQ3lCO1FBQ2QsU0FBVTtZQUNSNkIsVUFBVWpDLENBQUM7UUFDYjtRQUVBLE9BQU87SUFDVDtJQUVBLElBQUksQ0FBQyxHQUFHbEYsT0FBT3VILGFBQWEsRUFBRUwsTUFBTTtRQUNsQyxPQUFPO0lBQ1Q7SUFFQSxPQUFPVixpQkFBaUJULElBQUksQ0FBQ21CLFFBQVFULGlCQUFpQlYsSUFBSSxDQUFDbUIsUUFBUVIsZUFBZVgsSUFBSSxDQUFDbUIsUUFBUUwsZ0JBQWdCZCxJQUFJLENBQUNtQjtBQUN0SDtBQUVBLFNBQVNNLCtCQUErQkMsS0FBSztJQUMzQyxJQUFJLENBQUNBLE9BQU9BLFFBQVFDLFNBQVNDLGFBQWEsQ0FBQyxVQUFVLHVFQUF1RTtJQUM1SCwwRkFBMEY7SUFFMUYsT0FBT0YsTUFBTUcsOEJBQThCLElBQUksT0FBT0gsTUFBTUkseUJBQXlCLEtBQUssY0FBYyxDQUFDLGNBQWM5QixJQUFJLENBQUNLLFVBQVVDLFNBQVM7QUFDako7QUFFQSxTQUFTeUIsYUFBYVosR0FBRztJQUN2QixPQUFPRCxRQUFRQyxRQUFTLEVBQUMsQ0FBQ1EsU0FBU0ssdUJBQXVCLElBQUlQLGdDQUErQixLQUFNLENBQUNoQixpQkFBaUJULElBQUksQ0FBQ21CO0FBQzVIO0FBRUEsSUFBSXRILGFBQWEsV0FBVyxHQUFFLFNBQVVvSSxVQUFVO0lBQ2hEOUQsVUFBVXRFLFlBQVlvSTtJQUV0QixJQUFJQyxTQUFTckYsYUFBYWhEO0lBRTFCLFNBQVNBO1FBQ1AsSUFBSXNJO1FBRUpuRyxnQkFBZ0IsSUFBSSxFQUFFbkM7UUFFdEIsSUFBSyxJQUFJdUksT0FBT3hHLFVBQVVDLE1BQU0sRUFBRXdHLFFBQVEsSUFBSTFELE1BQU15RCxPQUFPRSxPQUFPLEdBQUdBLE9BQU9GLE1BQU1FLE9BQVE7WUFDeEZELEtBQUssQ0FBQ0MsS0FBSyxHQUFHMUcsU0FBUyxDQUFDMEcsS0FBSztRQUMvQjtRQUVBSCxRQUFRRCxPQUFPaEgsSUFBSSxDQUFDYSxLQUFLLENBQUNtRyxRQUFRO1lBQUMsSUFBSTtTQUFDLENBQUNLLE1BQU0sQ0FBQ0Y7UUFFaEQ1RCxnQkFBZ0JqQix1QkFBdUIyRSxRQUFRLFdBQVc7WUFDeEQsSUFBSUs7WUFFSixPQUFPLENBQUNBLGNBQWNMLE1BQU05RixLQUFLLEVBQUVvRyxPQUFPLENBQUMxRyxLQUFLLENBQUN5RyxhQUFhNUc7UUFDaEU7UUFFQTZDLGdCQUFnQmpCLHVCQUF1QjJFLFFBQVEsVUFBVTtZQUN2RCxJQUFJTztZQUVKLE9BQU8sQ0FBQ0EsZUFBZVAsTUFBTTlGLEtBQUssRUFBRXNHLE1BQU0sQ0FBQzVHLEtBQUssQ0FBQzJHLGNBQWM5RztRQUNqRTtRQUVBNkMsZ0JBQWdCakIsdUJBQXVCMkUsUUFBUSxZQUFZO1lBQ3pELElBQUlTO1lBRUosT0FBTyxDQUFDQSxlQUFlVCxNQUFNOUYsS0FBSyxFQUFFd0csUUFBUSxDQUFDOUcsS0FBSyxDQUFDNkcsY0FBY2hIO1FBQ25FO1FBRUE2QyxnQkFBZ0JqQix1QkFBdUIyRSxRQUFRLGVBQWU7WUFDNUQsSUFBSVc7WUFFSixPQUFPLENBQUNBLGVBQWVYLE1BQU05RixLQUFLLEVBQUUwRyxXQUFXLENBQUNoSCxLQUFLLENBQUMrRyxjQUFjbEg7UUFDdEU7UUFFQTZDLGdCQUFnQmpCLHVCQUF1QjJFLFFBQVEsV0FBVztZQUN4RCxJQUFJYTtZQUVKLE9BQU8sQ0FBQ0EsZUFBZWIsTUFBTTlGLEtBQUssRUFBRTRHLE9BQU8sQ0FBQ2xILEtBQUssQ0FBQ2lILGNBQWNwSDtRQUNsRTtRQUVBNkMsZ0JBQWdCakIsdUJBQXVCMkUsUUFBUSxXQUFXO1lBQ3hELElBQUllO1lBRUosT0FBTyxDQUFDQSxlQUFlZixNQUFNOUYsS0FBSyxFQUFFOEcsT0FBTyxDQUFDcEgsS0FBSyxDQUFDbUgsY0FBY3RIO1FBQ2xFO1FBRUE2QyxnQkFBZ0JqQix1QkFBdUIyRSxRQUFRLFdBQVc7WUFDeEQsSUFBSWlCO1lBRUosT0FBTyxDQUFDQSxlQUFlakIsTUFBTTlGLEtBQUssRUFBRWdILE9BQU8sQ0FBQ3RILEtBQUssQ0FBQ3FILGNBQWN4SDtRQUNsRTtRQUVBNkMsZ0JBQWdCakIsdUJBQXVCMkUsUUFBUSxlQUFlO1lBQzVELElBQUltQjtZQUVKLE9BQU8sQ0FBQ0EsZUFBZW5CLE1BQU05RixLQUFLLEVBQUVrSCxXQUFXLENBQUN4SCxLQUFLLENBQUN1SCxjQUFjMUg7UUFDdEU7UUFFQTZDLGdCQUFnQmpCLHVCQUF1QjJFLFFBQVEsZ0JBQWdCLFNBQVVyRSxDQUFDO1lBQ3hFLElBQUkwRixlQUFlckIsTUFBTTlGLEtBQUssRUFDMUJvSCxlQUFlRCxhQUFhQyxZQUFZLEVBQ3hDQyxVQUFVRixhQUFhRSxPQUFPO1lBQ2xDRCxhQUFhM0Y7WUFFYixJQUFJNEYsU0FBUztnQkFDWHZCLE1BQU13QixJQUFJO1lBQ1o7UUFDRjtRQUVBbEYsZ0JBQWdCakIsdUJBQXVCMkUsUUFBUSw0QkFBNEIsU0FBVXJFLENBQUM7WUFDcEYsSUFBSXFFLE1BQU15QixNQUFNLElBQUluQywrQkFBK0JVLE1BQU15QixNQUFNLEdBQUc7Z0JBQ2hFLElBQUlDLHlCQUF5QjFCLE1BQU15QixNQUFNLENBQUNDLHNCQUFzQjtnQkFFaEUsSUFBSUEsMkJBQTJCLHNCQUFzQjtvQkFDbkQxQixNQUFNb0IsV0FBVyxDQUFDekY7Z0JBQ3BCLE9BQU8sSUFBSStGLDJCQUEyQixVQUFVO29CQUM5QzFCLE1BQU1zQixZQUFZLENBQUMzRjtnQkFDckI7WUFDRjtRQUNGO1FBRUFXLGdCQUFnQmpCLHVCQUF1QjJFLFFBQVEsVUFBVSxTQUFVckUsQ0FBQztZQUNsRXFFLE1BQU05RixLQUFLLENBQUN5SCxNQUFNLENBQUNoRyxFQUFFcEMsTUFBTSxDQUFDcUksV0FBVztRQUN6QztRQUVBdEYsZ0JBQWdCakIsdUJBQXVCMkUsUUFBUSxRQUFRO1lBQ3JEQSxNQUFNeUIsTUFBTSxDQUFDSSxLQUFLLEdBQUc7UUFDdkI7UUFFQXZGLGdCQUFnQmpCLHVCQUF1QjJFLFFBQVEsVUFBVTtZQUN2REEsTUFBTXlCLE1BQU0sQ0FBQ0ksS0FBSyxHQUFHO1FBQ3ZCO1FBRUF2RixnQkFBZ0JqQix1QkFBdUIyRSxRQUFRLHVCQUF1QixTQUFVckcsTUFBTSxFQUFFbUksS0FBSztZQUMzRixJQUFJLE9BQU9uSSxXQUFXLFVBQVU7Z0JBQzlCLE9BQU8sV0FBVyxHQUFFaEMsTUFBTSxDQUFDLFVBQVUsQ0FBQzhILGFBQWEsQ0FBQyxVQUFVO29CQUM1RDdHLEtBQUtrSjtvQkFDTDFDLEtBQUt6RjtnQkFDUDtZQUNGO1lBRUEsT0FBTyxXQUFXLEdBQUVoQyxNQUFNLENBQUMsVUFBVSxDQUFDOEgsYUFBYSxDQUFDLFVBQVVwRyxTQUFTO2dCQUNyRVQsS0FBS2tKO1lBQ1AsR0FBR25JO1FBQ0w7UUFFQTJDLGdCQUFnQmpCLHVCQUF1QjJFLFFBQVEsZUFBZSxTQUFVK0IsS0FBSyxFQUFFRCxLQUFLO1lBQ2xGLE9BQU8sV0FBVyxHQUFFbkssTUFBTSxDQUFDLFVBQVUsQ0FBQzhILGFBQWEsQ0FBQyxTQUFTcEcsU0FBUztnQkFDcEVULEtBQUtrSjtZQUNQLEdBQUdDO1FBQ0w7UUFFQXpGLGdCQUFnQmpCLHVCQUF1QjJFLFFBQVEsT0FBTyxTQUFVeUIsTUFBTTtZQUNwRSxJQUFJekIsTUFBTXlCLE1BQU0sRUFBRTtnQkFDaEIsd0RBQXdEO2dCQUN4RHpCLE1BQU1nQyxVQUFVLEdBQUdoQyxNQUFNeUIsTUFBTTtZQUNqQztZQUVBekIsTUFBTXlCLE1BQU0sR0FBR0E7UUFDakI7UUFFQSxPQUFPekI7SUFDVDtJQUVBekYsYUFBYTdDLFlBQVk7UUFBQztZQUN4QmtCLEtBQUs7WUFDTG5CLE9BQU8sU0FBU3dLO2dCQUNkLElBQUksQ0FBQ0MsWUFBWSxDQUFDLElBQUksQ0FBQ1QsTUFBTTtnQkFFN0IsSUFBSXhELEtBQUs7b0JBQ1AsSUFBSSxDQUFDd0QsTUFBTSxDQUFDVSxJQUFJO2dCQUNsQjtZQUNGO1FBQ0Y7UUFBRztZQUNEdkosS0FBSztZQUNMbkIsT0FBTyxTQUFTMkssbUJBQW1CQyxTQUFTO2dCQUMxQyxJQUFJLElBQUksQ0FBQ0MsY0FBYyxDQUFDLElBQUksQ0FBQ3BJLEtBQUssTUFBTSxJQUFJLENBQUNvSSxjQUFjLENBQUNELFlBQVk7b0JBQ3RFLElBQUksQ0FBQ0UsZUFBZSxDQUFDLElBQUksQ0FBQ1AsVUFBVTtvQkFDcEMsSUFBSSxDQUFDRSxZQUFZLENBQUMsSUFBSSxDQUFDVCxNQUFNO2dCQUMvQjtZQUNGO1FBQ0Y7UUFBRztZQUNEN0ksS0FBSztZQUNMbkIsT0FBTyxTQUFTK0s7Z0JBQ2QsSUFBSSxDQUFDRCxlQUFlLENBQUMsSUFBSSxDQUFDZCxNQUFNO2dCQUVoQyxJQUFJLElBQUksQ0FBQ2dCLEdBQUcsRUFBRTtvQkFDWixJQUFJLENBQUNBLEdBQUcsQ0FBQ0MsT0FBTztnQkFDbEI7WUFDRjtRQUNGO1FBQUc7WUFDRDlKLEtBQUs7WUFDTG5CLE9BQU8sU0FBU3lLLGFBQWFULE1BQU07Z0JBQ2pDLElBQUlrQixjQUFjLElBQUksQ0FBQ3pJLEtBQUssQ0FBQ3lJLFdBQVc7Z0JBQ3hDbEIsT0FBT21CLGdCQUFnQixDQUFDLFdBQVcsSUFBSSxDQUFDdEMsT0FBTztnQkFDL0NtQixPQUFPbUIsZ0JBQWdCLENBQUMsUUFBUSxJQUFJLENBQUNwQyxNQUFNO2dCQUMzQ2lCLE9BQU9tQixnQkFBZ0IsQ0FBQyxXQUFXLElBQUksQ0FBQ2xDLFFBQVE7Z0JBQ2hEZSxPQUFPbUIsZ0JBQWdCLENBQUMsV0FBVyxJQUFJLENBQUNoQyxXQUFXO2dCQUNuRGEsT0FBT21CLGdCQUFnQixDQUFDLFNBQVMsSUFBSSxDQUFDOUIsT0FBTztnQkFDN0NXLE9BQU9tQixnQkFBZ0IsQ0FBQyxVQUFVLElBQUksQ0FBQ2pCLE1BQU07Z0JBQzdDRixPQUFPbUIsZ0JBQWdCLENBQUMsU0FBUyxJQUFJLENBQUM1QixPQUFPO2dCQUM3Q1MsT0FBT21CLGdCQUFnQixDQUFDLFNBQVMsSUFBSSxDQUFDMUIsT0FBTztnQkFDN0NPLE9BQU9tQixnQkFBZ0IsQ0FBQyx5QkFBeUIsSUFBSSxDQUFDeEIsV0FBVztnQkFDakVLLE9BQU9tQixnQkFBZ0IsQ0FBQyx5QkFBeUIsSUFBSSxDQUFDdEIsWUFBWTtnQkFDbEVHLE9BQU9tQixnQkFBZ0IsQ0FBQyxpQ0FBaUMsSUFBSSxDQUFDQyx3QkFBd0I7Z0JBRXRGLElBQUlGLGFBQWE7b0JBQ2ZsQixPQUFPcUIsWUFBWSxDQUFDLGVBQWU7b0JBQ25DckIsT0FBT3FCLFlBQVksQ0FBQyxzQkFBc0I7b0JBQzFDckIsT0FBT3FCLFlBQVksQ0FBQyxrQkFBa0I7Z0JBQ3hDO1lBQ0Y7UUFDRjtRQUFHO1lBQ0RsSyxLQUFLO1lBQ0xuQixPQUFPLFNBQVM4SyxnQkFBZ0JkLE1BQU07Z0JBQ3BDQSxPQUFPc0IsbUJBQW1CLENBQUMsV0FBVyxJQUFJLENBQUN6QyxPQUFPO2dCQUNsRG1CLE9BQU9zQixtQkFBbUIsQ0FBQyxRQUFRLElBQUksQ0FBQ3ZDLE1BQU07Z0JBQzlDaUIsT0FBT3NCLG1CQUFtQixDQUFDLFdBQVcsSUFBSSxDQUFDckMsUUFBUTtnQkFDbkRlLE9BQU9zQixtQkFBbUIsQ0FBQyxXQUFXLElBQUksQ0FBQ25DLFdBQVc7Z0JBQ3REYSxPQUFPc0IsbUJBQW1CLENBQUMsU0FBUyxJQUFJLENBQUNqQyxPQUFPO2dCQUNoRFcsT0FBT3NCLG1CQUFtQixDQUFDLFVBQVUsSUFBSSxDQUFDcEIsTUFBTTtnQkFDaERGLE9BQU9zQixtQkFBbUIsQ0FBQyxTQUFTLElBQUksQ0FBQy9CLE9BQU87Z0JBQ2hEUyxPQUFPc0IsbUJBQW1CLENBQUMsU0FBUyxJQUFJLENBQUM3QixPQUFPO2dCQUNoRE8sT0FBT3NCLG1CQUFtQixDQUFDLHlCQUF5QixJQUFJLENBQUMzQixXQUFXO2dCQUNwRUssT0FBT3NCLG1CQUFtQixDQUFDLHlCQUF5QixJQUFJLENBQUN6QixZQUFZO2dCQUNyRUcsT0FBT3NCLG1CQUFtQixDQUFDLGlDQUFpQyxJQUFJLENBQUNGLHdCQUF3QjtZQUMzRixFQUFFLDBDQUEwQztRQUU5QztRQUFHO1lBQ0RqSyxLQUFLO1lBQ0xuQixPQUFPLFNBQVM2SyxlQUFlcEksS0FBSztnQkFDbEMsSUFBSUEsTUFBTThJLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDQyxVQUFVLEVBQUU7b0JBQ2hDLE9BQU87Z0JBQ1Q7Z0JBRUEsSUFBSWhKLE1BQU04SSxNQUFNLENBQUNDLElBQUksQ0FBQ0UsVUFBVSxDQUFDQyxNQUFNLEVBQUU7b0JBQ3ZDLE9BQU8sT0FBTyxzQ0FBc0M7Z0JBQ3REO2dCQUVBLE9BQU85RSxpQkFBaUJULElBQUksQ0FBQzNELE1BQU04RSxHQUFHLEtBQUs5RSxNQUFNOEksTUFBTSxDQUFDQyxJQUFJLENBQUNJLFVBQVU7WUFDekU7UUFDRjtRQUFHO1lBQ0R6SyxLQUFLO1lBQ0xuQixPQUFPLFNBQVM2TCxhQUFhdEUsR0FBRztnQkFDOUIsT0FBT1IsZUFBZVgsSUFBSSxDQUFDbUIsUUFBUSxDQUFDZixPQUFPLElBQUksQ0FBQy9ELEtBQUssQ0FBQzhJLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDTSxRQUFRO1lBQzVFO1FBQ0Y7UUFBRztZQUNEM0ssS0FBSztZQUNMbkIsT0FBTyxTQUFTK0wsY0FBY3hFLEdBQUc7Z0JBQy9CLE9BQU9MLGdCQUFnQmQsSUFBSSxDQUFDbUIsUUFBUSxJQUFJLENBQUM5RSxLQUFLLENBQUM4SSxNQUFNLENBQUNDLElBQUksQ0FBQ1EsU0FBUztZQUN0RTtRQUNGO1FBQUc7WUFDRDdLLEtBQUs7WUFDTG5CLE9BQU8sU0FBUzBLLEtBQUtuRCxHQUFHO2dCQUN0QixJQUFJMEUsU0FBUyxJQUFJO2dCQUVqQixJQUFJQyx3QkFBd0IsSUFBSSxDQUFDekosS0FBSyxDQUFDOEksTUFBTSxDQUFDQyxJQUFJLEVBQzlDVyxhQUFhRCxzQkFBc0JDLFVBQVUsRUFDN0NDLGNBQWNGLHNCQUFzQkUsV0FBVztnQkFFbkQsSUFBSSxJQUFJLENBQUNQLFlBQVksQ0FBQ3RFLE1BQU07b0JBQ3pCLElBQUdsSCxPQUFPZ00sTUFBTSxFQUFFckYsWUFBWXNGLE9BQU8sQ0FBQyxXQUFXSCxhQUFhbEYsWUFBWXNGLElBQUksQ0FBQyxTQUFVQyxHQUFHO3dCQUMzRlAsT0FBT2pCLEdBQUcsR0FBRyxJQUFJd0IsSUFBSVAsT0FBT3hKLEtBQUssQ0FBQzhJLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDaUIsVUFBVTt3QkFFeERSLE9BQU9qQixHQUFHLENBQUMwQixFQUFFLENBQUNGLElBQUlHLE1BQU0sQ0FBQ0MsS0FBSyxFQUFFLFNBQVUxSSxDQUFDLEVBQUUySSxJQUFJOzRCQUMvQ1osT0FBT3hKLEtBQUssQ0FBQ2dILE9BQU8sQ0FBQ3ZGLEdBQUcySSxNQUFNWixPQUFPakIsR0FBRyxFQUFFd0I7d0JBQzVDO3dCQUVBUCxPQUFPakIsR0FBRyxDQUFDOEIsVUFBVSxDQUFDdkY7d0JBRXRCMEUsT0FBT2pCLEdBQUcsQ0FBQytCLFdBQVcsQ0FBQ2QsT0FBT2pDLE1BQU07b0JBQ3RDO2dCQUNGO2dCQUVBLElBQUksSUFBSSxDQUFDK0IsYUFBYSxDQUFDeEUsTUFBTTtvQkFDMUIsSUFBR2xILE9BQU9nTSxNQUFNLEVBQUVsRixhQUFhbUYsT0FBTyxDQUFDLFdBQVdGLGNBQWNoRixhQUFhbUYsSUFBSSxDQUFDLFNBQVVTLE1BQU07d0JBQ2pHZixPQUFPZ0IsSUFBSSxHQUFHRCxPQUFPRSxXQUFXLEdBQUd4SSxNQUFNO3dCQUV6Q3VILE9BQU9nQixJQUFJLENBQUNFLFVBQVUsQ0FBQ2xCLE9BQU9qQyxNQUFNLEVBQUV6QyxLQUFLMEUsT0FBT3hKLEtBQUssQ0FBQ3FILE9BQU87d0JBRS9EbUMsT0FBT2dCLElBQUksQ0FBQ1AsRUFBRSxDQUFDLFNBQVNULE9BQU94SixLQUFLLENBQUNnSCxPQUFPO3dCQUU1Q3dDLE9BQU9nQixJQUFJLENBQUNHLFFBQVEsR0FBR0Msc0JBQXNCLENBQUM7b0JBQ2hEO2dCQUNGO2dCQUVBLElBQUk5RixlQUFleEMsT0FBTztvQkFDeEIsK0RBQStEO29CQUMvRCwrREFBK0Q7b0JBQy9ELGlFQUFpRTtvQkFDakUsMEJBQTBCO29CQUMxQixJQUFJLENBQUNpRixNQUFNLENBQUNVLElBQUk7Z0JBQ2xCLE9BQU8sSUFBSSxDQUFDLEdBQUdySyxPQUFPdUgsYUFBYSxFQUFFTCxNQUFNO29CQUN6QyxJQUFJO3dCQUNGLElBQUksQ0FBQ3lDLE1BQU0sQ0FBQ3NELFNBQVMsR0FBRy9GO29CQUMxQixFQUFFLE9BQU9yRCxHQUFHO3dCQUNWLElBQUksQ0FBQzhGLE1BQU0sQ0FBQ3JDLEdBQUcsR0FBR2hCLE9BQU80RyxHQUFHLENBQUNDLGVBQWUsQ0FBQ2pHO29CQUMvQztnQkFDRjtZQUNGO1FBQ0Y7UUFBRztZQUNEcEcsS0FBSztZQUNMbkIsT0FBTyxTQUFTK0o7Z0JBQ2QsSUFBSTBELFVBQVUsSUFBSSxDQUFDekQsTUFBTSxDQUFDRCxJQUFJO2dCQUU5QixJQUFJMEQsU0FBUztvQkFDWEEsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUNoTCxLQUFLLENBQUNnSCxPQUFPO2dCQUNyQztZQUNGO1FBQ0Y7UUFBRztZQUNEdEksS0FBSztZQUNMbkIsT0FBTyxTQUFTME47Z0JBQ2QsSUFBSSxDQUFDMUQsTUFBTSxDQUFDMEQsS0FBSztZQUNuQjtRQUNGO1FBQUc7WUFDRHZNLEtBQUs7WUFDTG5CLE9BQU8sU0FBUzJOO2dCQUNkLElBQUksQ0FBQzNELE1BQU0sQ0FBQzRELGVBQWUsQ0FBQztnQkFFNUIsSUFBSSxJQUFJLENBQUNYLElBQUksRUFBRTtvQkFDYixJQUFJLENBQUNBLElBQUksQ0FBQ1ksS0FBSztnQkFDakI7WUFDRjtRQUNGO1FBQUc7WUFDRDFNLEtBQUs7WUFDTG5CLE9BQU8sU0FBUzhOLE9BQU9DLE9BQU87Z0JBQzVCLElBQUksQ0FBQy9ELE1BQU0sQ0FBQ0csV0FBVyxHQUFHNEQ7WUFDNUI7UUFDRjtRQUFHO1lBQ0Q1TSxLQUFLO1lBQ0xuQixPQUFPLFNBQVNnTyxVQUFVQyxRQUFRO2dCQUNoQyxJQUFJLENBQUNqRSxNQUFNLENBQUNrRSxNQUFNLEdBQUdEO1lBQ3ZCO1FBQ0Y7UUFBRztZQUNEOU0sS0FBSztZQUNMbkIsT0FBTyxTQUFTbU87Z0JBQ2QsSUFBSSxJQUFJLENBQUNuRSxNQUFNLENBQUNvRSx1QkFBdUIsSUFBSXJHLFNBQVNzRyx1QkFBdUIsS0FBSyxJQUFJLENBQUNyRSxNQUFNLEVBQUU7b0JBQzNGLElBQUksQ0FBQ0EsTUFBTSxDQUFDb0UsdUJBQXVCO2dCQUNyQyxPQUFPLElBQUl2RywrQkFBK0IsSUFBSSxDQUFDbUMsTUFBTSxLQUFLLElBQUksQ0FBQ0EsTUFBTSxDQUFDQyxzQkFBc0IsS0FBSyxzQkFBc0I7b0JBQ3JILElBQUksQ0FBQ0QsTUFBTSxDQUFDOUIseUJBQXlCLENBQUM7Z0JBQ3hDO1lBQ0Y7UUFDRjtRQUFHO1lBQ0QvRyxLQUFLO1lBQ0xuQixPQUFPLFNBQVNzTztnQkFDZCxJQUFJdkcsU0FBU3dHLG9CQUFvQixJQUFJeEcsU0FBU3NHLHVCQUF1QixLQUFLLElBQUksQ0FBQ3JFLE1BQU0sRUFBRTtvQkFDckZqQyxTQUFTd0csb0JBQW9CO2dCQUMvQixPQUFPLElBQUkxRywrQkFBK0IsSUFBSSxDQUFDbUMsTUFBTSxLQUFLLElBQUksQ0FBQ0EsTUFBTSxDQUFDQyxzQkFBc0IsS0FBSyxVQUFVO29CQUN6RyxJQUFJLENBQUNELE1BQU0sQ0FBQzlCLHlCQUF5QixDQUFDO2dCQUN4QztZQUNGO1FBQ0Y7UUFBRztZQUNEL0csS0FBSztZQUNMbkIsT0FBTyxTQUFTd08sZ0JBQWdCQyxJQUFJO2dCQUNsQyxJQUFJLENBQUN6RSxNQUFNLENBQUMwRSxZQUFZLEdBQUdEO1lBQzdCO1FBQ0Y7UUFBRztZQUNEdE4sS0FBSztZQUNMbkIsT0FBTyxTQUFTMk87Z0JBQ2QsSUFBSSxDQUFDLElBQUksQ0FBQzNFLE1BQU0sRUFBRSxPQUFPO2dCQUN6QixJQUFJNEUsZUFBZSxJQUFJLENBQUM1RSxNQUFNLEVBQzFCNkUsV0FBV0QsYUFBYUMsUUFBUSxFQUNoQ0MsV0FBV0YsYUFBYUUsUUFBUSxFQUFFLHdEQUF3RDtnQkFDOUYsc0RBQXNEO2dCQUV0RCxJQUFJRCxhQUFhRSxZQUFZRCxTQUFTN00sTUFBTSxHQUFHLEdBQUc7b0JBQ2hELE9BQU82TSxTQUFTRSxHQUFHLENBQUNGLFNBQVM3TSxNQUFNLEdBQUc7Z0JBQ3hDO2dCQUVBLE9BQU80TTtZQUNUO1FBQ0Y7UUFBRztZQUNEMU4sS0FBSztZQUNMbkIsT0FBTyxTQUFTaVA7Z0JBQ2QsSUFBSSxDQUFDLElBQUksQ0FBQ2pGLE1BQU0sRUFBRSxPQUFPO2dCQUN6QixPQUFPLElBQUksQ0FBQ0EsTUFBTSxDQUFDRyxXQUFXO1lBQ2hDO1FBQ0Y7UUFBRztZQUNEaEosS0FBSztZQUNMbkIsT0FBTyxTQUFTa1A7Z0JBQ2QsSUFBSSxDQUFDLElBQUksQ0FBQ2xGLE1BQU0sRUFBRSxPQUFPO2dCQUN6QixJQUFJbUYsV0FBVyxJQUFJLENBQUNuRixNQUFNLENBQUNtRixRQUFRO2dCQUVuQyxJQUFJQSxTQUFTbE4sTUFBTSxLQUFLLEdBQUc7b0JBQ3pCLE9BQU87Z0JBQ1Q7Z0JBRUEsSUFBSStNLE1BQU1HLFNBQVNILEdBQUcsQ0FBQ0csU0FBU2xOLE1BQU0sR0FBRztnQkFDekMsSUFBSTRNLFdBQVcsSUFBSSxDQUFDRixXQUFXO2dCQUUvQixJQUFJSyxNQUFNSCxVQUFVO29CQUNsQixPQUFPQTtnQkFDVDtnQkFFQSxPQUFPRztZQUNUO1FBQ0Y7UUFBRztZQUNEN04sS0FBSztZQUNMbkIsT0FBTyxTQUFTb1AsVUFBVTdILEdBQUc7Z0JBQzNCLElBQUk4SCxTQUFTLElBQUksQ0FBQ3hELFlBQVksQ0FBQ3RFO2dCQUMvQixJQUFJK0gsVUFBVSxJQUFJLENBQUN2RCxhQUFhLENBQUN4RTtnQkFFakMsSUFBSUEsZUFBZXhDLFNBQVMsQ0FBQyxHQUFHMUUsT0FBT3VILGFBQWEsRUFBRUwsUUFBUThILFVBQVVDLFNBQVM7b0JBQy9FLE9BQU9DO2dCQUNUO2dCQUVBLElBQUlsSSxrQkFBa0JqQixJQUFJLENBQUNtQixNQUFNO29CQUMvQixPQUFPQSxJQUFJK0UsT0FBTyxDQUFDLG1CQUFtQjtnQkFDeEM7Z0JBRUEsT0FBTy9FO1lBQ1Q7UUFDRjtRQUFHO1lBQ0RwRyxLQUFLO1lBQ0xuQixPQUFPLFNBQVN3UDtnQkFDZCxJQUFJQyxnQkFBZ0IsSUFBSSxDQUFDaE4sS0FBSyxFQUMxQjhFLE1BQU1rSSxjQUFjbEksR0FBRyxFQUN2QnVDLFVBQVUyRixjQUFjM0YsT0FBTyxFQUMvQjRGLE9BQU9ELGNBQWNDLElBQUksRUFDekJDLFdBQVdGLGNBQWNFLFFBQVEsRUFDakN2RixRQUFRcUYsY0FBY3JGLEtBQUssRUFDM0JtQixTQUFTa0UsY0FBY2xFLE1BQU0sRUFDN0JxRSxRQUFRSCxjQUFjRyxLQUFLLEVBQzNCQyxTQUFTSixjQUFjSSxNQUFNO2dCQUNqQyxJQUFJQyxXQUFXLElBQUksQ0FBQ2pGLGNBQWMsQ0FBQyxJQUFJLENBQUNwSSxLQUFLO2dCQUM3QyxJQUFJc04sVUFBVUQsV0FBVyxVQUFVO2dCQUNuQyxJQUFJRSxRQUFRO29CQUNWSixPQUFPQSxVQUFVLFNBQVNBLFFBQVE7b0JBQ2xDQyxRQUFRQSxXQUFXLFNBQVNBLFNBQVM7Z0JBQ3ZDO2dCQUNBLE9BQU8sV0FBVyxHQUFFM1AsTUFBTSxDQUFDLFVBQVUsQ0FBQzhILGFBQWEsQ0FBQytILFNBQVNuTyxTQUFTO29CQUNwRXFPLEtBQUssSUFBSSxDQUFDQSxHQUFHO29CQUNidEksS0FBSyxJQUFJLENBQUN5SCxTQUFTLENBQUM3SDtvQkFDcEJ5SSxPQUFPQTtvQkFDUEUsU0FBUztvQkFDVEMsVUFBVXJHLFdBQVd5RjtvQkFDckJJLFVBQVVBO29CQUNWdkYsT0FBT0E7b0JBQ1BzRixNQUFNQTtnQkFDUixHQUFHbkUsT0FBT0MsSUFBSSxDQUFDRSxVQUFVLEdBQUduRSxlQUFleEMsU0FBU3dDLElBQUk2SSxHQUFHLENBQUMsSUFBSSxDQUFDQyxtQkFBbUIsR0FBRzlFLE9BQU9DLElBQUksQ0FBQzhFLE1BQU0sQ0FBQ0YsR0FBRyxDQUFDLElBQUksQ0FBQ0csV0FBVztZQUNoSTtRQUNGO0tBQUU7SUFFRixPQUFPdFE7QUFDVCxFQUFFQyxPQUFPc1EsU0FBUztBQUVsQnpRLGtCQUFrQixHQUFHRTtBQUVyQjRFLGdCQUFnQjVFLFlBQVksZUFBZTtBQUUzQzRFLGdCQUFnQjVFLFlBQVksV0FBV3FIO0FBRXZDekMsZ0JBQWdCNUUsWUFBWSxnQkFBZ0JrSTtBQUU1QyxJQUFJc0ksV0FBVyxDQUFDLEdBQUduUSxhQUFhLENBQUMsVUFBVSxFQUFFTDtBQUU3Q0Ysa0JBQWtCLEdBQUcwUSIsInNvdXJjZXMiOlsid2VicGFjazovL2JpZ2NvbW1lcmNlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXBsYXllci9saWIvcGxheWVycy9GaWxlUGxheWVyLmpzPzYwMzYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IGV4cG9ydHMuRmlsZVBsYXllciA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiLi4vdXRpbHNcIik7XG5cbnZhciBfc2luZ2xlUGxheWVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc2luZ2xlUGxheWVyXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgaWYgKHR5cGVvZiBXZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsOyB2YXIgY2FjaGUgPSBuZXcgV2Vha01hcCgpOyBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7IHJldHVybiBjYWNoZTsgfTsgcmV0dXJuIGNhY2hlOyB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gaWYgKG9iaiA9PT0gbnVsbCB8fCBfdHlwZW9mKG9iaikgIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG9iaiAhPT0gXCJmdW5jdGlvblwiKSB7IHJldHVybiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfSB2YXIgY2FjaGUgPSBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKTsgaWYgKGNhY2hlICYmIGNhY2hlLmhhcyhvYmopKSB7IHJldHVybiBjYWNoZS5nZXQob2JqKTsgfSB2YXIgbmV3T2JqID0ge307IHZhciBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IGhhc1Byb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDogbnVsbDsgaWYgKGRlc2MgJiYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSBuZXdPYmpbXCJkZWZhdWx0XCJdID0gb2JqOyBpZiAoY2FjaGUpIHsgY2FjaGUuc2V0KG9iaiwgbmV3T2JqKTsgfSByZXR1cm4gbmV3T2JqOyB9XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyByZXR1cm4gZnVuY3Rpb24gKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5mdW5jdGlvbiBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihvKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcInVuZGVmaW5lZFwiIHx8IG9bU3ltYm9sLml0ZXJhdG9yXSA9PSBudWxsKSB7IGlmIChBcnJheS5pc0FycmF5KG8pIHx8IChvID0gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8pKSkgeyB2YXIgaSA9IDA7IHZhciBGID0gZnVuY3Rpb24gRigpIHt9OyByZXR1cm4geyBzOiBGLCBuOiBmdW5jdGlvbiBuKCkgeyBpZiAoaSA+PSBvLmxlbmd0aCkgcmV0dXJuIHsgZG9uZTogdHJ1ZSB9OyByZXR1cm4geyBkb25lOiBmYWxzZSwgdmFsdWU6IG9baSsrXSB9OyB9LCBlOiBmdW5jdGlvbiBlKF9lKSB7IHRocm93IF9lOyB9LCBmOiBGIH07IH0gdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBpdGVyYXRlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpOyB9IHZhciBpdCwgbm9ybWFsQ29tcGxldGlvbiA9IHRydWUsIGRpZEVyciA9IGZhbHNlLCBlcnI7IHJldHVybiB7IHM6IGZ1bmN0aW9uIHMoKSB7IGl0ID0gb1tTeW1ib2wuaXRlcmF0b3JdKCk7IH0sIG46IGZ1bmN0aW9uIG4oKSB7IHZhciBzdGVwID0gaXQubmV4dCgpOyBub3JtYWxDb21wbGV0aW9uID0gc3RlcC5kb25lOyByZXR1cm4gc3RlcDsgfSwgZTogZnVuY3Rpb24gZShfZTIpIHsgZGlkRXJyID0gdHJ1ZTsgZXJyID0gX2UyOyB9LCBmOiBmdW5jdGlvbiBmKCkgeyB0cnkgeyBpZiAoIW5vcm1hbENvbXBsZXRpb24gJiYgaXRbXCJyZXR1cm5cIl0gIT0gbnVsbCkgaXRbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKGRpZEVycikgdGhyb3cgZXJyOyB9IH0gfTsgfVxuXG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7IGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7IGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG4pOyBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IH1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9XG5cbnZhciBJT1MgPSB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiAvaVBhZHxpUGhvbmV8aVBvZC8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSAmJiAhd2luZG93Lk1TU3RyZWFtO1xudmFyIEFVRElPX0VYVEVOU0lPTlMgPSAvXFwuKG00YXxtcDRhfG1wZ2F8bXAyfG1wMmF8bXAzfG0yYXxtM2F8d2F2fHdlYmF8YWFjfG9nYXxzcHgpKCR8XFw/KS9pO1xudmFyIFZJREVPX0VYVEVOU0lPTlMgPSAvXFwuKG1wNHxvZ1tndl18d2VibXxtb3Z8bTR2KSgkfFxcPykvaTtcbnZhciBITFNfRVhURU5TSU9OUyA9IC9cXC4obTN1OCkoJHxcXD8pL2k7XG52YXIgSExTX1NES19VUkwgPSAnaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L25wbS9obHMuanNAVkVSU0lPTi9kaXN0L2hscy5taW4uanMnO1xudmFyIEhMU19HTE9CQUwgPSAnSGxzJztcbnZhciBEQVNIX0VYVEVOU0lPTlMgPSAvXFwuKG1wZCkoJHxcXD8pL2k7XG52YXIgREFTSF9TREtfVVJMID0gJ2h0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2Rhc2hqcy9WRVJTSU9OL2Rhc2guYWxsLm1pbi5qcyc7XG52YXIgREFTSF9HTE9CQUwgPSAnZGFzaGpzJztcbnZhciBNQVRDSF9EUk9QQk9YX1VSTCA9IC93d3dcXC5kcm9wYm94XFwuY29tXFwvLisvO1xuXG5mdW5jdGlvbiBjYW5QbGF5KHVybCkge1xuICBpZiAodXJsIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICB2YXIgX2l0ZXJhdG9yID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIodXJsKSxcbiAgICAgICAgX3N0ZXA7XG5cbiAgICB0cnkge1xuICAgICAgZm9yIChfaXRlcmF0b3IucygpOyAhKF9zdGVwID0gX2l0ZXJhdG9yLm4oKSkuZG9uZTspIHtcbiAgICAgICAgdmFyIGl0ZW0gPSBfc3RlcC52YWx1ZTtcblxuICAgICAgICBpZiAodHlwZW9mIGl0ZW0gPT09ICdzdHJpbmcnICYmIGNhblBsYXkoaXRlbSkpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjYW5QbGF5KGl0ZW0uc3JjKSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBfaXRlcmF0b3IuZShlcnIpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBfaXRlcmF0b3IuZigpO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmICgoMCwgX3V0aWxzLmlzTWVkaWFTdHJlYW0pKHVybCkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBBVURJT19FWFRFTlNJT05TLnRlc3QodXJsKSB8fCBWSURFT19FWFRFTlNJT05TLnRlc3QodXJsKSB8fCBITFNfRVhURU5TSU9OUy50ZXN0KHVybCkgfHwgREFTSF9FWFRFTlNJT05TLnRlc3QodXJsKTtcbn1cblxuZnVuY3Rpb24gc3VwcG9ydHNXZWJLaXRQcmVzZW50YXRpb25Nb2RlKHZpZGVvKSB7XG4gIGlmICghdmlkZW8pIHZpZGVvID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndmlkZW8nKTsgLy8gQ2hlY2sgaWYgU2FmYXJpIHN1cHBvcnRzIFBpUCwgYW5kIGlzIG5vdCBvbiBtb2JpbGUgKG90aGVyIHRoYW4gaVBhZClcbiAgLy8gaVBob25lIHNhZmFyaSBhcHBlYXJzIHRvIFwic3VwcG9ydFwiIFBpUCB0aHJvdWdoIHRoZSBjaGVjaywgaG93ZXZlciBQaVAgZG9lcyBub3QgZnVuY3Rpb25cblxuICByZXR1cm4gdmlkZW8ud2Via2l0U3VwcG9ydHNQcmVzZW50YXRpb25Nb2RlICYmIHR5cGVvZiB2aWRlby53ZWJraXRTZXRQcmVzZW50YXRpb25Nb2RlID09PSAnZnVuY3Rpb24nICYmICEvaVBob25lfGlQb2QvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG59XG5cbmZ1bmN0aW9uIGNhbkVuYWJsZVBJUCh1cmwpIHtcbiAgcmV0dXJuIGNhblBsYXkodXJsKSAmJiAoISFkb2N1bWVudC5waWN0dXJlSW5QaWN0dXJlRW5hYmxlZCB8fCBzdXBwb3J0c1dlYktpdFByZXNlbnRhdGlvbk1vZGUoKSkgJiYgIUFVRElPX0VYVEVOU0lPTlMudGVzdCh1cmwpO1xufVxuXG52YXIgRmlsZVBsYXllciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoRmlsZVBsYXllciwgX0NvbXBvbmVudCk7XG5cbiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihGaWxlUGxheWVyKTtcblxuICBmdW5jdGlvbiBGaWxlUGxheWVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBGaWxlUGxheWVyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBfYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIF9hcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX3N1cGVyLmNhbGwuYXBwbHkoX3N1cGVyLCBbdGhpc10uY29uY2F0KF9hcmdzKSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwib25SZWFkeVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHM7XG5cbiAgICAgIHJldHVybiAoX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcykub25SZWFkeS5hcHBseShfdGhpcyRwcm9wcywgYXJndW1lbnRzKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJvblBsYXlcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzMjtcblxuICAgICAgcmV0dXJuIChfdGhpcyRwcm9wczIgPSBfdGhpcy5wcm9wcykub25QbGF5LmFwcGx5KF90aGlzJHByb3BzMiwgYXJndW1lbnRzKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJvbkJ1ZmZlclwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMzO1xuXG4gICAgICByZXR1cm4gKF90aGlzJHByb3BzMyA9IF90aGlzLnByb3BzKS5vbkJ1ZmZlci5hcHBseShfdGhpcyRwcm9wczMsIGFyZ3VtZW50cyk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwib25CdWZmZXJFbmRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzNDtcblxuICAgICAgcmV0dXJuIChfdGhpcyRwcm9wczQgPSBfdGhpcy5wcm9wcykub25CdWZmZXJFbmQuYXBwbHkoX3RoaXMkcHJvcHM0LCBhcmd1bWVudHMpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcIm9uUGF1c2VcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzNTtcblxuICAgICAgcmV0dXJuIChfdGhpcyRwcm9wczUgPSBfdGhpcy5wcm9wcykub25QYXVzZS5hcHBseShfdGhpcyRwcm9wczUsIGFyZ3VtZW50cyk7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwib25FbmRlZFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHM2O1xuXG4gICAgICByZXR1cm4gKF90aGlzJHByb3BzNiA9IF90aGlzLnByb3BzKS5vbkVuZGVkLmFwcGx5KF90aGlzJHByb3BzNiwgYXJndW1lbnRzKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJvbkVycm9yXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczc7XG5cbiAgICAgIHJldHVybiAoX3RoaXMkcHJvcHM3ID0gX3RoaXMucHJvcHMpLm9uRXJyb3IuYXBwbHkoX3RoaXMkcHJvcHM3LCBhcmd1bWVudHMpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcIm9uRW5hYmxlUElQXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczg7XG5cbiAgICAgIHJldHVybiAoX3RoaXMkcHJvcHM4ID0gX3RoaXMucHJvcHMpLm9uRW5hYmxlUElQLmFwcGx5KF90aGlzJHByb3BzOCwgYXJndW1lbnRzKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJvbkRpc2FibGVQSVBcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczkgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBvbkRpc2FibGVQSVAgPSBfdGhpcyRwcm9wczkub25EaXNhYmxlUElQLFxuICAgICAgICAgIHBsYXlpbmcgPSBfdGhpcyRwcm9wczkucGxheWluZztcbiAgICAgIG9uRGlzYWJsZVBJUChlKTtcblxuICAgICAgaWYgKHBsYXlpbmcpIHtcbiAgICAgICAgX3RoaXMucGxheSgpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcIm9uUHJlc2VudGF0aW9uTW9kZUNoYW5nZVwiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgaWYgKF90aGlzLnBsYXllciAmJiBzdXBwb3J0c1dlYktpdFByZXNlbnRhdGlvbk1vZGUoX3RoaXMucGxheWVyKSkge1xuICAgICAgICB2YXIgd2Via2l0UHJlc2VudGF0aW9uTW9kZSA9IF90aGlzLnBsYXllci53ZWJraXRQcmVzZW50YXRpb25Nb2RlO1xuXG4gICAgICAgIGlmICh3ZWJraXRQcmVzZW50YXRpb25Nb2RlID09PSAncGljdHVyZS1pbi1waWN0dXJlJykge1xuICAgICAgICAgIF90aGlzLm9uRW5hYmxlUElQKGUpO1xuICAgICAgICB9IGVsc2UgaWYgKHdlYmtpdFByZXNlbnRhdGlvbk1vZGUgPT09ICdpbmxpbmUnKSB7XG4gICAgICAgICAgX3RoaXMub25EaXNhYmxlUElQKGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwib25TZWVrXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICBfdGhpcy5wcm9wcy5vblNlZWsoZS50YXJnZXQuY3VycmVudFRpbWUpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcIm11dGVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMucGxheWVyLm11dGVkID0gdHJ1ZTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgXCJ1bm11dGVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMucGxheWVyLm11dGVkID0gZmFsc2U7XG4gICAgfSk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksIFwicmVuZGVyU291cmNlRWxlbWVudFwiLCBmdW5jdGlvbiAoc291cmNlLCBpbmRleCkge1xuICAgICAgaWYgKHR5cGVvZiBzb3VyY2UgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwic291cmNlXCIsIHtcbiAgICAgICAgICBrZXk6IGluZGV4LFxuICAgICAgICAgIHNyYzogc291cmNlXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL19yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcInNvdXJjZVwiLCBfZXh0ZW5kcyh7XG4gICAgICAgIGtleTogaW5kZXhcbiAgICAgIH0sIHNvdXJjZSkpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInJlbmRlclRyYWNrXCIsIGZ1bmN0aW9uICh0cmFjaywgaW5kZXgpIHtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwidHJhY2tcIiwgX2V4dGVuZHMoe1xuICAgICAgICBrZXk6IGluZGV4XG4gICAgICB9LCB0cmFjaykpO1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBcInJlZlwiLCBmdW5jdGlvbiAocGxheWVyKSB7XG4gICAgICBpZiAoX3RoaXMucGxheWVyKSB7XG4gICAgICAgIC8vIFN0b3JlIHByZXZpb3VzIHBsYXllciB0byBiZSB1c2VkIGJ5IHJlbW92ZUxpc3RlbmVycygpXG4gICAgICAgIF90aGlzLnByZXZQbGF5ZXIgPSBfdGhpcy5wbGF5ZXI7XG4gICAgICB9XG5cbiAgICAgIF90aGlzLnBsYXllciA9IHBsYXllcjtcbiAgICB9KTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhGaWxlUGxheWVyLCBbe1xuICAgIGtleTogXCJjb21wb25lbnREaWRNb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHRoaXMuYWRkTGlzdGVuZXJzKHRoaXMucGxheWVyKTtcblxuICAgICAgaWYgKElPUykge1xuICAgICAgICB0aGlzLnBsYXllci5sb2FkKCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBvbmVudERpZFVwZGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgICBpZiAodGhpcy5zaG91bGRVc2VBdWRpbyh0aGlzLnByb3BzKSAhPT0gdGhpcy5zaG91bGRVc2VBdWRpbyhwcmV2UHJvcHMpKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXJzKHRoaXMucHJldlBsYXllcik7XG4gICAgICAgIHRoaXMuYWRkTGlzdGVuZXJzKHRoaXMucGxheWVyKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29tcG9uZW50V2lsbFVubW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICB0aGlzLnJlbW92ZUxpc3RlbmVycyh0aGlzLnBsYXllcik7XG5cbiAgICAgIGlmICh0aGlzLmhscykge1xuICAgICAgICB0aGlzLmhscy5kZXN0cm95KCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImFkZExpc3RlbmVyc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRMaXN0ZW5lcnMocGxheWVyKSB7XG4gICAgICB2YXIgcGxheXNpbmxpbmUgPSB0aGlzLnByb3BzLnBsYXlzaW5saW5lO1xuICAgICAgcGxheWVyLmFkZEV2ZW50TGlzdGVuZXIoJ2NhbnBsYXknLCB0aGlzLm9uUmVhZHkpO1xuICAgICAgcGxheWVyLmFkZEV2ZW50TGlzdGVuZXIoJ3BsYXknLCB0aGlzLm9uUGxheSk7XG4gICAgICBwbGF5ZXIuYWRkRXZlbnRMaXN0ZW5lcignd2FpdGluZycsIHRoaXMub25CdWZmZXIpO1xuICAgICAgcGxheWVyLmFkZEV2ZW50TGlzdGVuZXIoJ3BsYXlpbmcnLCB0aGlzLm9uQnVmZmVyRW5kKTtcbiAgICAgIHBsYXllci5hZGRFdmVudExpc3RlbmVyKCdwYXVzZScsIHRoaXMub25QYXVzZSk7XG4gICAgICBwbGF5ZXIuYWRkRXZlbnRMaXN0ZW5lcignc2Vla2VkJywgdGhpcy5vblNlZWspO1xuICAgICAgcGxheWVyLmFkZEV2ZW50TGlzdGVuZXIoJ2VuZGVkJywgdGhpcy5vbkVuZGVkKTtcbiAgICAgIHBsYXllci5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIHRoaXMub25FcnJvcik7XG4gICAgICBwbGF5ZXIuYWRkRXZlbnRMaXN0ZW5lcignZW50ZXJwaWN0dXJlaW5waWN0dXJlJywgdGhpcy5vbkVuYWJsZVBJUCk7XG4gICAgICBwbGF5ZXIuYWRkRXZlbnRMaXN0ZW5lcignbGVhdmVwaWN0dXJlaW5waWN0dXJlJywgdGhpcy5vbkRpc2FibGVQSVApO1xuICAgICAgcGxheWVyLmFkZEV2ZW50TGlzdGVuZXIoJ3dlYmtpdHByZXNlbnRhdGlvbm1vZGVjaGFuZ2VkJywgdGhpcy5vblByZXNlbnRhdGlvbk1vZGVDaGFuZ2UpO1xuXG4gICAgICBpZiAocGxheXNpbmxpbmUpIHtcbiAgICAgICAgcGxheWVyLnNldEF0dHJpYnV0ZSgncGxheXNpbmxpbmUnLCAnJyk7XG4gICAgICAgIHBsYXllci5zZXRBdHRyaWJ1dGUoJ3dlYmtpdC1wbGF5c2lubGluZScsICcnKTtcbiAgICAgICAgcGxheWVyLnNldEF0dHJpYnV0ZSgneDUtcGxheXNpbmxpbmUnLCAnJyk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlbW92ZUxpc3RlbmVyc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcnMocGxheWVyKSB7XG4gICAgICBwbGF5ZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2FucGxheScsIHRoaXMub25SZWFkeSk7XG4gICAgICBwbGF5ZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcigncGxheScsIHRoaXMub25QbGF5KTtcbiAgICAgIHBsYXllci5yZW1vdmVFdmVudExpc3RlbmVyKCd3YWl0aW5nJywgdGhpcy5vbkJ1ZmZlcik7XG4gICAgICBwbGF5ZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcigncGxheWluZycsIHRoaXMub25CdWZmZXJFbmQpO1xuICAgICAgcGxheWVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BhdXNlJywgdGhpcy5vblBhdXNlKTtcbiAgICAgIHBsYXllci5yZW1vdmVFdmVudExpc3RlbmVyKCdzZWVrZWQnLCB0aGlzLm9uU2Vlayk7XG4gICAgICBwbGF5ZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcignZW5kZWQnLCB0aGlzLm9uRW5kZWQpO1xuICAgICAgcGxheWVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgdGhpcy5vbkVycm9yKTtcbiAgICAgIHBsYXllci5yZW1vdmVFdmVudExpc3RlbmVyKCdlbnRlcnBpY3R1cmVpbnBpY3R1cmUnLCB0aGlzLm9uRW5hYmxlUElQKTtcbiAgICAgIHBsYXllci5yZW1vdmVFdmVudExpc3RlbmVyKCdsZWF2ZXBpY3R1cmVpbnBpY3R1cmUnLCB0aGlzLm9uRGlzYWJsZVBJUCk7XG4gICAgICBwbGF5ZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcignd2Via2l0cHJlc2VudGF0aW9ubW9kZWNoYW5nZWQnLCB0aGlzLm9uUHJlc2VudGF0aW9uTW9kZUNoYW5nZSk7XG4gICAgfSAvLyBQcm94eSBtZXRob2RzIHRvIHByZXZlbnQgbGlzdGVuZXIgbGVha3NcblxuICB9LCB7XG4gICAga2V5OiBcInNob3VsZFVzZUF1ZGlvXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNob3VsZFVzZUF1ZGlvKHByb3BzKSB7XG4gICAgICBpZiAocHJvcHMuY29uZmlnLmZpbGUuZm9yY2VWaWRlbykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmIChwcm9wcy5jb25maWcuZmlsZS5hdHRyaWJ1dGVzLnBvc3Rlcikge1xuICAgICAgICByZXR1cm4gZmFsc2U7IC8vIFVzZSA8dmlkZW8+IHNvIHRoYXQgcG9zdGVyIGlzIHNob3duXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBBVURJT19FWFRFTlNJT05TLnRlc3QocHJvcHMudXJsKSB8fCBwcm9wcy5jb25maWcuZmlsZS5mb3JjZUF1ZGlvO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzaG91bGRVc2VITFNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2hvdWxkVXNlSExTKHVybCkge1xuICAgICAgcmV0dXJuIEhMU19FWFRFTlNJT05TLnRlc3QodXJsKSAmJiAhSU9TIHx8IHRoaXMucHJvcHMuY29uZmlnLmZpbGUuZm9yY2VITFM7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNob3VsZFVzZURBU0hcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2hvdWxkVXNlREFTSCh1cmwpIHtcbiAgICAgIHJldHVybiBEQVNIX0VYVEVOU0lPTlMudGVzdCh1cmwpIHx8IHRoaXMucHJvcHMuY29uZmlnLmZpbGUuZm9yY2VEQVNIO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJsb2FkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxvYWQodXJsKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIF90aGlzJHByb3BzJGNvbmZpZyRmaSA9IHRoaXMucHJvcHMuY29uZmlnLmZpbGUsXG4gICAgICAgICAgaGxzVmVyc2lvbiA9IF90aGlzJHByb3BzJGNvbmZpZyRmaS5obHNWZXJzaW9uLFxuICAgICAgICAgIGRhc2hWZXJzaW9uID0gX3RoaXMkcHJvcHMkY29uZmlnJGZpLmRhc2hWZXJzaW9uO1xuXG4gICAgICBpZiAodGhpcy5zaG91bGRVc2VITFModXJsKSkge1xuICAgICAgICAoMCwgX3V0aWxzLmdldFNESykoSExTX1NES19VUkwucmVwbGFjZSgnVkVSU0lPTicsIGhsc1ZlcnNpb24pLCBITFNfR0xPQkFMKS50aGVuKGZ1bmN0aW9uIChIbHMpIHtcbiAgICAgICAgICBfdGhpczIuaGxzID0gbmV3IEhscyhfdGhpczIucHJvcHMuY29uZmlnLmZpbGUuaGxzT3B0aW9ucyk7XG5cbiAgICAgICAgICBfdGhpczIuaGxzLm9uKEhscy5FdmVudHMuRVJST1IsIGZ1bmN0aW9uIChlLCBkYXRhKSB7XG4gICAgICAgICAgICBfdGhpczIucHJvcHMub25FcnJvcihlLCBkYXRhLCBfdGhpczIuaGxzLCBIbHMpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgX3RoaXMyLmhscy5sb2FkU291cmNlKHVybCk7XG5cbiAgICAgICAgICBfdGhpczIuaGxzLmF0dGFjaE1lZGlhKF90aGlzMi5wbGF5ZXIpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuc2hvdWxkVXNlREFTSCh1cmwpKSB7XG4gICAgICAgICgwLCBfdXRpbHMuZ2V0U0RLKShEQVNIX1NES19VUkwucmVwbGFjZSgnVkVSU0lPTicsIGRhc2hWZXJzaW9uKSwgREFTSF9HTE9CQUwpLnRoZW4oZnVuY3Rpb24gKGRhc2hqcykge1xuICAgICAgICAgIF90aGlzMi5kYXNoID0gZGFzaGpzLk1lZGlhUGxheWVyKCkuY3JlYXRlKCk7XG5cbiAgICAgICAgICBfdGhpczIuZGFzaC5pbml0aWFsaXplKF90aGlzMi5wbGF5ZXIsIHVybCwgX3RoaXMyLnByb3BzLnBsYXlpbmcpO1xuXG4gICAgICAgICAgX3RoaXMyLmRhc2gub24oJ2Vycm9yJywgX3RoaXMyLnByb3BzLm9uRXJyb3IpO1xuXG4gICAgICAgICAgX3RoaXMyLmRhc2guZ2V0RGVidWcoKS5zZXRMb2dUb0Jyb3dzZXJDb25zb2xlKGZhbHNlKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh1cmwgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAvLyBXaGVuIHNldHRpbmcgbmV3IHVybHMgKDxzb3VyY2U+KSBvbiBhbiBhbHJlYWR5IGxvYWRlZCB2aWRlbyxcbiAgICAgICAgLy8gSFRNTE1lZGlhRWxlbWVudC5sb2FkKCkgaXMgbmVlZGVkIHRvIHJlc2V0IHRoZSBtZWRpYSBlbGVtZW50XG4gICAgICAgIC8vIGFuZCByZXN0YXJ0IHRoZSBtZWRpYSByZXNvdXJjZS4gSnVzdCByZXBsYWNpbmcgY2hpbGRyZW4gc291cmNlXG4gICAgICAgIC8vIGRvbSBub2RlcyBpcyBub3QgZW5vdWdoXG4gICAgICAgIHRoaXMucGxheWVyLmxvYWQoKTtcbiAgICAgIH0gZWxzZSBpZiAoKDAsIF91dGlscy5pc01lZGlhU3RyZWFtKSh1cmwpKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhpcy5wbGF5ZXIuc3JjT2JqZWN0ID0gdXJsO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgdGhpcy5wbGF5ZXIuc3JjID0gd2luZG93LlVSTC5jcmVhdGVPYmplY3RVUkwodXJsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJwbGF5XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBsYXkoKSB7XG4gICAgICB2YXIgcHJvbWlzZSA9IHRoaXMucGxheWVyLnBsYXkoKTtcblxuICAgICAgaWYgKHByb21pc2UpIHtcbiAgICAgICAgcHJvbWlzZVtcImNhdGNoXCJdKHRoaXMucHJvcHMub25FcnJvcik7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInBhdXNlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBhdXNlKCkge1xuICAgICAgdGhpcy5wbGF5ZXIucGF1c2UoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic3RvcFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdG9wKCkge1xuICAgICAgdGhpcy5wbGF5ZXIucmVtb3ZlQXR0cmlidXRlKCdzcmMnKTtcblxuICAgICAgaWYgKHRoaXMuZGFzaCkge1xuICAgICAgICB0aGlzLmRhc2gucmVzZXQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2Vla1RvXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNlZWtUbyhzZWNvbmRzKSB7XG4gICAgICB0aGlzLnBsYXllci5jdXJyZW50VGltZSA9IHNlY29uZHM7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNldFZvbHVtZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRWb2x1bWUoZnJhY3Rpb24pIHtcbiAgICAgIHRoaXMucGxheWVyLnZvbHVtZSA9IGZyYWN0aW9uO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJlbmFibGVQSVBcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZW5hYmxlUElQKCkge1xuICAgICAgaWYgKHRoaXMucGxheWVyLnJlcXVlc3RQaWN0dXJlSW5QaWN0dXJlICYmIGRvY3VtZW50LnBpY3R1cmVJblBpY3R1cmVFbGVtZW50ICE9PSB0aGlzLnBsYXllcikge1xuICAgICAgICB0aGlzLnBsYXllci5yZXF1ZXN0UGljdHVyZUluUGljdHVyZSgpO1xuICAgICAgfSBlbHNlIGlmIChzdXBwb3J0c1dlYktpdFByZXNlbnRhdGlvbk1vZGUodGhpcy5wbGF5ZXIpICYmIHRoaXMucGxheWVyLndlYmtpdFByZXNlbnRhdGlvbk1vZGUgIT09ICdwaWN0dXJlLWluLXBpY3R1cmUnKSB7XG4gICAgICAgIHRoaXMucGxheWVyLndlYmtpdFNldFByZXNlbnRhdGlvbk1vZGUoJ3BpY3R1cmUtaW4tcGljdHVyZScpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJkaXNhYmxlUElQXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRpc2FibGVQSVAoKSB7XG4gICAgICBpZiAoZG9jdW1lbnQuZXhpdFBpY3R1cmVJblBpY3R1cmUgJiYgZG9jdW1lbnQucGljdHVyZUluUGljdHVyZUVsZW1lbnQgPT09IHRoaXMucGxheWVyKSB7XG4gICAgICAgIGRvY3VtZW50LmV4aXRQaWN0dXJlSW5QaWN0dXJlKCk7XG4gICAgICB9IGVsc2UgaWYgKHN1cHBvcnRzV2ViS2l0UHJlc2VudGF0aW9uTW9kZSh0aGlzLnBsYXllcikgJiYgdGhpcy5wbGF5ZXIud2Via2l0UHJlc2VudGF0aW9uTW9kZSAhPT0gJ2lubGluZScpIHtcbiAgICAgICAgdGhpcy5wbGF5ZXIud2Via2l0U2V0UHJlc2VudGF0aW9uTW9kZSgnaW5saW5lJyk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNldFBsYXliYWNrUmF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRQbGF5YmFja1JhdGUocmF0ZSkge1xuICAgICAgdGhpcy5wbGF5ZXIucGxheWJhY2tSYXRlID0gcmF0ZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0RHVyYXRpb25cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RHVyYXRpb24oKSB7XG4gICAgICBpZiAoIXRoaXMucGxheWVyKSByZXR1cm4gbnVsbDtcbiAgICAgIHZhciBfdGhpcyRwbGF5ZXIgPSB0aGlzLnBsYXllcixcbiAgICAgICAgICBkdXJhdGlvbiA9IF90aGlzJHBsYXllci5kdXJhdGlvbixcbiAgICAgICAgICBzZWVrYWJsZSA9IF90aGlzJHBsYXllci5zZWVrYWJsZTsgLy8gb24gaU9TLCBsaXZlIHN0cmVhbXMgcmV0dXJuIEluZmluaXR5IGZvciB0aGUgZHVyYXRpb25cbiAgICAgIC8vIHNvIGluc3RlYWQgd2UgdXNlIHRoZSBlbmQgb2YgdGhlIHNlZWthYmxlIHRpbWVyYW5nZVxuXG4gICAgICBpZiAoZHVyYXRpb24gPT09IEluZmluaXR5ICYmIHNlZWthYmxlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIHNlZWthYmxlLmVuZChzZWVrYWJsZS5sZW5ndGggLSAxKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGR1cmF0aW9uO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRDdXJyZW50VGltZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDdXJyZW50VGltZSgpIHtcbiAgICAgIGlmICghdGhpcy5wbGF5ZXIpIHJldHVybiBudWxsO1xuICAgICAgcmV0dXJuIHRoaXMucGxheWVyLmN1cnJlbnRUaW1lO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRTZWNvbmRzTG9hZGVkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFNlY29uZHNMb2FkZWQoKSB7XG4gICAgICBpZiAoIXRoaXMucGxheWVyKSByZXR1cm4gbnVsbDtcbiAgICAgIHZhciBidWZmZXJlZCA9IHRoaXMucGxheWVyLmJ1ZmZlcmVkO1xuXG4gICAgICBpZiAoYnVmZmVyZWQubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuXG4gICAgICB2YXIgZW5kID0gYnVmZmVyZWQuZW5kKGJ1ZmZlcmVkLmxlbmd0aCAtIDEpO1xuICAgICAgdmFyIGR1cmF0aW9uID0gdGhpcy5nZXREdXJhdGlvbigpO1xuXG4gICAgICBpZiAoZW5kID4gZHVyYXRpb24pIHtcbiAgICAgICAgcmV0dXJuIGR1cmF0aW9uO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZW5kO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRTb3VyY2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U291cmNlKHVybCkge1xuICAgICAgdmFyIHVzZUhMUyA9IHRoaXMuc2hvdWxkVXNlSExTKHVybCk7XG4gICAgICB2YXIgdXNlREFTSCA9IHRoaXMuc2hvdWxkVXNlREFTSCh1cmwpO1xuXG4gICAgICBpZiAodXJsIGluc3RhbmNlb2YgQXJyYXkgfHwgKDAsIF91dGlscy5pc01lZGlhU3RyZWFtKSh1cmwpIHx8IHVzZUhMUyB8fCB1c2VEQVNIKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChNQVRDSF9EUk9QQk9YX1VSTC50ZXN0KHVybCkpIHtcbiAgICAgICAgcmV0dXJuIHVybC5yZXBsYWNlKCd3d3cuZHJvcGJveC5jb20nLCAnZGwuZHJvcGJveHVzZXJjb250ZW50LmNvbScpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdXJsO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzMTAgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIHVybCA9IF90aGlzJHByb3BzMTAudXJsLFxuICAgICAgICAgIHBsYXlpbmcgPSBfdGhpcyRwcm9wczEwLnBsYXlpbmcsXG4gICAgICAgICAgbG9vcCA9IF90aGlzJHByb3BzMTAubG9vcCxcbiAgICAgICAgICBjb250cm9scyA9IF90aGlzJHByb3BzMTAuY29udHJvbHMsXG4gICAgICAgICAgbXV0ZWQgPSBfdGhpcyRwcm9wczEwLm11dGVkLFxuICAgICAgICAgIGNvbmZpZyA9IF90aGlzJHByb3BzMTAuY29uZmlnLFxuICAgICAgICAgIHdpZHRoID0gX3RoaXMkcHJvcHMxMC53aWR0aCxcbiAgICAgICAgICBoZWlnaHQgPSBfdGhpcyRwcm9wczEwLmhlaWdodDtcbiAgICAgIHZhciB1c2VBdWRpbyA9IHRoaXMuc2hvdWxkVXNlQXVkaW8odGhpcy5wcm9wcyk7XG4gICAgICB2YXIgRWxlbWVudCA9IHVzZUF1ZGlvID8gJ2F1ZGlvJyA6ICd2aWRlbyc7XG4gICAgICB2YXIgc3R5bGUgPSB7XG4gICAgICAgIHdpZHRoOiB3aWR0aCA9PT0gJ2F1dG8nID8gd2lkdGggOiAnMTAwJScsXG4gICAgICAgIGhlaWdodDogaGVpZ2h0ID09PSAnYXV0bycgPyBoZWlnaHQgOiAnMTAwJSdcbiAgICAgIH07XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL19yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChFbGVtZW50LCBfZXh0ZW5kcyh7XG4gICAgICAgIHJlZjogdGhpcy5yZWYsXG4gICAgICAgIHNyYzogdGhpcy5nZXRTb3VyY2UodXJsKSxcbiAgICAgICAgc3R5bGU6IHN0eWxlLFxuICAgICAgICBwcmVsb2FkOiBcImF1dG9cIixcbiAgICAgICAgYXV0b1BsYXk6IHBsYXlpbmcgfHwgdW5kZWZpbmVkLFxuICAgICAgICBjb250cm9sczogY29udHJvbHMsXG4gICAgICAgIG11dGVkOiBtdXRlZCxcbiAgICAgICAgbG9vcDogbG9vcFxuICAgICAgfSwgY29uZmlnLmZpbGUuYXR0cmlidXRlcyksIHVybCBpbnN0YW5jZW9mIEFycmF5ICYmIHVybC5tYXAodGhpcy5yZW5kZXJTb3VyY2VFbGVtZW50KSwgY29uZmlnLmZpbGUudHJhY2tzLm1hcCh0aGlzLnJlbmRlclRyYWNrKSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEZpbGVQbGF5ZXI7XG59KF9yZWFjdC5Db21wb25lbnQpO1xuXG5leHBvcnRzLkZpbGVQbGF5ZXIgPSBGaWxlUGxheWVyO1xuXG5fZGVmaW5lUHJvcGVydHkoRmlsZVBsYXllciwgXCJkaXNwbGF5TmFtZVwiLCAnRmlsZVBsYXllcicpO1xuXG5fZGVmaW5lUHJvcGVydHkoRmlsZVBsYXllciwgXCJjYW5QbGF5XCIsIGNhblBsYXkpO1xuXG5fZGVmaW5lUHJvcGVydHkoRmlsZVBsYXllciwgXCJjYW5FbmFibGVQSVBcIiwgY2FuRW5hYmxlUElQKTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9zaW5nbGVQbGF5ZXJbXCJkZWZhdWx0XCJdKShGaWxlUGxheWVyKTtcblxuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDsiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJGaWxlUGxheWVyIiwiX3JlYWN0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJyZXF1aXJlIiwiX3V0aWxzIiwiX3NpbmdsZVBsYXllciIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJvYmoiLCJfX2VzTW9kdWxlIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwiV2Vha01hcCIsImNhY2hlIiwiX3R5cGVvZiIsImhhcyIsImdldCIsIm5ld09iaiIsImhhc1Byb3BlcnR5RGVzY3JpcHRvciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJTeW1ib2wiLCJpdGVyYXRvciIsImNvbnN0cnVjdG9yIiwiX2V4dGVuZHMiLCJhc3NpZ24iLCJ0YXJnZXQiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwiYXBwbHkiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiX2RlZmluZVByb3BlcnRpZXMiLCJwcm9wcyIsImRlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJfY3JlYXRlQ2xhc3MiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJfY3JlYXRlU3VwZXIiLCJEZXJpdmVkIiwiU3VwZXIiLCJfZ2V0UHJvdG90eXBlT2YiLCJyZXN1bHQiLCJfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiTmV3VGFyZ2V0IiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwic2VsZiIsIl9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJSZWZlcmVuY2VFcnJvciIsInNoYW0iLCJQcm94eSIsIkRhdGUiLCJ0b1N0cmluZyIsImUiLCJvIiwic2V0UHJvdG90eXBlT2YiLCJnZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIl9pbmhlcml0cyIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsImNyZWF0ZSIsIl9zZXRQcm90b3R5cGVPZiIsInAiLCJfZGVmaW5lUHJvcGVydHkiLCJfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlciIsIkFycmF5IiwiaXNBcnJheSIsIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsIkYiLCJzIiwibiIsImRvbmUiLCJfZSIsImYiLCJpdCIsIm5vcm1hbENvbXBsZXRpb24iLCJkaWRFcnIiLCJlcnIiLCJzdGVwIiwibmV4dCIsIl9lMiIsIm1pbkxlbiIsIl9hcnJheUxpa2VUb0FycmF5Iiwic2xpY2UiLCJuYW1lIiwiZnJvbSIsInRlc3QiLCJhcnIiLCJsZW4iLCJhcnIyIiwiSU9TIiwibmF2aWdhdG9yIiwidXNlckFnZW50Iiwid2luZG93IiwiTVNTdHJlYW0iLCJBVURJT19FWFRFTlNJT05TIiwiVklERU9fRVhURU5TSU9OUyIsIkhMU19FWFRFTlNJT05TIiwiSExTX1NES19VUkwiLCJITFNfR0xPQkFMIiwiREFTSF9FWFRFTlNJT05TIiwiREFTSF9TREtfVVJMIiwiREFTSF9HTE9CQUwiLCJNQVRDSF9EUk9QQk9YX1VSTCIsImNhblBsYXkiLCJ1cmwiLCJfaXRlcmF0b3IiLCJfc3RlcCIsIml0ZW0iLCJzcmMiLCJpc01lZGlhU3RyZWFtIiwic3VwcG9ydHNXZWJLaXRQcmVzZW50YXRpb25Nb2RlIiwidmlkZW8iLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJ3ZWJraXRTdXBwb3J0c1ByZXNlbnRhdGlvbk1vZGUiLCJ3ZWJraXRTZXRQcmVzZW50YXRpb25Nb2RlIiwiY2FuRW5hYmxlUElQIiwicGljdHVyZUluUGljdHVyZUVuYWJsZWQiLCJfQ29tcG9uZW50IiwiX3N1cGVyIiwiX3RoaXMiLCJfbGVuIiwiX2FyZ3MiLCJfa2V5IiwiY29uY2F0IiwiX3RoaXMkcHJvcHMiLCJvblJlYWR5IiwiX3RoaXMkcHJvcHMyIiwib25QbGF5IiwiX3RoaXMkcHJvcHMzIiwib25CdWZmZXIiLCJfdGhpcyRwcm9wczQiLCJvbkJ1ZmZlckVuZCIsIl90aGlzJHByb3BzNSIsIm9uUGF1c2UiLCJfdGhpcyRwcm9wczYiLCJvbkVuZGVkIiwiX3RoaXMkcHJvcHM3Iiwib25FcnJvciIsIl90aGlzJHByb3BzOCIsIm9uRW5hYmxlUElQIiwiX3RoaXMkcHJvcHM5Iiwib25EaXNhYmxlUElQIiwicGxheWluZyIsInBsYXkiLCJwbGF5ZXIiLCJ3ZWJraXRQcmVzZW50YXRpb25Nb2RlIiwib25TZWVrIiwiY3VycmVudFRpbWUiLCJtdXRlZCIsImluZGV4IiwidHJhY2siLCJwcmV2UGxheWVyIiwiY29tcG9uZW50RGlkTW91bnQiLCJhZGRMaXN0ZW5lcnMiLCJsb2FkIiwiY29tcG9uZW50RGlkVXBkYXRlIiwicHJldlByb3BzIiwic2hvdWxkVXNlQXVkaW8iLCJyZW1vdmVMaXN0ZW5lcnMiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsImhscyIsImRlc3Ryb3kiLCJwbGF5c2lubGluZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJvblByZXNlbnRhdGlvbk1vZGVDaGFuZ2UiLCJzZXRBdHRyaWJ1dGUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiY29uZmlnIiwiZmlsZSIsImZvcmNlVmlkZW8iLCJhdHRyaWJ1dGVzIiwicG9zdGVyIiwiZm9yY2VBdWRpbyIsInNob3VsZFVzZUhMUyIsImZvcmNlSExTIiwic2hvdWxkVXNlREFTSCIsImZvcmNlREFTSCIsIl90aGlzMiIsIl90aGlzJHByb3BzJGNvbmZpZyRmaSIsImhsc1ZlcnNpb24iLCJkYXNoVmVyc2lvbiIsImdldFNESyIsInJlcGxhY2UiLCJ0aGVuIiwiSGxzIiwiaGxzT3B0aW9ucyIsIm9uIiwiRXZlbnRzIiwiRVJST1IiLCJkYXRhIiwibG9hZFNvdXJjZSIsImF0dGFjaE1lZGlhIiwiZGFzaGpzIiwiZGFzaCIsIk1lZGlhUGxheWVyIiwiaW5pdGlhbGl6ZSIsImdldERlYnVnIiwic2V0TG9nVG9Ccm93c2VyQ29uc29sZSIsInNyY09iamVjdCIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsInByb21pc2UiLCJwYXVzZSIsInN0b3AiLCJyZW1vdmVBdHRyaWJ1dGUiLCJyZXNldCIsInNlZWtUbyIsInNlY29uZHMiLCJzZXRWb2x1bWUiLCJmcmFjdGlvbiIsInZvbHVtZSIsImVuYWJsZVBJUCIsInJlcXVlc3RQaWN0dXJlSW5QaWN0dXJlIiwicGljdHVyZUluUGljdHVyZUVsZW1lbnQiLCJkaXNhYmxlUElQIiwiZXhpdFBpY3R1cmVJblBpY3R1cmUiLCJzZXRQbGF5YmFja1JhdGUiLCJyYXRlIiwicGxheWJhY2tSYXRlIiwiZ2V0RHVyYXRpb24iLCJfdGhpcyRwbGF5ZXIiLCJkdXJhdGlvbiIsInNlZWthYmxlIiwiSW5maW5pdHkiLCJlbmQiLCJnZXRDdXJyZW50VGltZSIsImdldFNlY29uZHNMb2FkZWQiLCJidWZmZXJlZCIsImdldFNvdXJjZSIsInVzZUhMUyIsInVzZURBU0giLCJ1bmRlZmluZWQiLCJyZW5kZXIiLCJfdGhpcyRwcm9wczEwIiwibG9vcCIsImNvbnRyb2xzIiwid2lkdGgiLCJoZWlnaHQiLCJ1c2VBdWRpbyIsIkVsZW1lbnQiLCJzdHlsZSIsInJlZiIsInByZWxvYWQiLCJhdXRvUGxheSIsIm1hcCIsInJlbmRlclNvdXJjZUVsZW1lbnQiLCJ0cmFja3MiLCJyZW5kZXJUcmFjayIsIkNvbXBvbmVudCIsIl9kZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/players/FilePlayer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/players/Mixcloud.js":
/*!***********************************************************!*\
  !*** ./node_modules/react-player/lib/players/Mixcloud.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = exports.Mixcloud = void 0;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nvar _singlePlayer = _interopRequireDefault(__webpack_require__(/*! ../singlePlayer */ \"(ssr)/./node_modules/react-player/lib/singlePlayer.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        \"default\": obj\n    };\n}\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function _getRequireWildcardCache() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n        return {\n            \"default\": obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj[\"default\"] = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function _typeof(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        });\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys(Object(source), true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _createSuper(Derived) {\n    return function() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (_isNativeReflectConstruct()) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    }\n    return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar SDK_URL = \"https://widget.mixcloud.com/media/js/widgetApi.js\";\nvar SDK_GLOBAL = \"Mixcloud\";\nvar MATCH_URL = /mixcloud\\.com\\/([^/]+\\/[^/]+)/;\nvar Mixcloud = /*#__PURE__*/ function(_Component) {\n    _inherits(Mixcloud, _Component);\n    var _super = _createSuper(Mixcloud);\n    function Mixcloud() {\n        var _this;\n        _classCallCheck(this, Mixcloud);\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = _super.call.apply(_super, [\n            this\n        ].concat(args));\n        _defineProperty(_assertThisInitialized(_this), \"callPlayer\", _utils.callPlayer);\n        _defineProperty(_assertThisInitialized(_this), \"duration\", null);\n        _defineProperty(_assertThisInitialized(_this), \"currentTime\", null);\n        _defineProperty(_assertThisInitialized(_this), \"secondsLoaded\", null);\n        _defineProperty(_assertThisInitialized(_this), \"mute\", function() {});\n        _defineProperty(_assertThisInitialized(_this), \"unmute\", function() {});\n        _defineProperty(_assertThisInitialized(_this), \"ref\", function(iframe) {\n            _this.iframe = iframe;\n        });\n        return _this;\n    }\n    _createClass(Mixcloud, [\n        {\n            key: \"load\",\n            value: function load(url) {\n                var _this2 = this;\n                (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL).then(function(Mixcloud) {\n                    _this2.player = Mixcloud.PlayerWidget(_this2.iframe);\n                    _this2.player.ready.then(function() {\n                        _this2.player.events.play.on(_this2.props.onPlay);\n                        _this2.player.events.pause.on(_this2.props.onPause);\n                        _this2.player.events.ended.on(_this2.props.onEnded);\n                        _this2.player.events.error.on(_this2.props.error);\n                        _this2.player.events.progress.on(function(seconds, duration) {\n                            _this2.currentTime = seconds;\n                            _this2.duration = duration;\n                        });\n                        _this2.props.onReady();\n                    });\n                }, this.props.onError);\n            }\n        },\n        {\n            key: \"play\",\n            value: function play() {\n                this.callPlayer(\"play\");\n            }\n        },\n        {\n            key: \"pause\",\n            value: function pause() {\n                this.callPlayer(\"pause\");\n            }\n        },\n        {\n            key: \"stop\",\n            value: function stop() {}\n        },\n        {\n            key: \"seekTo\",\n            value: function seekTo(seconds) {\n                this.callPlayer(\"seek\", seconds);\n            }\n        },\n        {\n            key: \"setVolume\",\n            value: function setVolume(fraction) {}\n        },\n        {\n            key: \"getDuration\",\n            value: function getDuration() {\n                return this.duration;\n            }\n        },\n        {\n            key: \"getCurrentTime\",\n            value: function getCurrentTime() {\n                return this.currentTime;\n            }\n        },\n        {\n            key: \"getSecondsLoaded\",\n            value: function getSecondsLoaded() {\n                return null;\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var _this$props = this.props, url = _this$props.url, config = _this$props.config;\n                var id = url.match(MATCH_URL)[1];\n                var style = {\n                    width: \"100%\",\n                    height: \"100%\"\n                };\n                var query = (0, _utils.queryString)(_objectSpread({}, config.mixcloud.options, {\n                    feed: \"/\".concat(id, \"/\")\n                })); // We have to give the iframe a key here to prevent a\n                // weird dialog appearing when loading a new track\n                return /*#__PURE__*/ _react[\"default\"].createElement(\"iframe\", {\n                    key: id,\n                    ref: this.ref,\n                    style: style,\n                    src: \"https://www.mixcloud.com/widget/iframe/?\".concat(query),\n                    frameBorder: \"0\"\n                });\n            }\n        }\n    ]);\n    return Mixcloud;\n}(_react.Component);\nexports.Mixcloud = Mixcloud;\n_defineProperty(Mixcloud, \"displayName\", \"Mixcloud\");\n_defineProperty(Mixcloud, \"canPlay\", function(url) {\n    return MATCH_URL.test(url);\n});\n_defineProperty(Mixcloud, \"loopOnEnded\", true);\nvar _default = (0, _singlePlayer[\"default\"])(Mixcloud);\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/players/Mixcloud.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/players/SoundCloud.js":
/*!*************************************************************!*\
  !*** ./node_modules/react-player/lib/players/SoundCloud.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = exports.SoundCloud = void 0;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nvar _singlePlayer = _interopRequireDefault(__webpack_require__(/*! ../singlePlayer */ \"(ssr)/./node_modules/react-player/lib/singlePlayer.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        \"default\": obj\n    };\n}\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function _getRequireWildcardCache() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n        return {\n            \"default\": obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj[\"default\"] = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function _typeof(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        });\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys(Object(source), true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _createSuper(Derived) {\n    return function() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (_isNativeReflectConstruct()) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    }\n    return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar SDK_URL = \"https://w.soundcloud.com/player/api.js\";\nvar SDK_GLOBAL = \"SC\";\nvar MATCH_URL = /(?:soundcloud\\.com|snd\\.sc)\\/[^.]+$/;\nvar SoundCloud = /*#__PURE__*/ function(_Component) {\n    _inherits(SoundCloud, _Component);\n    var _super = _createSuper(SoundCloud);\n    function SoundCloud() {\n        var _this;\n        _classCallCheck(this, SoundCloud);\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = _super.call.apply(_super, [\n            this\n        ].concat(args));\n        _defineProperty(_assertThisInitialized(_this), \"callPlayer\", _utils.callPlayer);\n        _defineProperty(_assertThisInitialized(_this), \"duration\", null);\n        _defineProperty(_assertThisInitialized(_this), \"currentTime\", null);\n        _defineProperty(_assertThisInitialized(_this), \"fractionLoaded\", null);\n        _defineProperty(_assertThisInitialized(_this), \"mute\", function() {\n            _this.setVolume(0);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"unmute\", function() {\n            if (_this.props.volume !== null) {\n                _this.setVolume(_this.props.volume);\n            }\n        });\n        _defineProperty(_assertThisInitialized(_this), \"ref\", function(iframe) {\n            _this.iframe = iframe;\n        });\n        return _this;\n    }\n    _createClass(SoundCloud, [\n        {\n            key: \"load\",\n            value: function load(url, isReady) {\n                var _this2 = this;\n                (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL).then(function(SC) {\n                    if (!_this2.iframe) return;\n                    var _SC$Widget$Events = SC.Widget.Events, PLAY = _SC$Widget$Events.PLAY, PLAY_PROGRESS = _SC$Widget$Events.PLAY_PROGRESS, PAUSE = _SC$Widget$Events.PAUSE, FINISH = _SC$Widget$Events.FINISH, ERROR = _SC$Widget$Events.ERROR;\n                    if (!isReady) {\n                        _this2.player = SC.Widget(_this2.iframe);\n                        _this2.player.bind(PLAY, _this2.props.onPlay);\n                        _this2.player.bind(PAUSE, _this2.props.onPause);\n                        _this2.player.bind(PLAY_PROGRESS, function(e) {\n                            _this2.currentTime = e.currentPosition / 1000;\n                            _this2.fractionLoaded = e.loadedProgress;\n                        });\n                        _this2.player.bind(FINISH, function() {\n                            return _this2.props.onEnded();\n                        });\n                        _this2.player.bind(ERROR, function(e) {\n                            return _this2.props.onError(e);\n                        });\n                    }\n                    _this2.player.load(url, _objectSpread({}, _this2.props.config.soundcloud.options, {\n                        callback: function callback() {\n                            _this2.player.getDuration(function(duration) {\n                                _this2.duration = duration / 1000;\n                                _this2.props.onReady();\n                            });\n                        }\n                    }));\n                });\n            }\n        },\n        {\n            key: \"play\",\n            value: function play() {\n                this.callPlayer(\"play\");\n            }\n        },\n        {\n            key: \"pause\",\n            value: function pause() {\n                this.callPlayer(\"pause\");\n            }\n        },\n        {\n            key: \"stop\",\n            value: function stop() {}\n        },\n        {\n            key: \"seekTo\",\n            value: function seekTo(seconds) {\n                this.callPlayer(\"seekTo\", seconds * 1000);\n            }\n        },\n        {\n            key: \"setVolume\",\n            value: function setVolume(fraction) {\n                this.callPlayer(\"setVolume\", fraction * 100);\n            }\n        },\n        {\n            key: \"getDuration\",\n            value: function getDuration() {\n                return this.duration;\n            }\n        },\n        {\n            key: \"getCurrentTime\",\n            value: function getCurrentTime() {\n                return this.currentTime;\n            }\n        },\n        {\n            key: \"getSecondsLoaded\",\n            value: function getSecondsLoaded() {\n                return this.fractionLoaded * this.duration;\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var display = this.props.display;\n                var style = {\n                    width: \"100%\",\n                    height: \"100%\",\n                    display: display\n                };\n                return /*#__PURE__*/ _react[\"default\"].createElement(\"iframe\", {\n                    ref: this.ref,\n                    src: \"https://w.soundcloud.com/player/?url=\".concat(encodeURIComponent(this.props.url)),\n                    style: style,\n                    frameBorder: 0,\n                    allow: \"autoplay\"\n                });\n            }\n        }\n    ]);\n    return SoundCloud;\n}(_react.Component);\nexports.SoundCloud = SoundCloud;\n_defineProperty(SoundCloud, \"displayName\", \"SoundCloud\");\n_defineProperty(SoundCloud, \"canPlay\", function(url) {\n    return MATCH_URL.test(url);\n});\n_defineProperty(SoundCloud, \"loopOnEnded\", true);\nvar _default = (0, _singlePlayer[\"default\"])(SoundCloud);\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/players/SoundCloud.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/players/Streamable.js":
/*!*************************************************************!*\
  !*** ./node_modules/react-player/lib/players/Streamable.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = exports.Streamable = void 0;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nvar _singlePlayer = _interopRequireDefault(__webpack_require__(/*! ../singlePlayer */ \"(ssr)/./node_modules/react-player/lib/singlePlayer.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        \"default\": obj\n    };\n}\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function _getRequireWildcardCache() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n        return {\n            \"default\": obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj[\"default\"] = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function _typeof(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _createSuper(Derived) {\n    return function() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (_isNativeReflectConstruct()) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    }\n    return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar SDK_URL = \"https://cdn.embed.ly/player-0.1.0.min.js\";\nvar SDK_GLOBAL = \"playerjs\";\nvar MATCH_URL = /streamable\\.com\\/([a-z0-9]+)$/;\nvar Streamable = /*#__PURE__*/ function(_Component) {\n    _inherits(Streamable, _Component);\n    var _super = _createSuper(Streamable);\n    function Streamable() {\n        var _this;\n        _classCallCheck(this, Streamable);\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = _super.call.apply(_super, [\n            this\n        ].concat(args));\n        _defineProperty(_assertThisInitialized(_this), \"callPlayer\", _utils.callPlayer);\n        _defineProperty(_assertThisInitialized(_this), \"duration\", null);\n        _defineProperty(_assertThisInitialized(_this), \"currentTime\", null);\n        _defineProperty(_assertThisInitialized(_this), \"secondsLoaded\", null);\n        _defineProperty(_assertThisInitialized(_this), \"mute\", function() {\n            _this.callPlayer(\"mute\");\n        });\n        _defineProperty(_assertThisInitialized(_this), \"unmute\", function() {\n            _this.callPlayer(\"unmute\");\n        });\n        _defineProperty(_assertThisInitialized(_this), \"ref\", function(iframe) {\n            _this.iframe = iframe;\n        });\n        return _this;\n    }\n    _createClass(Streamable, [\n        {\n            key: \"load\",\n            value: function load(url) {\n                var _this2 = this;\n                (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL).then(function(playerjs) {\n                    if (!_this2.iframe) return;\n                    _this2.player = new playerjs.Player(_this2.iframe);\n                    _this2.player.setLoop(_this2.props.loop);\n                    _this2.player.on(\"ready\", _this2.props.onReady);\n                    _this2.player.on(\"play\", _this2.props.onPlay);\n                    _this2.player.on(\"pause\", _this2.props.onPause);\n                    _this2.player.on(\"seeked\", _this2.props.onSeek);\n                    _this2.player.on(\"ended\", _this2.props.onEnded);\n                    _this2.player.on(\"error\", _this2.props.onError);\n                    _this2.player.on(\"timeupdate\", function(_ref) {\n                        var duration = _ref.duration, seconds = _ref.seconds;\n                        _this2.duration = duration;\n                        _this2.currentTime = seconds;\n                    });\n                    _this2.player.on(\"buffered\", function(_ref2) {\n                        var percent = _ref2.percent;\n                        if (_this2.duration) {\n                            _this2.secondsLoaded = _this2.duration * percent;\n                        }\n                    });\n                    if (_this2.props.muted) {\n                        _this2.player.mute();\n                    }\n                }, this.props.onError);\n            }\n        },\n        {\n            key: \"play\",\n            value: function play() {\n                this.callPlayer(\"play\");\n            }\n        },\n        {\n            key: \"pause\",\n            value: function pause() {\n                this.callPlayer(\"pause\");\n            }\n        },\n        {\n            key: \"stop\",\n            value: function stop() {}\n        },\n        {\n            key: \"seekTo\",\n            value: function seekTo(seconds) {\n                this.callPlayer(\"setCurrentTime\", seconds);\n            }\n        },\n        {\n            key: \"setVolume\",\n            value: function setVolume(fraction) {\n                this.callPlayer(\"setVolume\", fraction * 100);\n            }\n        },\n        {\n            key: \"setLoop\",\n            value: function setLoop(loop) {\n                this.callPlayer(\"setLoop\", loop);\n            }\n        },\n        {\n            key: \"getDuration\",\n            value: function getDuration() {\n                return this.duration;\n            }\n        },\n        {\n            key: \"getCurrentTime\",\n            value: function getCurrentTime() {\n                return this.currentTime;\n            }\n        },\n        {\n            key: \"getSecondsLoaded\",\n            value: function getSecondsLoaded() {\n                return this.secondsLoaded;\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var id = this.props.url.match(MATCH_URL)[1];\n                var style = {\n                    width: \"100%\",\n                    height: \"100%\"\n                };\n                return /*#__PURE__*/ _react[\"default\"].createElement(\"iframe\", {\n                    ref: this.ref,\n                    src: \"https://streamable.com/o/\".concat(id),\n                    frameBorder: \"0\",\n                    scrolling: \"no\",\n                    style: style,\n                    allowFullScreen: true\n                });\n            }\n        }\n    ]);\n    return Streamable;\n}(_react.Component);\nexports.Streamable = Streamable;\n_defineProperty(Streamable, \"displayName\", \"Streamable\");\n_defineProperty(Streamable, \"canPlay\", function(url) {\n    return MATCH_URL.test(url);\n});\nvar _default = (0, _singlePlayer[\"default\"])(Streamable);\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/players/Streamable.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/players/Twitch.js":
/*!*********************************************************!*\
  !*** ./node_modules/react-player/lib/players/Twitch.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = exports.Twitch = void 0;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nvar _singlePlayer = _interopRequireDefault(__webpack_require__(/*! ../singlePlayer */ \"(ssr)/./node_modules/react-player/lib/singlePlayer.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        \"default\": obj\n    };\n}\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function _getRequireWildcardCache() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n        return {\n            \"default\": obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj[\"default\"] = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function _typeof(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        });\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys(Object(source), true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _createSuper(Derived) {\n    return function() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (_isNativeReflectConstruct()) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    }\n    return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar SDK_URL = \"https://player.twitch.tv/js/embed/v1.js\";\nvar SDK_GLOBAL = \"Twitch\";\nvar MATCH_VIDEO_URL = /(?:www\\.|go\\.)?twitch\\.tv\\/videos\\/(\\d+)($|\\?)/;\nvar MATCH_CHANNEL_URL = /(?:www\\.|go\\.)?twitch\\.tv\\/([a-z0-9_]+)($|\\?)/;\nvar PLAYER_ID_PREFIX = \"twitch-player-\";\nvar Twitch = /*#__PURE__*/ function(_Component) {\n    _inherits(Twitch, _Component);\n    var _super = _createSuper(Twitch);\n    function Twitch() {\n        var _this;\n        _classCallCheck(this, Twitch);\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = _super.call.apply(_super, [\n            this\n        ].concat(args));\n        _defineProperty(_assertThisInitialized(_this), \"callPlayer\", _utils.callPlayer);\n        _defineProperty(_assertThisInitialized(_this), \"playerID\", _this.props.config.twitch.playerId || \"\".concat(PLAYER_ID_PREFIX).concat((0, _utils.randomString)()));\n        _defineProperty(_assertThisInitialized(_this), \"mute\", function() {\n            _this.callPlayer(\"setMuted\", true);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"unmute\", function() {\n            _this.callPlayer(\"setMuted\", false);\n        });\n        return _this;\n    }\n    _createClass(Twitch, [\n        {\n            key: \"load\",\n            value: function load(url, isReady) {\n                var _this2 = this;\n                var _this$props = this.props, playsinline = _this$props.playsinline, onError = _this$props.onError, config = _this$props.config, controls = _this$props.controls;\n                var isChannel = MATCH_CHANNEL_URL.test(url);\n                var id = isChannel ? url.match(MATCH_CHANNEL_URL)[1] : url.match(MATCH_VIDEO_URL)[1];\n                if (isReady) {\n                    if (isChannel) {\n                        this.player.setChannel(id);\n                    } else {\n                        this.player.setVideo(\"v\" + id);\n                    }\n                    return;\n                }\n                (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL).then(function(Twitch) {\n                    _this2.player = new Twitch.Player(_this2.playerID, _objectSpread({\n                        video: isChannel ? \"\" : id,\n                        channel: isChannel ? id : \"\",\n                        height: \"100%\",\n                        width: \"100%\",\n                        playsinline: playsinline,\n                        autoplay: _this2.props.playing,\n                        muted: _this2.props.muted,\n                        // https://github.com/CookPete/react-player/issues/733#issuecomment-549085859\n                        controls: isChannel ? true : controls\n                    }, config.twitch.options));\n                    var _Twitch$Player = Twitch.Player, READY = _Twitch$Player.READY, PLAYING = _Twitch$Player.PLAYING, PAUSE = _Twitch$Player.PAUSE, ENDED = _Twitch$Player.ENDED, ONLINE = _Twitch$Player.ONLINE, OFFLINE = _Twitch$Player.OFFLINE;\n                    _this2.player.addEventListener(READY, _this2.props.onReady);\n                    _this2.player.addEventListener(PLAYING, _this2.props.onPlay);\n                    _this2.player.addEventListener(PAUSE, _this2.props.onPause);\n                    _this2.player.addEventListener(ENDED, _this2.props.onEnded); // Prevent weird isLoading behaviour when streams are offline\n                    _this2.player.addEventListener(ONLINE, _this2.props.onLoaded);\n                    _this2.player.addEventListener(OFFLINE, _this2.props.onLoaded);\n                }, onError);\n            }\n        },\n        {\n            key: \"play\",\n            value: function play() {\n                this.callPlayer(\"play\");\n            }\n        },\n        {\n            key: \"pause\",\n            value: function pause() {\n                this.callPlayer(\"pause\");\n            }\n        },\n        {\n            key: \"stop\",\n            value: function stop() {\n                this.callPlayer(\"pause\");\n            }\n        },\n        {\n            key: \"seekTo\",\n            value: function seekTo(seconds) {\n                this.callPlayer(\"seek\", seconds);\n            }\n        },\n        {\n            key: \"setVolume\",\n            value: function setVolume(fraction) {\n                this.callPlayer(\"setVolume\", fraction);\n            }\n        },\n        {\n            key: \"getDuration\",\n            value: function getDuration() {\n                return this.callPlayer(\"getDuration\");\n            }\n        },\n        {\n            key: \"getCurrentTime\",\n            value: function getCurrentTime() {\n                return this.callPlayer(\"getCurrentTime\");\n            }\n        },\n        {\n            key: \"getSecondsLoaded\",\n            value: function getSecondsLoaded() {\n                return null;\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var style = {\n                    width: \"100%\",\n                    height: \"100%\"\n                };\n                return /*#__PURE__*/ _react[\"default\"].createElement(\"div\", {\n                    style: style,\n                    id: this.playerID\n                });\n            }\n        }\n    ]);\n    return Twitch;\n}(_react.Component);\nexports.Twitch = Twitch;\n_defineProperty(Twitch, \"displayName\", \"Twitch\");\n_defineProperty(Twitch, \"canPlay\", function(url) {\n    return MATCH_VIDEO_URL.test(url) || MATCH_CHANNEL_URL.test(url);\n});\n_defineProperty(Twitch, \"loopOnEnded\", true);\nvar _default = (0, _singlePlayer[\"default\"])(Twitch);\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/players/Twitch.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/players/Vimeo.js":
/*!********************************************************!*\
  !*** ./node_modules/react-player/lib/players/Vimeo.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = exports.Vimeo = void 0;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nvar _singlePlayer = _interopRequireDefault(__webpack_require__(/*! ../singlePlayer */ \"(ssr)/./node_modules/react-player/lib/singlePlayer.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        \"default\": obj\n    };\n}\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function _getRequireWildcardCache() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n        return {\n            \"default\": obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj[\"default\"] = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function _typeof(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        });\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys(Object(source), true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _createSuper(Derived) {\n    return function() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (_isNativeReflectConstruct()) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    }\n    return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar SDK_URL = \"https://player.vimeo.com/api/player.js\";\nvar SDK_GLOBAL = \"Vimeo\";\nvar MATCH_URL = /vimeo\\.com\\/.+/;\nvar MATCH_FILE_URL = /vimeo\\.com\\/external\\/[0-9]+\\..+/;\nvar Vimeo = /*#__PURE__*/ function(_Component) {\n    _inherits(Vimeo, _Component);\n    var _super = _createSuper(Vimeo);\n    function Vimeo() {\n        var _this;\n        _classCallCheck(this, Vimeo);\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = _super.call.apply(_super, [\n            this\n        ].concat(args));\n        _defineProperty(_assertThisInitialized(_this), \"callPlayer\", _utils.callPlayer);\n        _defineProperty(_assertThisInitialized(_this), \"duration\", null);\n        _defineProperty(_assertThisInitialized(_this), \"currentTime\", null);\n        _defineProperty(_assertThisInitialized(_this), \"secondsLoaded\", null);\n        _defineProperty(_assertThisInitialized(_this), \"mute\", function() {\n            _this.setVolume(0);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"unmute\", function() {\n            if (_this.props.volume !== null) {\n                _this.setVolume(_this.props.volume);\n            }\n        });\n        _defineProperty(_assertThisInitialized(_this), \"ref\", function(container) {\n            _this.container = container;\n        });\n        return _this;\n    }\n    _createClass(Vimeo, [\n        {\n            key: \"load\",\n            value: function load(url) {\n                var _this2 = this;\n                this.duration = null;\n                (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL).then(function(Vimeo) {\n                    if (!_this2.container) return;\n                    _this2.player = new Vimeo.Player(_this2.container, _objectSpread({\n                        url: url,\n                        autoplay: _this2.props.playing,\n                        muted: _this2.props.muted,\n                        loop: _this2.props.loop,\n                        playsinline: _this2.props.playsinline,\n                        controls: _this2.props.controls\n                    }, _this2.props.config.vimeo.playerOptions));\n                    _this2.player.ready().then(function() {\n                        var iframe = _this2.container.querySelector(\"iframe\");\n                        iframe.style.width = \"100%\";\n                        iframe.style.height = \"100%\";\n                    })[\"catch\"](_this2.props.onError);\n                    _this2.player.on(\"loaded\", function() {\n                        _this2.props.onReady();\n                        _this2.refreshDuration();\n                    });\n                    _this2.player.on(\"play\", function() {\n                        _this2.props.onPlay();\n                        _this2.refreshDuration();\n                    });\n                    _this2.player.on(\"pause\", _this2.props.onPause);\n                    _this2.player.on(\"seeked\", function(e) {\n                        return _this2.props.onSeek(e.seconds);\n                    });\n                    _this2.player.on(\"ended\", _this2.props.onEnded);\n                    _this2.player.on(\"error\", _this2.props.onError);\n                    _this2.player.on(\"timeupdate\", function(_ref) {\n                        var seconds = _ref.seconds;\n                        _this2.currentTime = seconds;\n                    });\n                    _this2.player.on(\"progress\", function(_ref2) {\n                        var seconds = _ref2.seconds;\n                        _this2.secondsLoaded = seconds;\n                    });\n                }, this.props.onError);\n            }\n        },\n        {\n            key: \"refreshDuration\",\n            value: function refreshDuration() {\n                var _this3 = this;\n                this.player.getDuration().then(function(duration) {\n                    _this3.duration = duration;\n                });\n            }\n        },\n        {\n            key: \"play\",\n            value: function play() {\n                var promise = this.callPlayer(\"play\");\n                if (promise) {\n                    promise[\"catch\"](this.props.onError);\n                }\n            }\n        },\n        {\n            key: \"pause\",\n            value: function pause() {\n                this.callPlayer(\"pause\");\n            }\n        },\n        {\n            key: \"stop\",\n            value: function stop() {\n                this.callPlayer(\"unload\");\n            }\n        },\n        {\n            key: \"seekTo\",\n            value: function seekTo(seconds) {\n                this.callPlayer(\"setCurrentTime\", seconds);\n            }\n        },\n        {\n            key: \"setVolume\",\n            value: function setVolume(fraction) {\n                this.callPlayer(\"setVolume\", fraction);\n            }\n        },\n        {\n            key: \"setLoop\",\n            value: function setLoop(loop) {\n                this.callPlayer(\"setLoop\", loop);\n            }\n        },\n        {\n            key: \"setPlaybackRate\",\n            value: function setPlaybackRate(rate) {\n                this.callPlayer(\"setPlaybackRate\", rate);\n            }\n        },\n        {\n            key: \"getDuration\",\n            value: function getDuration() {\n                return this.duration;\n            }\n        },\n        {\n            key: \"getCurrentTime\",\n            value: function getCurrentTime() {\n                return this.currentTime;\n            }\n        },\n        {\n            key: \"getSecondsLoaded\",\n            value: function getSecondsLoaded() {\n                return this.secondsLoaded;\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var display = this.props.display;\n                var style = {\n                    width: \"100%\",\n                    height: \"100%\",\n                    overflow: \"hidden\",\n                    display: display\n                };\n                return /*#__PURE__*/ _react[\"default\"].createElement(\"div\", {\n                    key: this.props.url,\n                    ref: this.ref,\n                    style: style\n                });\n            }\n        }\n    ]);\n    return Vimeo;\n}(_react.Component);\nexports.Vimeo = Vimeo;\n_defineProperty(Vimeo, \"displayName\", \"Vimeo\");\n_defineProperty(Vimeo, \"forceLoad\", true);\n_defineProperty(Vimeo, \"canPlay\", function(url) {\n    if (MATCH_FILE_URL.test(url)) {\n        return false;\n    }\n    return MATCH_URL.test(url);\n});\nvar _default = (0, _singlePlayer[\"default\"])(Vimeo);\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/players/Vimeo.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/players/Wistia.js":
/*!*********************************************************!*\
  !*** ./node_modules/react-player/lib/players/Wistia.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = exports.Wistia = void 0;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nvar _singlePlayer = _interopRequireDefault(__webpack_require__(/*! ../singlePlayer */ \"(ssr)/./node_modules/react-player/lib/singlePlayer.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        \"default\": obj\n    };\n}\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function _getRequireWildcardCache() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n        return {\n            \"default\": obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj[\"default\"] = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function _typeof(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        });\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys(Object(source), true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _createSuper(Derived) {\n    return function() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (_isNativeReflectConstruct()) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    }\n    return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar SDK_URL = \"https://fast.wistia.com/assets/external/E-v1.js\";\nvar SDK_GLOBAL = \"Wistia\";\nvar MATCH_URL = /(?:wistia\\.com|wi\\.st)\\/(?:medias|embed)\\/(.*)$/;\nvar Wistia = /*#__PURE__*/ function(_Component) {\n    _inherits(Wistia, _Component);\n    var _super = _createSuper(Wistia);\n    function Wistia() {\n        var _this;\n        _classCallCheck(this, Wistia);\n        for(var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++){\n            _args[_key] = arguments[_key];\n        }\n        _this = _super.call.apply(_super, [\n            this\n        ].concat(_args));\n        _defineProperty(_assertThisInitialized(_this), \"callPlayer\", _utils.callPlayer);\n        _defineProperty(_assertThisInitialized(_this), \"onPlay\", function() {\n            var _this$props;\n            return (_this$props = _this.props).onPlay.apply(_this$props, arguments);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onPause\", function() {\n            var _this$props2;\n            return (_this$props2 = _this.props).onPause.apply(_this$props2, arguments);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onSeek\", function() {\n            var _this$props3;\n            return (_this$props3 = _this.props).onSeek.apply(_this$props3, arguments);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onEnded\", function() {\n            var _this$props4;\n            return (_this$props4 = _this.props).onEnded.apply(_this$props4, arguments);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"mute\", function() {\n            _this.callPlayer(\"mute\");\n        });\n        _defineProperty(_assertThisInitialized(_this), \"unmute\", function() {\n            _this.callPlayer(\"unmute\");\n        });\n        return _this;\n    }\n    _createClass(Wistia, [\n        {\n            key: \"getID\",\n            value: function getID(url) {\n                return url && url.match(MATCH_URL)[1];\n            }\n        },\n        {\n            key: \"load\",\n            value: function load(url) {\n                var _this2 = this;\n                var _this$props5 = this.props, playing = _this$props5.playing, muted = _this$props5.muted, controls = _this$props5.controls, _onReady = _this$props5.onReady, config = _this$props5.config, onError = _this$props5.onError;\n                (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL).then(function() {\n                    window._wq = window._wq || [];\n                    window._wq.push({\n                        id: _this2.getID(url),\n                        options: _objectSpread({\n                            autoPlay: playing,\n                            silentAutoPlay: \"allow\",\n                            muted: muted,\n                            controlsVisibleOnLoad: controls\n                        }, config.wistia.options),\n                        onReady: function onReady(player) {\n                            _this2.player = player;\n                            _this2.unbind();\n                            _this2.player.bind(\"play\", _this2.onPlay);\n                            _this2.player.bind(\"pause\", _this2.onPause);\n                            _this2.player.bind(\"seek\", _this2.onSeek);\n                            _this2.player.bind(\"end\", _this2.onEnded);\n                            _onReady();\n                        }\n                    });\n                }, onError);\n            }\n        },\n        {\n            key: \"unbind\",\n            value: function unbind() {\n                this.player.unbind(\"play\", this.onPlay);\n                this.player.unbind(\"pause\", this.onPause);\n                this.player.unbind(\"seek\", this.onSeek);\n                this.player.unbind(\"end\", this.onEnded);\n            } // Proxy methods to prevent listener leaks\n        },\n        {\n            key: \"play\",\n            value: function play() {\n                this.callPlayer(\"play\");\n            }\n        },\n        {\n            key: \"pause\",\n            value: function pause() {\n                this.callPlayer(\"pause\");\n            }\n        },\n        {\n            key: \"stop\",\n            value: function stop() {\n                this.unbind();\n                this.callPlayer(\"remove\");\n            }\n        },\n        {\n            key: \"seekTo\",\n            value: function seekTo(seconds) {\n                this.callPlayer(\"time\", seconds);\n            }\n        },\n        {\n            key: \"setVolume\",\n            value: function setVolume(fraction) {\n                this.callPlayer(\"volume\", fraction);\n            }\n        },\n        {\n            key: \"setPlaybackRate\",\n            value: function setPlaybackRate(rate) {\n                this.callPlayer(\"playbackRate\", rate);\n            }\n        },\n        {\n            key: \"getDuration\",\n            value: function getDuration() {\n                return this.callPlayer(\"duration\");\n            }\n        },\n        {\n            key: \"getCurrentTime\",\n            value: function getCurrentTime() {\n                return this.callPlayer(\"time\");\n            }\n        },\n        {\n            key: \"getSecondsLoaded\",\n            value: function getSecondsLoaded() {\n                return null;\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var id = this.getID(this.props.url);\n                var className = \"wistia_embed wistia_async_\".concat(id);\n                var style = {\n                    width: \"100%\",\n                    height: \"100%\"\n                };\n                return /*#__PURE__*/ _react[\"default\"].createElement(\"div\", {\n                    key: id,\n                    className: className,\n                    style: style\n                });\n            }\n        }\n    ]);\n    return Wistia;\n}(_react.Component);\nexports.Wistia = Wistia;\n_defineProperty(Wistia, \"displayName\", \"Wistia\");\n_defineProperty(Wistia, \"canPlay\", function(url) {\n    return MATCH_URL.test(url);\n});\n_defineProperty(Wistia, \"loopOnEnded\", true);\nvar _default = (0, _singlePlayer[\"default\"])(Wistia);\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/players/Wistia.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/players/YouTube.js":
/*!**********************************************************!*\
  !*** ./node_modules/react-player/lib/players/YouTube.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = exports.YouTube = void 0;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nvar _singlePlayer = _interopRequireDefault(__webpack_require__(/*! ../singlePlayer */ \"(ssr)/./node_modules/react-player/lib/singlePlayer.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        \"default\": obj\n    };\n}\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function _getRequireWildcardCache() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n        return {\n            \"default\": obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj[\"default\"] = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function _typeof(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        });\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys(Object(source), true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _createSuper(Derived) {\n    return function() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (_isNativeReflectConstruct()) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    }\n    return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++){\n        arr2[i] = arr[i];\n    }\n    return arr2;\n}\nfunction _iterableToArrayLimit(arr, i) {\n    if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n    try {\n        for(var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\nfunction _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nvar SDK_URL = \"https://www.youtube.com/iframe_api\";\nvar SDK_GLOBAL = \"YT\";\nvar SDK_GLOBAL_READY = \"onYouTubeIframeAPIReady\";\nvar MATCH_URL = /(?:youtu\\.be\\/|youtube\\.com\\/(?:embed\\/|v\\/|watch\\?v=|watch\\?.+&v=))((\\w|-){11})|youtube\\.com\\/playlist\\?list=/;\nvar MATCH_PLAYLIST = /list=([a-zA-Z0-9_-]+)/;\nfunction parsePlaylist(url) {\n    if (MATCH_PLAYLIST.test(url)) {\n        var _url$match = url.match(MATCH_PLAYLIST), _url$match2 = _slicedToArray(_url$match, 2), playlistId = _url$match2[1];\n        return {\n            listType: \"playlist\",\n            list: playlistId\n        };\n    }\n    return {};\n}\nvar YouTube = /*#__PURE__*/ function(_Component) {\n    _inherits(YouTube, _Component);\n    var _super = _createSuper(YouTube);\n    function YouTube() {\n        var _this;\n        _classCallCheck(this, YouTube);\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = _super.call.apply(_super, [\n            this\n        ].concat(args));\n        _defineProperty(_assertThisInitialized(_this), \"callPlayer\", _utils.callPlayer);\n        _defineProperty(_assertThisInitialized(_this), \"onStateChange\", function(_ref) {\n            var data = _ref.data;\n            var _this$props = _this.props, onPlay = _this$props.onPlay, onPause = _this$props.onPause, onBuffer = _this$props.onBuffer, onBufferEnd = _this$props.onBufferEnd, onEnded = _this$props.onEnded, onReady = _this$props.onReady, loop = _this$props.loop;\n            var _window$SDK_GLOBAL$Pl = window[SDK_GLOBAL].PlayerState, PLAYING = _window$SDK_GLOBAL$Pl.PLAYING, PAUSED = _window$SDK_GLOBAL$Pl.PAUSED, BUFFERING = _window$SDK_GLOBAL$Pl.BUFFERING, ENDED = _window$SDK_GLOBAL$Pl.ENDED, CUED = _window$SDK_GLOBAL$Pl.CUED;\n            if (data === PLAYING) {\n                onPlay();\n                onBufferEnd();\n            }\n            if (data === PAUSED) onPause();\n            if (data === BUFFERING) onBuffer();\n            if (data === ENDED) {\n                var isPlaylist = !!_this.callPlayer(\"getPlaylist\");\n                if (loop && !isPlaylist) {\n                    _this.play(); // Only loop manually if not playing a playlist\n                }\n                onEnded();\n            }\n            if (data === CUED) onReady();\n        });\n        _defineProperty(_assertThisInitialized(_this), \"mute\", function() {\n            _this.callPlayer(\"mute\");\n        });\n        _defineProperty(_assertThisInitialized(_this), \"unmute\", function() {\n            _this.callPlayer(\"unMute\");\n        });\n        _defineProperty(_assertThisInitialized(_this), \"ref\", function(container) {\n            _this.container = container;\n        });\n        return _this;\n    }\n    _createClass(YouTube, [\n        {\n            key: \"load\",\n            value: function load(url, isReady) {\n                var _this2 = this;\n                var _this$props2 = this.props, playing = _this$props2.playing, muted = _this$props2.muted, playsinline = _this$props2.playsinline, controls = _this$props2.controls, loop = _this$props2.loop, config = _this$props2.config, _onError = _this$props2.onError;\n                var _config$youtube = config.youtube, playerVars = _config$youtube.playerVars, embedOptions = _config$youtube.embedOptions;\n                var id = url && url.match(MATCH_URL)[1];\n                if (isReady) {\n                    if (MATCH_PLAYLIST.test(url)) {\n                        this.player.loadPlaylist(parsePlaylist(url));\n                        return;\n                    }\n                    this.player.cueVideoById({\n                        videoId: id,\n                        startSeconds: (0, _utils.parseStartTime)(url) || playerVars.start,\n                        endSeconds: (0, _utils.parseEndTime)(url) || playerVars.end\n                    });\n                    return;\n                }\n                (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY, function(YT) {\n                    return YT.loaded;\n                }).then(function(YT) {\n                    if (!_this2.container) return;\n                    _this2.player = new YT.Player(_this2.container, _objectSpread({\n                        width: \"100%\",\n                        height: \"100%\",\n                        videoId: id,\n                        playerVars: _objectSpread({\n                            autoplay: playing ? 1 : 0,\n                            mute: muted ? 1 : 0,\n                            controls: controls ? 1 : 0,\n                            start: (0, _utils.parseStartTime)(url),\n                            end: (0, _utils.parseEndTime)(url),\n                            origin: window.location.origin,\n                            playsinline: playsinline\n                        }, parsePlaylist(url), {}, playerVars),\n                        events: {\n                            onReady: function onReady() {\n                                if (loop) {\n                                    _this2.player.setLoop(true); // Enable playlist looping\n                                }\n                                _this2.props.onReady();\n                            },\n                            onStateChange: _this2.onStateChange,\n                            onError: function onError(event) {\n                                return _onError(event.data);\n                            }\n                        }\n                    }, embedOptions));\n                }, _onError);\n            }\n        },\n        {\n            key: \"play\",\n            value: function play() {\n                this.callPlayer(\"playVideo\");\n            }\n        },\n        {\n            key: \"pause\",\n            value: function pause() {\n                this.callPlayer(\"pauseVideo\");\n            }\n        },\n        {\n            key: \"stop\",\n            value: function stop() {\n                if (!document.body.contains(this.callPlayer(\"getIframe\"))) return;\n                this.callPlayer(\"stopVideo\");\n            }\n        },\n        {\n            key: \"seekTo\",\n            value: function seekTo(amount) {\n                this.callPlayer(\"seekTo\", amount);\n                if (!this.props.playing) {\n                    this.pause();\n                }\n            }\n        },\n        {\n            key: \"setVolume\",\n            value: function setVolume(fraction) {\n                this.callPlayer(\"setVolume\", fraction * 100);\n            }\n        },\n        {\n            key: \"setPlaybackRate\",\n            value: function setPlaybackRate(rate) {\n                this.callPlayer(\"setPlaybackRate\", rate);\n            }\n        },\n        {\n            key: \"setLoop\",\n            value: function setLoop(loop) {\n                this.callPlayer(\"setLoop\", loop);\n            }\n        },\n        {\n            key: \"getDuration\",\n            value: function getDuration() {\n                return this.callPlayer(\"getDuration\");\n            }\n        },\n        {\n            key: \"getCurrentTime\",\n            value: function getCurrentTime() {\n                return this.callPlayer(\"getCurrentTime\");\n            }\n        },\n        {\n            key: \"getSecondsLoaded\",\n            value: function getSecondsLoaded() {\n                return this.callPlayer(\"getVideoLoadedFraction\") * this.getDuration();\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var display = this.props.display;\n                var style = {\n                    width: \"100%\",\n                    height: \"100%\",\n                    display: display\n                };\n                return /*#__PURE__*/ _react[\"default\"].createElement(\"div\", {\n                    style: style\n                }, /*#__PURE__*/ _react[\"default\"].createElement(\"div\", {\n                    ref: this.ref\n                }));\n            }\n        }\n    ]);\n    return YouTube;\n}(_react.Component);\nexports.YouTube = YouTube;\n_defineProperty(YouTube, \"displayName\", \"YouTube\");\n_defineProperty(YouTube, \"canPlay\", function(url) {\n    return MATCH_URL.test(url);\n});\nvar _default = (0, _singlePlayer[\"default\"])(YouTube);\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/players/YouTube.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/players/index.js":
/*!********************************************************!*\
  !*** ./node_modules/react-player/lib/players/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _YouTube = __webpack_require__(/*! ./YouTube */ \"(ssr)/./node_modules/react-player/lib/players/YouTube.js\");\nvar _SoundCloud = __webpack_require__(/*! ./SoundCloud */ \"(ssr)/./node_modules/react-player/lib/players/SoundCloud.js\");\nvar _Vimeo = __webpack_require__(/*! ./Vimeo */ \"(ssr)/./node_modules/react-player/lib/players/Vimeo.js\");\nvar _Facebook = __webpack_require__(/*! ./Facebook */ \"(ssr)/./node_modules/react-player/lib/players/Facebook.js\");\nvar _Streamable = __webpack_require__(/*! ./Streamable */ \"(ssr)/./node_modules/react-player/lib/players/Streamable.js\");\nvar _Wistia = __webpack_require__(/*! ./Wistia */ \"(ssr)/./node_modules/react-player/lib/players/Wistia.js\");\nvar _Twitch = __webpack_require__(/*! ./Twitch */ \"(ssr)/./node_modules/react-player/lib/players/Twitch.js\");\nvar _DailyMotion = __webpack_require__(/*! ./DailyMotion */ \"(ssr)/./node_modules/react-player/lib/players/DailyMotion.js\");\nvar _Mixcloud = __webpack_require__(/*! ./Mixcloud */ \"(ssr)/./node_modules/react-player/lib/players/Mixcloud.js\");\nvar _FilePlayer = __webpack_require__(/*! ./FilePlayer */ \"(ssr)/./node_modules/react-player/lib/players/FilePlayer.js\");\nvar _default = [\n    _YouTube.YouTube,\n    _SoundCloud.SoundCloud,\n    _Vimeo.Vimeo,\n    _Facebook.Facebook,\n    _Streamable.Streamable,\n    _Wistia.Wistia,\n    _Twitch.Twitch,\n    _DailyMotion.DailyMotion,\n    _Mixcloud.Mixcloud,\n    _FilePlayer.FilePlayer\n];\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtcGxheWVyL2xpYi9wbGF5ZXJzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWJBLDhDQUE2QztJQUMzQ0csT0FBTztBQUNULENBQUMsRUFBQztBQUNGRCxrQkFBa0IsR0FBRyxLQUFLO0FBRTFCLElBQUlFLFdBQVdDLG1CQUFPQSxDQUFDLDJFQUFXO0FBRWxDLElBQUlDLGNBQWNELG1CQUFPQSxDQUFDLGlGQUFjO0FBRXhDLElBQUlFLFNBQVNGLG1CQUFPQSxDQUFDLHVFQUFTO0FBRTlCLElBQUlHLFlBQVlILG1CQUFPQSxDQUFDLDZFQUFZO0FBRXBDLElBQUlJLGNBQWNKLG1CQUFPQSxDQUFDLGlGQUFjO0FBRXhDLElBQUlLLFVBQVVMLG1CQUFPQSxDQUFDLHlFQUFVO0FBRWhDLElBQUlNLFVBQVVOLG1CQUFPQSxDQUFDLHlFQUFVO0FBRWhDLElBQUlPLGVBQWVQLG1CQUFPQSxDQUFDLG1GQUFlO0FBRTFDLElBQUlRLFlBQVlSLG1CQUFPQSxDQUFDLDZFQUFZO0FBRXBDLElBQUlTLGNBQWNULG1CQUFPQSxDQUFDLGlGQUFjO0FBRXhDLElBQUlVLFdBQVc7SUFBQ1gsU0FBU1ksT0FBTztJQUFFVixZQUFZVyxVQUFVO0lBQUVWLE9BQU9XLEtBQUs7SUFBRVYsVUFBVVcsUUFBUTtJQUFFVixZQUFZVyxVQUFVO0lBQUVWLFFBQVFXLE1BQU07SUFBRVYsUUFBUVcsTUFBTTtJQUFFVixhQUFhVyxXQUFXO0lBQUVWLFVBQVVXLFFBQVE7SUFBRVYsWUFBWVcsVUFBVTtDQUFDO0FBQ3pOdkIsa0JBQWtCLEdBQUdhIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UvLi9ub2RlX21vZHVsZXMvcmVhY3QtcGxheWVyL2xpYi9wbGF5ZXJzL2luZGV4LmpzPzBjYjYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcblxudmFyIF9Zb3VUdWJlID0gcmVxdWlyZShcIi4vWW91VHViZVwiKTtcblxudmFyIF9Tb3VuZENsb3VkID0gcmVxdWlyZShcIi4vU291bmRDbG91ZFwiKTtcblxudmFyIF9WaW1lbyA9IHJlcXVpcmUoXCIuL1ZpbWVvXCIpO1xuXG52YXIgX0ZhY2Vib29rID0gcmVxdWlyZShcIi4vRmFjZWJvb2tcIik7XG5cbnZhciBfU3RyZWFtYWJsZSA9IHJlcXVpcmUoXCIuL1N0cmVhbWFibGVcIik7XG5cbnZhciBfV2lzdGlhID0gcmVxdWlyZShcIi4vV2lzdGlhXCIpO1xuXG52YXIgX1R3aXRjaCA9IHJlcXVpcmUoXCIuL1R3aXRjaFwiKTtcblxudmFyIF9EYWlseU1vdGlvbiA9IHJlcXVpcmUoXCIuL0RhaWx5TW90aW9uXCIpO1xuXG52YXIgX01peGNsb3VkID0gcmVxdWlyZShcIi4vTWl4Y2xvdWRcIik7XG5cbnZhciBfRmlsZVBsYXllciA9IHJlcXVpcmUoXCIuL0ZpbGVQbGF5ZXJcIik7XG5cbnZhciBfZGVmYXVsdCA9IFtfWW91VHViZS5Zb3VUdWJlLCBfU291bmRDbG91ZC5Tb3VuZENsb3VkLCBfVmltZW8uVmltZW8sIF9GYWNlYm9vay5GYWNlYm9vaywgX1N0cmVhbWFibGUuU3RyZWFtYWJsZSwgX1dpc3RpYS5XaXN0aWEsIF9Ud2l0Y2guVHdpdGNoLCBfRGFpbHlNb3Rpb24uRGFpbHlNb3Rpb24sIF9NaXhjbG91ZC5NaXhjbG91ZCwgX0ZpbGVQbGF5ZXIuRmlsZVBsYXllcl07XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0OyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIl9Zb3VUdWJlIiwicmVxdWlyZSIsIl9Tb3VuZENsb3VkIiwiX1ZpbWVvIiwiX0ZhY2Vib29rIiwiX1N0cmVhbWFibGUiLCJfV2lzdGlhIiwiX1R3aXRjaCIsIl9EYWlseU1vdGlvbiIsIl9NaXhjbG91ZCIsIl9GaWxlUGxheWVyIiwiX2RlZmF1bHQiLCJZb3VUdWJlIiwiU291bmRDbG91ZCIsIlZpbWVvIiwiRmFjZWJvb2siLCJTdHJlYW1hYmxlIiwiV2lzdGlhIiwiVHdpdGNoIiwiRGFpbHlNb3Rpb24iLCJNaXhjbG91ZCIsIkZpbGVQbGF5ZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/players/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/preload.js":
/*!**************************************************!*\
  !*** ./node_modules/react-player/lib/preload.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = renderPreloadPlayers;\nvar _react = _interopRequireDefault(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _Player = _interopRequireDefault(__webpack_require__(/*! ./Player */ \"(ssr)/./node_modules/react-player/lib/Player.js\"));\nvar _YouTube = __webpack_require__(/*! ./players/YouTube */ \"(ssr)/./node_modules/react-player/lib/players/YouTube.js\");\nvar _SoundCloud = __webpack_require__(/*! ./players/SoundCloud */ \"(ssr)/./node_modules/react-player/lib/players/SoundCloud.js\");\nvar _Vimeo = __webpack_require__(/*! ./players/Vimeo */ \"(ssr)/./node_modules/react-player/lib/players/Vimeo.js\");\nvar _DailyMotion = __webpack_require__(/*! ./players/DailyMotion */ \"(ssr)/./node_modules/react-player/lib/players/DailyMotion.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        \"default\": obj\n    };\n}\nfunction _createForOfIteratorHelper(o) {\n    if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n        if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) {\n            var i = 0;\n            var F = function F() {};\n            return {\n                s: F,\n                n: function n() {\n                    if (i >= o.length) return {\n                        done: true\n                    };\n                    return {\n                        done: false,\n                        value: o[i++]\n                    };\n                },\n                e: function e(_e) {\n                    throw _e;\n                },\n                f: F\n            };\n        }\n        throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n    }\n    var it, normalCompletion = true, didErr = false, err;\n    return {\n        s: function s() {\n            it = o[Symbol.iterator]();\n        },\n        n: function n() {\n            var step = it.next();\n            normalCompletion = step.done;\n            return step;\n        },\n        e: function e(_e2) {\n            didErr = true;\n            err = _e2;\n        },\n        f: function f() {\n            try {\n                if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n            } finally{\n                if (didErr) throw err;\n            }\n        }\n    };\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++){\n        arr2[i] = arr[i];\n    }\n    return arr2;\n}\nvar PRELOAD_PLAYERS = [\n    {\n        Player: _YouTube.YouTube,\n        configKey: \"youtube\",\n        url: \"https://www.youtube.com/watch?v=GlCmAC4MHek\"\n    },\n    {\n        Player: _SoundCloud.SoundCloud,\n        configKey: \"soundcloud\",\n        url: \"https://soundcloud.com/seucheu/john-cage-433-8-bit-version\"\n    },\n    {\n        Player: _Vimeo.Vimeo,\n        configKey: \"vimeo\",\n        url: \"https://vimeo.com/300970506\"\n    },\n    {\n        Player: _DailyMotion.DailyMotion,\n        configKey: \"dailymotion\",\n        url: \"http://www.dailymotion.com/video/xqdpyk\"\n    }\n];\nfunction renderPreloadPlayers(url, controls, config) {\n    var players = [];\n    var _iterator = _createForOfIteratorHelper(PRELOAD_PLAYERS), _step;\n    try {\n        for(_iterator.s(); !(_step = _iterator.n()).done;){\n            var player = _step.value;\n            if (!player.Player.canPlay(url) && config[player.configKey].preload) {\n                players.push(/*#__PURE__*/ _react[\"default\"].createElement(_Player[\"default\"], {\n                    key: player.Player.displayName,\n                    activePlayer: player.Player,\n                    url: player.url,\n                    controls: controls,\n                    playing: true,\n                    muted: true,\n                    display: \"none\"\n                }));\n            }\n        }\n    } catch (err) {\n        _iterator.e(err);\n    } finally{\n        _iterator.f();\n    }\n    return players;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/preload.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/props.js":
/*!************************************************!*\
  !*** ./node_modules/react-player/lib/props.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.DEPRECATED_CONFIG_PROPS = exports.defaultProps = exports.propTypes = void 0;\nvar _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ \"(ssr)/./node_modules/prop-types/index.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        \"default\": obj\n    };\n}\nvar string = _propTypes[\"default\"].string, bool = _propTypes[\"default\"].bool, number = _propTypes[\"default\"].number, array = _propTypes[\"default\"].array, oneOfType = _propTypes[\"default\"].oneOfType, shape = _propTypes[\"default\"].shape, object = _propTypes[\"default\"].object, func = _propTypes[\"default\"].func, node = _propTypes[\"default\"].node;\nvar propTypes = {\n    url: oneOfType([\n        string,\n        array,\n        object\n    ]),\n    playing: bool,\n    loop: bool,\n    controls: bool,\n    volume: number,\n    muted: bool,\n    playbackRate: number,\n    width: oneOfType([\n        string,\n        number\n    ]),\n    height: oneOfType([\n        string,\n        number\n    ]),\n    style: object,\n    progressInterval: number,\n    playsinline: bool,\n    pip: bool,\n    light: oneOfType([\n        bool,\n        string\n    ]),\n    playIcon: node,\n    wrapper: oneOfType([\n        string,\n        func,\n        shape({\n            render: func.isRequired\n        })\n    ]),\n    config: shape({\n        soundcloud: shape({\n            options: object,\n            preload: bool\n        }),\n        youtube: shape({\n            playerVars: object,\n            embedOptions: object,\n            preload: bool\n        }),\n        facebook: shape({\n            appId: string,\n            version: string,\n            playerId: string\n        }),\n        dailymotion: shape({\n            params: object,\n            preload: bool\n        }),\n        vimeo: shape({\n            playerOptions: object,\n            preload: bool\n        }),\n        file: shape({\n            attributes: object,\n            tracks: array,\n            forceVideo: bool,\n            forceAudio: bool,\n            forceHLS: bool,\n            forceDASH: bool,\n            hlsOptions: object,\n            hlsVersion: string,\n            dashVersion: string\n        }),\n        wistia: shape({\n            options: object\n        }),\n        mixcloud: shape({\n            options: object\n        }),\n        twitch: shape({\n            options: object,\n            playerId: string\n        })\n    }),\n    onReady: func,\n    onStart: func,\n    onPlay: func,\n    onPause: func,\n    onBuffer: func,\n    onBufferEnd: func,\n    onEnded: func,\n    onError: func,\n    onDuration: func,\n    onSeek: func,\n    onProgress: func,\n    onEnablePIP: func,\n    onDisablePIP: func\n};\nexports.propTypes = propTypes;\nvar defaultProps = {\n    playing: false,\n    loop: false,\n    controls: false,\n    volume: null,\n    muted: false,\n    playbackRate: 1,\n    width: \"640px\",\n    height: \"360px\",\n    style: {},\n    progressInterval: 1000,\n    playsinline: false,\n    pip: false,\n    light: false,\n    wrapper: \"div\",\n    config: {\n        soundcloud: {\n            options: {\n                visual: true,\n                // Undocumented, but makes player fill container and look better\n                buying: false,\n                liking: false,\n                download: false,\n                sharing: false,\n                show_comments: false,\n                show_playcount: false\n            }\n        },\n        youtube: {\n            playerVars: {\n                playsinline: 1,\n                showinfo: 0,\n                rel: 0,\n                iv_load_policy: 3,\n                modestbranding: 1\n            },\n            embedOptions: {},\n            preload: false\n        },\n        facebook: {\n            appId: \"1309697205772819\",\n            version: \"v3.3\",\n            playerId: null\n        },\n        dailymotion: {\n            params: {\n                api: 1,\n                \"endscreen-enable\": false\n            },\n            preload: false\n        },\n        vimeo: {\n            playerOptions: {\n                autopause: false,\n                byline: false,\n                portrait: false,\n                title: false\n            },\n            preload: false\n        },\n        file: {\n            attributes: {},\n            tracks: [],\n            forceVideo: false,\n            forceAudio: false,\n            forceHLS: false,\n            forceDASH: false,\n            hlsOptions: {},\n            hlsVersion: \"0.13.1\",\n            dashVersion: \"2.9.2\"\n        },\n        wistia: {\n            options: {}\n        },\n        mixcloud: {\n            options: {\n                hide_cover: 1\n            }\n        },\n        twitch: {\n            options: {},\n            playerId: null\n        }\n    },\n    onReady: function onReady() {},\n    onStart: function onStart() {},\n    onPlay: function onPlay() {},\n    onPause: function onPause() {},\n    onBuffer: function onBuffer() {},\n    onBufferEnd: function onBufferEnd() {},\n    onEnded: function onEnded() {},\n    onError: function onError() {},\n    onDuration: function onDuration() {},\n    onSeek: function onSeek() {},\n    onProgress: function onProgress() {},\n    onEnablePIP: function onEnablePIP() {},\n    onDisablePIP: function onDisablePIP() {}\n};\nexports.defaultProps = defaultProps;\nvar DEPRECATED_CONFIG_PROPS = [\n    \"soundcloudConfig\",\n    \"youtubeConfig\",\n    \"facebookConfig\",\n    \"dailymotionConfig\",\n    \"vimeoConfig\",\n    \"fileConfig\",\n    \"wistiaConfig\"\n];\nexports.DEPRECATED_CONFIG_PROPS = DEPRECATED_CONFIG_PROPS;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/props.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/singlePlayer.js":
/*!*******************************************************!*\
  !*** ./node_modules/react-player/lib/singlePlayer.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = createSinglePlayer;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _props = __webpack_require__(/*! ./props */ \"(ssr)/./node_modules/react-player/lib/props.js\");\nvar _utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nvar _Player = _interopRequireDefault(__webpack_require__(/*! ./Player */ \"(ssr)/./node_modules/react-player/lib/Player.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        \"default\": obj\n    };\n}\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function _getRequireWildcardCache() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n        return {\n            \"default\": obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj[\"default\"] = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function _typeof(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nfunction _extends() {\n    _extends = Object.assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        });\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys(Object(source), true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _createSuper(Derived) {\n    return function() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (_isNativeReflectConstruct()) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    }\n    return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar SUPPORTED_PROPS = Object.keys(_props.propTypes);\nfunction createSinglePlayer(activePlayer) {\n    var _class, _temp;\n    return _temp = _class = /*#__PURE__*/ function(_Component) {\n        _inherits(SinglePlayer, _Component);\n        var _super = _createSuper(SinglePlayer);\n        function SinglePlayer() {\n            var _this;\n            _classCallCheck(this, SinglePlayer);\n            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                args[_key] = arguments[_key];\n            }\n            _this = _super.call.apply(_super, [\n                this\n            ].concat(args));\n            _defineProperty(_assertThisInitialized(_this), \"config\", (0, _utils.getConfig)(_this.props, _props.defaultProps, true));\n            _defineProperty(_assertThisInitialized(_this), \"getDuration\", function() {\n                if (!_this.player) return null;\n                return _this.player.getDuration();\n            });\n            _defineProperty(_assertThisInitialized(_this), \"getCurrentTime\", function() {\n                if (!_this.player) return null;\n                return _this.player.getCurrentTime();\n            });\n            _defineProperty(_assertThisInitialized(_this), \"getSecondsLoaded\", function() {\n                if (!_this.player) return null;\n                return _this.player.getSecondsLoaded();\n            });\n            _defineProperty(_assertThisInitialized(_this), \"getInternalPlayer\", function() {\n                var key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"player\";\n                if (!_this.player) return null;\n                return _this.player.getInternalPlayer(key);\n            });\n            _defineProperty(_assertThisInitialized(_this), \"seekTo\", function(fraction, type) {\n                if (!_this.player) return null;\n                _this.player.seekTo(fraction, type);\n            });\n            _defineProperty(_assertThisInitialized(_this), \"ref\", function(player) {\n                _this.player = player;\n            });\n            return _this;\n        }\n        _createClass(SinglePlayer, [\n            {\n                key: \"shouldComponentUpdate\",\n                value: function shouldComponentUpdate(nextProps) {\n                    return !(0, _utils.isEqual)(this.props, nextProps);\n                }\n            },\n            {\n                key: \"componentDidUpdate\",\n                value: function componentDidUpdate() {\n                    this.config = (0, _utils.getConfig)(this.props, _props.defaultProps);\n                }\n            },\n            {\n                key: \"render\",\n                value: function render() {\n                    var _this$config$file = this.config.file, forceVideo = _this$config$file.forceVideo, forceAudio = _this$config$file.forceAudio, forceHLS = _this$config$file.forceHLS, forceDASH = _this$config$file.forceDASH;\n                    var skipCanPlay = forceVideo || forceAudio || forceHLS || forceDASH;\n                    if (!activePlayer.canPlay(this.props.url) && !skipCanPlay) {\n                        return null;\n                    }\n                    var _this$props = this.props, style = _this$props.style, width = _this$props.width, height = _this$props.height, Wrapper = _this$props.wrapper;\n                    var otherProps = (0, _utils.omit)(this.props, SUPPORTED_PROPS, _props.DEPRECATED_CONFIG_PROPS);\n                    return /*#__PURE__*/ _react[\"default\"].createElement(Wrapper, _extends({\n                        style: _objectSpread({}, style, {\n                            width: width,\n                            height: height\n                        })\n                    }, otherProps), /*#__PURE__*/ _react[\"default\"].createElement(_Player[\"default\"], _extends({}, this.props, {\n                        ref: this.ref,\n                        activePlayer: activePlayer,\n                        config: this.config\n                    })));\n                }\n            }\n        ]);\n        return SinglePlayer;\n    }(_react.Component), _defineProperty(_class, \"displayName\", \"\".concat(activePlayer.displayName, \"Player\")), _defineProperty(_class, \"propTypes\", _props.propTypes), _defineProperty(_class, \"defaultProps\", _props.defaultProps), _defineProperty(_class, \"canPlay\", activePlayer.canPlay), _temp;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/singlePlayer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/utils.js":
/*!************************************************!*\
  !*** ./node_modules/react-player/lib/utils.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.parseStartTime = parseStartTime;\nexports.parseEndTime = parseEndTime;\nexports.randomString = randomString;\nexports.queryString = queryString;\nexports.getSDK = getSDK;\nexports.getConfig = getConfig;\nexports.omit = omit;\nexports.callPlayer = callPlayer;\nexports.isObject = isObject;\nexports.isEqual = isEqual;\nexports.isMediaStream = isMediaStream;\nvar _react = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar _loadScript = _interopRequireDefault(__webpack_require__(/*! load-script */ \"(ssr)/./node_modules/load-script/index.js\"));\nvar _deepmerge = _interopRequireDefault(__webpack_require__(/*! deepmerge */ \"(ssr)/./node_modules/react-player/node_modules/deepmerge/dist/cjs.js\"));\nvar _props = __webpack_require__(/*! ./props */ \"(ssr)/./node_modules/react-player/lib/props.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        \"default\": obj\n    };\n}\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function _typeof(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _createForOfIteratorHelper(o) {\n    if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n        if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) {\n            var i = 0;\n            var F = function F() {};\n            return {\n                s: F,\n                n: function n() {\n                    if (i >= o.length) return {\n                        done: true\n                    };\n                    return {\n                        done: false,\n                        value: o[i++]\n                    };\n                },\n                e: function e(_e2) {\n                    throw _e2;\n                },\n                f: F\n            };\n        }\n        throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n    }\n    var it, normalCompletion = true, didErr = false, err;\n    return {\n        s: function s() {\n            it = o[Symbol.iterator]();\n        },\n        n: function n() {\n            var step = it.next();\n            normalCompletion = step.done;\n            return step;\n        },\n        e: function e(_e3) {\n            didErr = true;\n            err = _e3;\n        },\n        f: function f() {\n            try {\n                if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n            } finally{\n                if (didErr) throw err;\n            }\n        }\n    };\n}\nfunction _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++){\n        arr2[i] = arr[i];\n    }\n    return arr2;\n}\nfunction _iterableToArrayLimit(arr, i) {\n    if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n    try {\n        for(var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\nfunction _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nvar MATCH_START_QUERY = /[?&#](?:start|t)=([0-9hms]+)/;\nvar MATCH_END_QUERY = /[?&#]end=([0-9hms]+)/;\nvar MATCH_START_STAMP = /(\\d+)(h|m|s)/g;\nvar MATCH_NUMERIC = /^\\d+$/; // Parse YouTube URL for a start time param, ie ?t=1h14m30s\n// and return the start time in seconds\nfunction parseTimeParam(url, pattern) {\n    var match = url.match(pattern);\n    if (match) {\n        var stamp = match[1];\n        if (stamp.match(MATCH_START_STAMP)) {\n            return parseTimeString(stamp);\n        }\n        if (MATCH_NUMERIC.test(stamp)) {\n            return parseInt(stamp);\n        }\n    }\n    return undefined;\n}\nfunction parseTimeString(stamp) {\n    var seconds = 0;\n    var array = MATCH_START_STAMP.exec(stamp);\n    while(array !== null){\n        var _array = array, _array2 = _slicedToArray(_array, 3), count = _array2[1], period = _array2[2];\n        if (period === \"h\") seconds += parseInt(count, 10) * 60 * 60;\n        if (period === \"m\") seconds += parseInt(count, 10) * 60;\n        if (period === \"s\") seconds += parseInt(count, 10);\n        array = MATCH_START_STAMP.exec(stamp);\n    }\n    return seconds;\n}\nfunction parseStartTime(url) {\n    return parseTimeParam(url, MATCH_START_QUERY);\n}\nfunction parseEndTime(url) {\n    return parseTimeParam(url, MATCH_END_QUERY);\n} // http://stackoverflow.com/a/38622545\nfunction randomString() {\n    return Math.random().toString(36).substr(2, 5);\n}\nfunction queryString(object) {\n    return Object.keys(object).map(function(key) {\n        return \"\".concat(key, \"=\").concat(object[key]);\n    }).join(\"&\");\n} // Util function to load an external SDK\n// or return the SDK if it is already loaded\nvar requests = {};\nfunction getSDK(url, sdkGlobal) {\n    var sdkReady = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    var isLoaded = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function() {\n        return true;\n    };\n    var fetchScript = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : _loadScript[\"default\"];\n    if (window[sdkGlobal] && isLoaded(window[sdkGlobal])) {\n        return Promise.resolve(window[sdkGlobal]);\n    }\n    return new Promise(function(resolve, reject) {\n        // If we are already loading the SDK, add the resolve and reject\n        // functions to the existing array of requests\n        if (requests[url]) {\n            requests[url].push({\n                resolve: resolve,\n                reject: reject\n            });\n            return;\n        }\n        requests[url] = [\n            {\n                resolve: resolve,\n                reject: reject\n            }\n        ];\n        var onLoaded = function onLoaded(sdk) {\n            // When loaded, resolve all pending request promises\n            requests[url].forEach(function(request) {\n                return request.resolve(sdk);\n            });\n        };\n        if (sdkReady) {\n            var previousOnReady = window[sdkReady];\n            window[sdkReady] = function() {\n                if (previousOnReady) previousOnReady();\n                onLoaded(window[sdkGlobal]);\n            };\n        }\n        fetchScript(url, function(err) {\n            if (err) {\n                // Loading the SDK failed – reject all requests and\n                // reset the array of requests for this SDK\n                requests[url].forEach(function(request) {\n                    return request.reject(err);\n                });\n                requests[url] = null;\n            } else if (!sdkReady) {\n                onLoaded(window[sdkGlobal]);\n            }\n        });\n    });\n}\nfunction getConfig(props, defaultProps, showWarning) {\n    var config = (0, _deepmerge[\"default\"])(defaultProps.config, props.config);\n    var _iterator = _createForOfIteratorHelper(_props.DEPRECATED_CONFIG_PROPS), _step;\n    try {\n        for(_iterator.s(); !(_step = _iterator.n()).done;){\n            var p = _step.value;\n            if (props[p]) {\n                var key = p.replace(/Config$/, \"\");\n                config = (0, _deepmerge[\"default\"])(config, _defineProperty({}, key, props[p]));\n                if (showWarning) {\n                    var link = \"https://github.com/CookPete/react-player#config-prop\";\n                    var message = \"ReactPlayer: %c\".concat(p, \" %cis deprecated, please use the config prop instead – \").concat(link);\n                    console.warn(message, \"font-weight: bold\", \"\");\n                }\n            }\n        }\n    } catch (err) {\n        _iterator.e(err);\n    } finally{\n        _iterator.f();\n    }\n    return config;\n}\nfunction omit(object) {\n    var _ref;\n    for(var _len = arguments.length, arrays = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        arrays[_key - 1] = arguments[_key];\n    }\n    var omitKeys = (_ref = []).concat.apply(_ref, arrays);\n    var output = {};\n    var keys = Object.keys(object);\n    for(var _i2 = 0, _keys = keys; _i2 < _keys.length; _i2++){\n        var key = _keys[_i2];\n        if (omitKeys.indexOf(key) === -1) {\n            output[key] = object[key];\n        }\n    }\n    return output;\n}\nfunction callPlayer(method) {\n    var _this$player;\n    // Util method for calling a method on this.player\n    // but guard against errors and console.warn instead\n    if (!this.player || !this.player[method]) {\n        var message = \"ReactPlayer: \".concat(this.constructor.displayName, \" player could not call %c\").concat(method, \"%c – \");\n        if (!this.player) {\n            message += \"The player was not available\";\n        } else if (!this.player[method]) {\n            message += \"The method was not available\";\n        }\n        console.warn(message, \"font-weight: bold\", \"\");\n        return null;\n    }\n    for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++){\n        args[_key2 - 1] = arguments[_key2];\n    }\n    return (_this$player = this.player)[method].apply(_this$player, args);\n}\nfunction isObject(val) {\n    return val !== null && _typeof(val) === \"object\";\n} // Deep comparison of two objects, but ignoring functions\n// and React elements, for use in shouldComponentUpdate\nfunction isEqual(a, b) {\n    if (typeof a === \"function\" && typeof b === \"function\") {\n        return true;\n    }\n    if ((0, _react.isValidElement)(a) && (0, _react.isValidElement)(b)) {\n        return true;\n    }\n    if (a instanceof Array && b instanceof Array) {\n        if (a.length !== b.length) {\n            return false;\n        }\n        for(var i = 0; i !== a.length; i++){\n            if (!isEqual(a[i], b[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    if (isObject(a) && isObject(b)) {\n        if (Object.keys(a).length !== Object.keys(b).length) {\n            return false;\n        }\n        for(var _i3 = 0, _Object$keys = Object.keys(a); _i3 < _Object$keys.length; _i3++){\n            var key = _Object$keys[_i3];\n            if (!isEqual(a[key], b[key])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return a === b;\n}\nfunction isMediaStream(url) {\n    return  false && 0;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/node_modules/deepmerge/dist/cjs.js":
/*!**********************************************************************!*\
  !*** ./node_modules/react-player/node_modules/deepmerge/dist/cjs.js ***!
  \**********************************************************************/
/***/ ((module) => {

eval("\nvar isMergeableObject = function isMergeableObject(value) {\n    return isNonNullObject(value) && !isSpecial(value);\n};\nfunction isNonNullObject(value) {\n    return !!value && typeof value === \"object\";\n}\nfunction isSpecial(value) {\n    var stringValue = Object.prototype.toString.call(value);\n    return stringValue === \"[object RegExp]\" || stringValue === \"[object Date]\" || isReactElement(value);\n}\n// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25\nvar canUseSymbol = typeof Symbol === \"function\" && Symbol.for;\nvar REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for(\"react.element\") : 0xeac7;\nfunction isReactElement(value) {\n    return value.$$typeof === REACT_ELEMENT_TYPE;\n}\nfunction emptyTarget(val) {\n    return Array.isArray(val) ? [] : {};\n}\nfunction cloneUnlessOtherwiseSpecified(value, options) {\n    return options.clone !== false && options.isMergeableObject(value) ? deepmerge(emptyTarget(value), value, options) : value;\n}\nfunction defaultArrayMerge(target, source, options) {\n    return target.concat(source).map(function(element) {\n        return cloneUnlessOtherwiseSpecified(element, options);\n    });\n}\nfunction getMergeFunction(key, options) {\n    if (!options.customMerge) {\n        return deepmerge;\n    }\n    var customMerge = options.customMerge(key);\n    return typeof customMerge === \"function\" ? customMerge : deepmerge;\n}\nfunction getEnumerableOwnPropertySymbols(target) {\n    return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(target).filter(function(symbol) {\n        return Object.propertyIsEnumerable.call(target, symbol);\n    }) : [];\n}\nfunction getKeys(target) {\n    return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));\n}\nfunction propertyIsOnObject(object, property) {\n    try {\n        return property in object;\n    } catch (_) {\n        return false;\n    }\n}\n// Protects from prototype poisoning and unexpected merging up the prototype chain.\nfunction propertyIsUnsafe(target, key) {\n    return propertyIsOnObject(target, key) // Properties are safe to merge if they don't exist in the target yet,\n     && !(Object.hasOwnProperty.call(target, key) // unsafe if they exist up the prototype chain,\n     && Object.propertyIsEnumerable.call(target, key) // and also unsafe if they're nonenumerable.\n    );\n}\nfunction mergeObject(target, source, options) {\n    var destination = {};\n    if (options.isMergeableObject(target)) {\n        getKeys(target).forEach(function(key) {\n            destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);\n        });\n    }\n    getKeys(source).forEach(function(key) {\n        if (propertyIsUnsafe(target, key)) {\n            return;\n        }\n        if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {\n            destination[key] = getMergeFunction(key, options)(target[key], source[key], options);\n        } else {\n            destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);\n        }\n    });\n    return destination;\n}\nfunction deepmerge(target, source, options) {\n    options = options || {};\n    options.arrayMerge = options.arrayMerge || defaultArrayMerge;\n    options.isMergeableObject = options.isMergeableObject || isMergeableObject;\n    // cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()\n    // implementations can use it. The caller may not replace it.\n    options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;\n    var sourceIsArray = Array.isArray(source);\n    var targetIsArray = Array.isArray(target);\n    var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;\n    if (!sourceAndTargetTypesMatch) {\n        return cloneUnlessOtherwiseSpecified(source, options);\n    } else if (sourceIsArray) {\n        return options.arrayMerge(target, source, options);\n    } else {\n        return mergeObject(target, source, options);\n    }\n}\ndeepmerge.all = function deepmergeAll(array, options) {\n    if (!Array.isArray(array)) {\n        throw new Error(\"first argument should be an array\");\n    }\n    return array.reduce(function(prev, next) {\n        return deepmerge(prev, next, options);\n    }, {});\n};\nvar deepmerge_1 = deepmerge;\nmodule.exports = deepmerge_1;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/node_modules/deepmerge/dist/cjs.js\n");

/***/ })

};
;