"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/color";
exports.ids = ["vendor-chunks/color"];
exports.modules = {

/***/ "(ssr)/./node_modules/color/index.js":
/*!*************************************!*\
  !*** ./node_modules/color/index.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar colorString = __webpack_require__(/*! color-string */ \"(ssr)/./node_modules/color-string/index.js\");\nvar convert = __webpack_require__(/*! color-convert */ \"(ssr)/./node_modules/color/node_modules/color-convert/index.js\");\nvar _slice = [].slice;\nvar skippedModels = [\n    // to be honest, I don't really feel like keyword belongs in color convert, but eh.\n    \"keyword\",\n    // gray conflicts with some method names, and has its own method defined.\n    \"gray\",\n    // shouldn't really be in color-convert either...\n    \"hex\"\n];\nvar hashedModelKeys = {};\nObject.keys(convert).forEach(function(model) {\n    hashedModelKeys[_slice.call(convert[model].labels).sort().join(\"\")] = model;\n});\nvar limiters = {};\nfunction Color(obj, model) {\n    if (!(this instanceof Color)) {\n        return new Color(obj, model);\n    }\n    if (model && model in skippedModels) {\n        model = null;\n    }\n    if (model && !(model in convert)) {\n        throw new Error(\"Unknown model: \" + model);\n    }\n    var i;\n    var channels;\n    if (obj == null) {\n        this.model = \"rgb\";\n        this.color = [\n            0,\n            0,\n            0\n        ];\n        this.valpha = 1;\n    } else if (obj instanceof Color) {\n        this.model = obj.model;\n        this.color = obj.color.slice();\n        this.valpha = obj.valpha;\n    } else if (typeof obj === \"string\") {\n        var result = colorString.get(obj);\n        if (result === null) {\n            throw new Error(\"Unable to parse color from string: \" + obj);\n        }\n        this.model = result.model;\n        channels = convert[this.model].channels;\n        this.color = result.value.slice(0, channels);\n        this.valpha = typeof result.value[channels] === \"number\" ? result.value[channels] : 1;\n    } else if (obj.length) {\n        this.model = model || \"rgb\";\n        channels = convert[this.model].channels;\n        var newArr = _slice.call(obj, 0, channels);\n        this.color = zeroArray(newArr, channels);\n        this.valpha = typeof obj[channels] === \"number\" ? obj[channels] : 1;\n    } else if (typeof obj === \"number\") {\n        // this is always RGB - can be converted later on.\n        obj &= 0xFFFFFF;\n        this.model = \"rgb\";\n        this.color = [\n            obj >> 16 & 0xFF,\n            obj >> 8 & 0xFF,\n            obj & 0xFF\n        ];\n        this.valpha = 1;\n    } else {\n        this.valpha = 1;\n        var keys = Object.keys(obj);\n        if (\"alpha\" in obj) {\n            keys.splice(keys.indexOf(\"alpha\"), 1);\n            this.valpha = typeof obj.alpha === \"number\" ? obj.alpha : 0;\n        }\n        var hashedKeys = keys.sort().join(\"\");\n        if (!(hashedKeys in hashedModelKeys)) {\n            throw new Error(\"Unable to parse color from object: \" + JSON.stringify(obj));\n        }\n        this.model = hashedModelKeys[hashedKeys];\n        var labels = convert[this.model].labels;\n        var color = [];\n        for(i = 0; i < labels.length; i++){\n            color.push(obj[labels[i]]);\n        }\n        this.color = zeroArray(color);\n    }\n    // perform limitations (clamping, etc.)\n    if (limiters[this.model]) {\n        channels = convert[this.model].channels;\n        for(i = 0; i < channels; i++){\n            var limit = limiters[this.model][i];\n            if (limit) {\n                this.color[i] = limit(this.color[i]);\n            }\n        }\n    }\n    this.valpha = Math.max(0, Math.min(1, this.valpha));\n    if (Object.freeze) {\n        Object.freeze(this);\n    }\n}\nColor.prototype = {\n    toString: function() {\n        return this.string();\n    },\n    toJSON: function() {\n        return this[this.model]();\n    },\n    string: function(places) {\n        var self = this.model in colorString.to ? this : this.rgb();\n        self = self.round(typeof places === \"number\" ? places : 1);\n        var args = self.valpha === 1 ? self.color : self.color.concat(this.valpha);\n        return colorString.to[self.model](args);\n    },\n    percentString: function(places) {\n        var self = this.rgb().round(typeof places === \"number\" ? places : 1);\n        var args = self.valpha === 1 ? self.color : self.color.concat(this.valpha);\n        return colorString.to.rgb.percent(args);\n    },\n    array: function() {\n        return this.valpha === 1 ? this.color.slice() : this.color.concat(this.valpha);\n    },\n    object: function() {\n        var result = {};\n        var channels = convert[this.model].channels;\n        var labels = convert[this.model].labels;\n        for(var i = 0; i < channels; i++){\n            result[labels[i]] = this.color[i];\n        }\n        if (this.valpha !== 1) {\n            result.alpha = this.valpha;\n        }\n        return result;\n    },\n    unitArray: function() {\n        var rgb = this.rgb().color;\n        rgb[0] /= 255;\n        rgb[1] /= 255;\n        rgb[2] /= 255;\n        if (this.valpha !== 1) {\n            rgb.push(this.valpha);\n        }\n        return rgb;\n    },\n    unitObject: function() {\n        var rgb = this.rgb().object();\n        rgb.r /= 255;\n        rgb.g /= 255;\n        rgb.b /= 255;\n        if (this.valpha !== 1) {\n            rgb.alpha = this.valpha;\n        }\n        return rgb;\n    },\n    round: function(places) {\n        places = Math.max(places || 0, 0);\n        return new Color(this.color.map(roundToPlace(places)).concat(this.valpha), this.model);\n    },\n    alpha: function(val) {\n        if (arguments.length) {\n            return new Color(this.color.concat(Math.max(0, Math.min(1, val))), this.model);\n        }\n        return this.valpha;\n    },\n    // rgb\n    red: getset(\"rgb\", 0, maxfn(255)),\n    green: getset(\"rgb\", 1, maxfn(255)),\n    blue: getset(\"rgb\", 2, maxfn(255)),\n    hue: getset([\n        \"hsl\",\n        \"hsv\",\n        \"hsl\",\n        \"hwb\",\n        \"hcg\"\n    ], 0, function(val) {\n        return (val % 360 + 360) % 360;\n    }),\n    saturationl: getset(\"hsl\", 1, maxfn(100)),\n    lightness: getset(\"hsl\", 2, maxfn(100)),\n    saturationv: getset(\"hsv\", 1, maxfn(100)),\n    value: getset(\"hsv\", 2, maxfn(100)),\n    chroma: getset(\"hcg\", 1, maxfn(100)),\n    gray: getset(\"hcg\", 2, maxfn(100)),\n    white: getset(\"hwb\", 1, maxfn(100)),\n    wblack: getset(\"hwb\", 2, maxfn(100)),\n    cyan: getset(\"cmyk\", 0, maxfn(100)),\n    magenta: getset(\"cmyk\", 1, maxfn(100)),\n    yellow: getset(\"cmyk\", 2, maxfn(100)),\n    black: getset(\"cmyk\", 3, maxfn(100)),\n    x: getset(\"xyz\", 0, maxfn(100)),\n    y: getset(\"xyz\", 1, maxfn(100)),\n    z: getset(\"xyz\", 2, maxfn(100)),\n    l: getset(\"lab\", 0, maxfn(100)),\n    a: getset(\"lab\", 1),\n    b: getset(\"lab\", 2),\n    keyword: function(val) {\n        if (arguments.length) {\n            return new Color(val);\n        }\n        return convert[this.model].keyword(this.color);\n    },\n    hex: function(val) {\n        if (arguments.length) {\n            return new Color(val);\n        }\n        return colorString.to.hex(this.rgb().round().color);\n    },\n    rgbNumber: function() {\n        var rgb = this.rgb().color;\n        return (rgb[0] & 0xFF) << 16 | (rgb[1] & 0xFF) << 8 | rgb[2] & 0xFF;\n    },\n    luminosity: function() {\n        // http://www.w3.org/TR/WCAG20/#relativeluminancedef\n        var rgb = this.rgb().color;\n        var lum = [];\n        for(var i = 0; i < rgb.length; i++){\n            var chan = rgb[i] / 255;\n            lum[i] = chan <= 0.03928 ? chan / 12.92 : Math.pow((chan + 0.055) / 1.055, 2.4);\n        }\n        return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];\n    },\n    contrast: function(color2) {\n        // http://www.w3.org/TR/WCAG20/#contrast-ratiodef\n        var lum1 = this.luminosity();\n        var lum2 = color2.luminosity();\n        if (lum1 > lum2) {\n            return (lum1 + 0.05) / (lum2 + 0.05);\n        }\n        return (lum2 + 0.05) / (lum1 + 0.05);\n    },\n    level: function(color2) {\n        var contrastRatio = this.contrast(color2);\n        if (contrastRatio >= 7.1) {\n            return \"AAA\";\n        }\n        return contrastRatio >= 4.5 ? \"AA\" : \"\";\n    },\n    isDark: function() {\n        // YIQ equation from http://24ways.org/2010/calculating-color-contrast\n        var rgb = this.rgb().color;\n        var yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;\n        return yiq < 128;\n    },\n    isLight: function() {\n        return !this.isDark();\n    },\n    negate: function() {\n        var rgb = this.rgb();\n        for(var i = 0; i < 3; i++){\n            rgb.color[i] = 255 - rgb.color[i];\n        }\n        return rgb;\n    },\n    lighten: function(ratio) {\n        var hsl = this.hsl();\n        hsl.color[2] += hsl.color[2] * ratio;\n        return hsl;\n    },\n    darken: function(ratio) {\n        var hsl = this.hsl();\n        hsl.color[2] -= hsl.color[2] * ratio;\n        return hsl;\n    },\n    saturate: function(ratio) {\n        var hsl = this.hsl();\n        hsl.color[1] += hsl.color[1] * ratio;\n        return hsl;\n    },\n    desaturate: function(ratio) {\n        var hsl = this.hsl();\n        hsl.color[1] -= hsl.color[1] * ratio;\n        return hsl;\n    },\n    whiten: function(ratio) {\n        var hwb = this.hwb();\n        hwb.color[1] += hwb.color[1] * ratio;\n        return hwb;\n    },\n    blacken: function(ratio) {\n        var hwb = this.hwb();\n        hwb.color[2] += hwb.color[2] * ratio;\n        return hwb;\n    },\n    grayscale: function() {\n        // http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale\n        var rgb = this.rgb().color;\n        var val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;\n        return Color.rgb(val, val, val);\n    },\n    fade: function(ratio) {\n        return this.alpha(this.valpha - this.valpha * ratio);\n    },\n    opaquer: function(ratio) {\n        return this.alpha(this.valpha + this.valpha * ratio);\n    },\n    rotate: function(degrees) {\n        var hsl = this.hsl();\n        var hue = hsl.color[0];\n        hue = (hue + degrees) % 360;\n        hue = hue < 0 ? 360 + hue : hue;\n        hsl.color[0] = hue;\n        return hsl;\n    },\n    mix: function(mixinColor, weight) {\n        // ported from sass implementation in C\n        // https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209\n        if (!mixinColor || !mixinColor.rgb) {\n            throw new Error('Argument to \"mix\" was not a Color instance, but rather an instance of ' + typeof mixinColor);\n        }\n        var color1 = mixinColor.rgb();\n        var color2 = this.rgb();\n        var p = weight === undefined ? 0.5 : weight;\n        var w = 2 * p - 1;\n        var a = color1.alpha() - color2.alpha();\n        var w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n        var w2 = 1 - w1;\n        return Color.rgb(w1 * color1.red() + w2 * color2.red(), w1 * color1.green() + w2 * color2.green(), w1 * color1.blue() + w2 * color2.blue(), color1.alpha() * p + color2.alpha() * (1 - p));\n    }\n};\n// model conversion methods and static constructors\nObject.keys(convert).forEach(function(model) {\n    if (skippedModels.indexOf(model) !== -1) {\n        return;\n    }\n    var channels = convert[model].channels;\n    // conversion methods\n    Color.prototype[model] = function() {\n        if (this.model === model) {\n            return new Color(this);\n        }\n        if (arguments.length) {\n            return new Color(arguments, model);\n        }\n        var newAlpha = typeof arguments[channels] === \"number\" ? channels : this.valpha;\n        return new Color(assertArray(convert[this.model][model].raw(this.color)).concat(newAlpha), model);\n    };\n    // 'static' construction methods\n    Color[model] = function(color) {\n        if (typeof color === \"number\") {\n            color = zeroArray(_slice.call(arguments), channels);\n        }\n        return new Color(color, model);\n    };\n});\nfunction roundTo(num, places) {\n    return Number(num.toFixed(places));\n}\nfunction roundToPlace(places) {\n    return function(num) {\n        return roundTo(num, places);\n    };\n}\nfunction getset(model, channel, modifier) {\n    model = Array.isArray(model) ? model : [\n        model\n    ];\n    model.forEach(function(m) {\n        (limiters[m] || (limiters[m] = []))[channel] = modifier;\n    });\n    model = model[0];\n    return function(val) {\n        var result;\n        if (arguments.length) {\n            if (modifier) {\n                val = modifier(val);\n            }\n            result = this[model]();\n            result.color[channel] = val;\n            return result;\n        }\n        result = this[model]().color[channel];\n        if (modifier) {\n            result = modifier(result);\n        }\n        return result;\n    };\n}\nfunction maxfn(max) {\n    return function(v) {\n        return Math.max(0, Math.min(max, v));\n    };\n}\nfunction assertArray(val) {\n    return Array.isArray(val) ? val : [\n        val\n    ];\n}\nfunction zeroArray(arr, length) {\n    for(var i = 0; i < length; i++){\n        if (typeof arr[i] !== \"number\") {\n            arr[i] = 0;\n        }\n    }\n    return arr;\n}\nmodule.exports = Color;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/color/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/color/node_modules/color-convert/conversions.js":
/*!**********************************************************************!*\
  !*** ./node_modules/color/node_modules/color-convert/conversions.js ***!
  \**********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* MIT license */ \nvar cssKeywords = __webpack_require__(/*! color-name */ \"(ssr)/./node_modules/color/node_modules/color-name/index.js\");\n// NOTE: conversions should only return primitive values (i.e. arrays, or\n//       values that give correct `typeof` results).\n//       do not use box values types (i.e. Number(), String(), etc.)\nvar reverseKeywords = {};\nfor(var key in cssKeywords){\n    if (cssKeywords.hasOwnProperty(key)) {\n        reverseKeywords[cssKeywords[key]] = key;\n    }\n}\nvar convert = module.exports = {\n    rgb: {\n        channels: 3,\n        labels: \"rgb\"\n    },\n    hsl: {\n        channels: 3,\n        labels: \"hsl\"\n    },\n    hsv: {\n        channels: 3,\n        labels: \"hsv\"\n    },\n    hwb: {\n        channels: 3,\n        labels: \"hwb\"\n    },\n    cmyk: {\n        channels: 4,\n        labels: \"cmyk\"\n    },\n    xyz: {\n        channels: 3,\n        labels: \"xyz\"\n    },\n    lab: {\n        channels: 3,\n        labels: \"lab\"\n    },\n    lch: {\n        channels: 3,\n        labels: \"lch\"\n    },\n    hex: {\n        channels: 1,\n        labels: [\n            \"hex\"\n        ]\n    },\n    keyword: {\n        channels: 1,\n        labels: [\n            \"keyword\"\n        ]\n    },\n    ansi16: {\n        channels: 1,\n        labels: [\n            \"ansi16\"\n        ]\n    },\n    ansi256: {\n        channels: 1,\n        labels: [\n            \"ansi256\"\n        ]\n    },\n    hcg: {\n        channels: 3,\n        labels: [\n            \"h\",\n            \"c\",\n            \"g\"\n        ]\n    },\n    apple: {\n        channels: 3,\n        labels: [\n            \"r16\",\n            \"g16\",\n            \"b16\"\n        ]\n    },\n    gray: {\n        channels: 1,\n        labels: [\n            \"gray\"\n        ]\n    }\n};\n// hide .channels and .labels properties\nfor(var model in convert){\n    if (convert.hasOwnProperty(model)) {\n        if (!(\"channels\" in convert[model])) {\n            throw new Error(\"missing channels property: \" + model);\n        }\n        if (!(\"labels\" in convert[model])) {\n            throw new Error(\"missing channel labels property: \" + model);\n        }\n        if (convert[model].labels.length !== convert[model].channels) {\n            throw new Error(\"channel and label counts mismatch: \" + model);\n        }\n        var channels = convert[model].channels;\n        var labels = convert[model].labels;\n        delete convert[model].channels;\n        delete convert[model].labels;\n        Object.defineProperty(convert[model], \"channels\", {\n            value: channels\n        });\n        Object.defineProperty(convert[model], \"labels\", {\n            value: labels\n        });\n    }\n}\nconvert.rgb.hsl = function(rgb) {\n    var r = rgb[0] / 255;\n    var g = rgb[1] / 255;\n    var b = rgb[2] / 255;\n    var min = Math.min(r, g, b);\n    var max = Math.max(r, g, b);\n    var delta = max - min;\n    var h;\n    var s;\n    var l;\n    if (max === min) {\n        h = 0;\n    } else if (r === max) {\n        h = (g - b) / delta;\n    } else if (g === max) {\n        h = 2 + (b - r) / delta;\n    } else if (b === max) {\n        h = 4 + (r - g) / delta;\n    }\n    h = Math.min(h * 60, 360);\n    if (h < 0) {\n        h += 360;\n    }\n    l = (min + max) / 2;\n    if (max === min) {\n        s = 0;\n    } else if (l <= 0.5) {\n        s = delta / (max + min);\n    } else {\n        s = delta / (2 - max - min);\n    }\n    return [\n        h,\n        s * 100,\n        l * 100\n    ];\n};\nconvert.rgb.hsv = function(rgb) {\n    var rdif;\n    var gdif;\n    var bdif;\n    var h;\n    var s;\n    var r = rgb[0] / 255;\n    var g = rgb[1] / 255;\n    var b = rgb[2] / 255;\n    var v = Math.max(r, g, b);\n    var diff = v - Math.min(r, g, b);\n    var diffc = function(c) {\n        return (v - c) / 6 / diff + 1 / 2;\n    };\n    if (diff === 0) {\n        h = s = 0;\n    } else {\n        s = diff / v;\n        rdif = diffc(r);\n        gdif = diffc(g);\n        bdif = diffc(b);\n        if (r === v) {\n            h = bdif - gdif;\n        } else if (g === v) {\n            h = 1 / 3 + rdif - bdif;\n        } else if (b === v) {\n            h = 2 / 3 + gdif - rdif;\n        }\n        if (h < 0) {\n            h += 1;\n        } else if (h > 1) {\n            h -= 1;\n        }\n    }\n    return [\n        h * 360,\n        s * 100,\n        v * 100\n    ];\n};\nconvert.rgb.hwb = function(rgb) {\n    var r = rgb[0];\n    var g = rgb[1];\n    var b = rgb[2];\n    var h = convert.rgb.hsl(rgb)[0];\n    var w = 1 / 255 * Math.min(r, Math.min(g, b));\n    b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));\n    return [\n        h,\n        w * 100,\n        b * 100\n    ];\n};\nconvert.rgb.cmyk = function(rgb) {\n    var r = rgb[0] / 255;\n    var g = rgb[1] / 255;\n    var b = rgb[2] / 255;\n    var c;\n    var m;\n    var y;\n    var k;\n    k = Math.min(1 - r, 1 - g, 1 - b);\n    c = (1 - r - k) / (1 - k) || 0;\n    m = (1 - g - k) / (1 - k) || 0;\n    y = (1 - b - k) / (1 - k) || 0;\n    return [\n        c * 100,\n        m * 100,\n        y * 100,\n        k * 100\n    ];\n};\n/**\n * See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance\n * */ function comparativeDistance(x, y) {\n    return Math.pow(x[0] - y[0], 2) + Math.pow(x[1] - y[1], 2) + Math.pow(x[2] - y[2], 2);\n}\nconvert.rgb.keyword = function(rgb) {\n    var reversed = reverseKeywords[rgb];\n    if (reversed) {\n        return reversed;\n    }\n    var currentClosestDistance = Infinity;\n    var currentClosestKeyword;\n    for(var keyword in cssKeywords){\n        if (cssKeywords.hasOwnProperty(keyword)) {\n            var value = cssKeywords[keyword];\n            // Compute comparative distance\n            var distance = comparativeDistance(rgb, value);\n            // Check if its less, if so set as closest\n            if (distance < currentClosestDistance) {\n                currentClosestDistance = distance;\n                currentClosestKeyword = keyword;\n            }\n        }\n    }\n    return currentClosestKeyword;\n};\nconvert.keyword.rgb = function(keyword) {\n    return cssKeywords[keyword];\n};\nconvert.rgb.xyz = function(rgb) {\n    var r = rgb[0] / 255;\n    var g = rgb[1] / 255;\n    var b = rgb[2] / 255;\n    // assume sRGB\n    r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;\n    g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;\n    b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;\n    var x = r * 0.4124 + g * 0.3576 + b * 0.1805;\n    var y = r * 0.2126 + g * 0.7152 + b * 0.0722;\n    var z = r * 0.0193 + g * 0.1192 + b * 0.9505;\n    return [\n        x * 100,\n        y * 100,\n        z * 100\n    ];\n};\nconvert.rgb.lab = function(rgb) {\n    var xyz = convert.rgb.xyz(rgb);\n    var x = xyz[0];\n    var y = xyz[1];\n    var z = xyz[2];\n    var l;\n    var a;\n    var b;\n    x /= 95.047;\n    y /= 100;\n    z /= 108.883;\n    x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;\n    y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;\n    z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;\n    l = 116 * y - 16;\n    a = 500 * (x - y);\n    b = 200 * (y - z);\n    return [\n        l,\n        a,\n        b\n    ];\n};\nconvert.hsl.rgb = function(hsl) {\n    var h = hsl[0] / 360;\n    var s = hsl[1] / 100;\n    var l = hsl[2] / 100;\n    var t1;\n    var t2;\n    var t3;\n    var rgb;\n    var val;\n    if (s === 0) {\n        val = l * 255;\n        return [\n            val,\n            val,\n            val\n        ];\n    }\n    if (l < 0.5) {\n        t2 = l * (1 + s);\n    } else {\n        t2 = l + s - l * s;\n    }\n    t1 = 2 * l - t2;\n    rgb = [\n        0,\n        0,\n        0\n    ];\n    for(var i = 0; i < 3; i++){\n        t3 = h + 1 / 3 * -(i - 1);\n        if (t3 < 0) {\n            t3++;\n        }\n        if (t3 > 1) {\n            t3--;\n        }\n        if (6 * t3 < 1) {\n            val = t1 + (t2 - t1) * 6 * t3;\n        } else if (2 * t3 < 1) {\n            val = t2;\n        } else if (3 * t3 < 2) {\n            val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;\n        } else {\n            val = t1;\n        }\n        rgb[i] = val * 255;\n    }\n    return rgb;\n};\nconvert.hsl.hsv = function(hsl) {\n    var h = hsl[0];\n    var s = hsl[1] / 100;\n    var l = hsl[2] / 100;\n    var smin = s;\n    var lmin = Math.max(l, 0.01);\n    var sv;\n    var v;\n    l *= 2;\n    s *= l <= 1 ? l : 2 - l;\n    smin *= lmin <= 1 ? lmin : 2 - lmin;\n    v = (l + s) / 2;\n    sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);\n    return [\n        h,\n        sv * 100,\n        v * 100\n    ];\n};\nconvert.hsv.rgb = function(hsv) {\n    var h = hsv[0] / 60;\n    var s = hsv[1] / 100;\n    var v = hsv[2] / 100;\n    var hi = Math.floor(h) % 6;\n    var f = h - Math.floor(h);\n    var p = 255 * v * (1 - s);\n    var q = 255 * v * (1 - s * f);\n    var t = 255 * v * (1 - s * (1 - f));\n    v *= 255;\n    switch(hi){\n        case 0:\n            return [\n                v,\n                t,\n                p\n            ];\n        case 1:\n            return [\n                q,\n                v,\n                p\n            ];\n        case 2:\n            return [\n                p,\n                v,\n                t\n            ];\n        case 3:\n            return [\n                p,\n                q,\n                v\n            ];\n        case 4:\n            return [\n                t,\n                p,\n                v\n            ];\n        case 5:\n            return [\n                v,\n                p,\n                q\n            ];\n    }\n};\nconvert.hsv.hsl = function(hsv) {\n    var h = hsv[0];\n    var s = hsv[1] / 100;\n    var v = hsv[2] / 100;\n    var vmin = Math.max(v, 0.01);\n    var lmin;\n    var sl;\n    var l;\n    l = (2 - s) * v;\n    lmin = (2 - s) * vmin;\n    sl = s * vmin;\n    sl /= lmin <= 1 ? lmin : 2 - lmin;\n    sl = sl || 0;\n    l /= 2;\n    return [\n        h,\n        sl * 100,\n        l * 100\n    ];\n};\n// http://dev.w3.org/csswg/css-color/#hwb-to-rgb\nconvert.hwb.rgb = function(hwb) {\n    var h = hwb[0] / 360;\n    var wh = hwb[1] / 100;\n    var bl = hwb[2] / 100;\n    var ratio = wh + bl;\n    var i;\n    var v;\n    var f;\n    var n;\n    // wh + bl cant be > 1\n    if (ratio > 1) {\n        wh /= ratio;\n        bl /= ratio;\n    }\n    i = Math.floor(6 * h);\n    v = 1 - bl;\n    f = 6 * h - i;\n    if ((i & 0x01) !== 0) {\n        f = 1 - f;\n    }\n    n = wh + f * (v - wh); // linear interpolation\n    var r;\n    var g;\n    var b;\n    switch(i){\n        default:\n        case 6:\n        case 0:\n            r = v;\n            g = n;\n            b = wh;\n            break;\n        case 1:\n            r = n;\n            g = v;\n            b = wh;\n            break;\n        case 2:\n            r = wh;\n            g = v;\n            b = n;\n            break;\n        case 3:\n            r = wh;\n            g = n;\n            b = v;\n            break;\n        case 4:\n            r = n;\n            g = wh;\n            b = v;\n            break;\n        case 5:\n            r = v;\n            g = wh;\n            b = n;\n            break;\n    }\n    return [\n        r * 255,\n        g * 255,\n        b * 255\n    ];\n};\nconvert.cmyk.rgb = function(cmyk) {\n    var c = cmyk[0] / 100;\n    var m = cmyk[1] / 100;\n    var y = cmyk[2] / 100;\n    var k = cmyk[3] / 100;\n    var r;\n    var g;\n    var b;\n    r = 1 - Math.min(1, c * (1 - k) + k);\n    g = 1 - Math.min(1, m * (1 - k) + k);\n    b = 1 - Math.min(1, y * (1 - k) + k);\n    return [\n        r * 255,\n        g * 255,\n        b * 255\n    ];\n};\nconvert.xyz.rgb = function(xyz) {\n    var x = xyz[0] / 100;\n    var y = xyz[1] / 100;\n    var z = xyz[2] / 100;\n    var r;\n    var g;\n    var b;\n    r = x * 3.2406 + y * -1.5372 + z * -0.4986;\n    g = x * -0.9689 + y * 1.8758 + z * 0.0415;\n    b = x * 0.0557 + y * -0.2040 + z * 1.0570;\n    // assume sRGB\n    r = r > 0.0031308 ? 1.055 * Math.pow(r, 1.0 / 2.4) - 0.055 : r * 12.92;\n    g = g > 0.0031308 ? 1.055 * Math.pow(g, 1.0 / 2.4) - 0.055 : g * 12.92;\n    b = b > 0.0031308 ? 1.055 * Math.pow(b, 1.0 / 2.4) - 0.055 : b * 12.92;\n    r = Math.min(Math.max(0, r), 1);\n    g = Math.min(Math.max(0, g), 1);\n    b = Math.min(Math.max(0, b), 1);\n    return [\n        r * 255,\n        g * 255,\n        b * 255\n    ];\n};\nconvert.xyz.lab = function(xyz) {\n    var x = xyz[0];\n    var y = xyz[1];\n    var z = xyz[2];\n    var l;\n    var a;\n    var b;\n    x /= 95.047;\n    y /= 100;\n    z /= 108.883;\n    x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;\n    y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;\n    z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;\n    l = 116 * y - 16;\n    a = 500 * (x - y);\n    b = 200 * (y - z);\n    return [\n        l,\n        a,\n        b\n    ];\n};\nconvert.lab.xyz = function(lab) {\n    var l = lab[0];\n    var a = lab[1];\n    var b = lab[2];\n    var x;\n    var y;\n    var z;\n    y = (l + 16) / 116;\n    x = a / 500 + y;\n    z = y - b / 200;\n    var y2 = Math.pow(y, 3);\n    var x2 = Math.pow(x, 3);\n    var z2 = Math.pow(z, 3);\n    y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;\n    x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;\n    z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;\n    x *= 95.047;\n    y *= 100;\n    z *= 108.883;\n    return [\n        x,\n        y,\n        z\n    ];\n};\nconvert.lab.lch = function(lab) {\n    var l = lab[0];\n    var a = lab[1];\n    var b = lab[2];\n    var hr;\n    var h;\n    var c;\n    hr = Math.atan2(b, a);\n    h = hr * 360 / 2 / Math.PI;\n    if (h < 0) {\n        h += 360;\n    }\n    c = Math.sqrt(a * a + b * b);\n    return [\n        l,\n        c,\n        h\n    ];\n};\nconvert.lch.lab = function(lch) {\n    var l = lch[0];\n    var c = lch[1];\n    var h = lch[2];\n    var a;\n    var b;\n    var hr;\n    hr = h / 360 * 2 * Math.PI;\n    a = c * Math.cos(hr);\n    b = c * Math.sin(hr);\n    return [\n        l,\n        a,\n        b\n    ];\n};\nconvert.rgb.ansi16 = function(args) {\n    var r = args[0];\n    var g = args[1];\n    var b = args[2];\n    var value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2]; // hsv -> ansi16 optimization\n    value = Math.round(value / 50);\n    if (value === 0) {\n        return 30;\n    }\n    var ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));\n    if (value === 2) {\n        ansi += 60;\n    }\n    return ansi;\n};\nconvert.hsv.ansi16 = function(args) {\n    // optimization here; we already know the value and don't need to get\n    // it converted for us.\n    return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);\n};\nconvert.rgb.ansi256 = function(args) {\n    var r = args[0];\n    var g = args[1];\n    var b = args[2];\n    // we use the extended greyscale palette here, with the exception of\n    // black and white. normal palette only has 4 greyscale shades.\n    if (r === g && g === b) {\n        if (r < 8) {\n            return 16;\n        }\n        if (r > 248) {\n            return 231;\n        }\n        return Math.round((r - 8) / 247 * 24) + 232;\n    }\n    var ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);\n    return ansi;\n};\nconvert.ansi16.rgb = function(args) {\n    var color = args % 10;\n    // handle greyscale\n    if (color === 0 || color === 7) {\n        if (args > 50) {\n            color += 3.5;\n        }\n        color = color / 10.5 * 255;\n        return [\n            color,\n            color,\n            color\n        ];\n    }\n    var mult = (~~(args > 50) + 1) * 0.5;\n    var r = (color & 1) * mult * 255;\n    var g = (color >> 1 & 1) * mult * 255;\n    var b = (color >> 2 & 1) * mult * 255;\n    return [\n        r,\n        g,\n        b\n    ];\n};\nconvert.ansi256.rgb = function(args) {\n    // handle greyscale\n    if (args >= 232) {\n        var c = (args - 232) * 10 + 8;\n        return [\n            c,\n            c,\n            c\n        ];\n    }\n    args -= 16;\n    var rem;\n    var r = Math.floor(args / 36) / 5 * 255;\n    var g = Math.floor((rem = args % 36) / 6) / 5 * 255;\n    var b = rem % 6 / 5 * 255;\n    return [\n        r,\n        g,\n        b\n    ];\n};\nconvert.rgb.hex = function(args) {\n    var integer = ((Math.round(args[0]) & 0xFF) << 16) + ((Math.round(args[1]) & 0xFF) << 8) + (Math.round(args[2]) & 0xFF);\n    var string = integer.toString(16).toUpperCase();\n    return \"000000\".substring(string.length) + string;\n};\nconvert.hex.rgb = function(args) {\n    var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);\n    if (!match) {\n        return [\n            0,\n            0,\n            0\n        ];\n    }\n    var colorString = match[0];\n    if (match[0].length === 3) {\n        colorString = colorString.split(\"\").map(function(char) {\n            return char + char;\n        }).join(\"\");\n    }\n    var integer = parseInt(colorString, 16);\n    var r = integer >> 16 & 0xFF;\n    var g = integer >> 8 & 0xFF;\n    var b = integer & 0xFF;\n    return [\n        r,\n        g,\n        b\n    ];\n};\nconvert.rgb.hcg = function(rgb) {\n    var r = rgb[0] / 255;\n    var g = rgb[1] / 255;\n    var b = rgb[2] / 255;\n    var max = Math.max(Math.max(r, g), b);\n    var min = Math.min(Math.min(r, g), b);\n    var chroma = max - min;\n    var grayscale;\n    var hue;\n    if (chroma < 1) {\n        grayscale = min / (1 - chroma);\n    } else {\n        grayscale = 0;\n    }\n    if (chroma <= 0) {\n        hue = 0;\n    } else if (max === r) {\n        hue = (g - b) / chroma % 6;\n    } else if (max === g) {\n        hue = 2 + (b - r) / chroma;\n    } else {\n        hue = 4 + (r - g) / chroma + 4;\n    }\n    hue /= 6;\n    hue %= 1;\n    return [\n        hue * 360,\n        chroma * 100,\n        grayscale * 100\n    ];\n};\nconvert.hsl.hcg = function(hsl) {\n    var s = hsl[1] / 100;\n    var l = hsl[2] / 100;\n    var c = 1;\n    var f = 0;\n    if (l < 0.5) {\n        c = 2.0 * s * l;\n    } else {\n        c = 2.0 * s * (1.0 - l);\n    }\n    if (c < 1.0) {\n        f = (l - 0.5 * c) / (1.0 - c);\n    }\n    return [\n        hsl[0],\n        c * 100,\n        f * 100\n    ];\n};\nconvert.hsv.hcg = function(hsv) {\n    var s = hsv[1] / 100;\n    var v = hsv[2] / 100;\n    var c = s * v;\n    var f = 0;\n    if (c < 1.0) {\n        f = (v - c) / (1 - c);\n    }\n    return [\n        hsv[0],\n        c * 100,\n        f * 100\n    ];\n};\nconvert.hcg.rgb = function(hcg) {\n    var h = hcg[0] / 360;\n    var c = hcg[1] / 100;\n    var g = hcg[2] / 100;\n    if (c === 0.0) {\n        return [\n            g * 255,\n            g * 255,\n            g * 255\n        ];\n    }\n    var pure = [\n        0,\n        0,\n        0\n    ];\n    var hi = h % 1 * 6;\n    var v = hi % 1;\n    var w = 1 - v;\n    var mg = 0;\n    switch(Math.floor(hi)){\n        case 0:\n            pure[0] = 1;\n            pure[1] = v;\n            pure[2] = 0;\n            break;\n        case 1:\n            pure[0] = w;\n            pure[1] = 1;\n            pure[2] = 0;\n            break;\n        case 2:\n            pure[0] = 0;\n            pure[1] = 1;\n            pure[2] = v;\n            break;\n        case 3:\n            pure[0] = 0;\n            pure[1] = w;\n            pure[2] = 1;\n            break;\n        case 4:\n            pure[0] = v;\n            pure[1] = 0;\n            pure[2] = 1;\n            break;\n        default:\n            pure[0] = 1;\n            pure[1] = 0;\n            pure[2] = w;\n    }\n    mg = (1.0 - c) * g;\n    return [\n        (c * pure[0] + mg) * 255,\n        (c * pure[1] + mg) * 255,\n        (c * pure[2] + mg) * 255\n    ];\n};\nconvert.hcg.hsv = function(hcg) {\n    var c = hcg[1] / 100;\n    var g = hcg[2] / 100;\n    var v = c + g * (1.0 - c);\n    var f = 0;\n    if (v > 0.0) {\n        f = c / v;\n    }\n    return [\n        hcg[0],\n        f * 100,\n        v * 100\n    ];\n};\nconvert.hcg.hsl = function(hcg) {\n    var c = hcg[1] / 100;\n    var g = hcg[2] / 100;\n    var l = g * (1.0 - c) + 0.5 * c;\n    var s = 0;\n    if (l > 0.0 && l < 0.5) {\n        s = c / (2 * l);\n    } else if (l >= 0.5 && l < 1.0) {\n        s = c / (2 * (1 - l));\n    }\n    return [\n        hcg[0],\n        s * 100,\n        l * 100\n    ];\n};\nconvert.hcg.hwb = function(hcg) {\n    var c = hcg[1] / 100;\n    var g = hcg[2] / 100;\n    var v = c + g * (1.0 - c);\n    return [\n        hcg[0],\n        (v - c) * 100,\n        (1 - v) * 100\n    ];\n};\nconvert.hwb.hcg = function(hwb) {\n    var w = hwb[1] / 100;\n    var b = hwb[2] / 100;\n    var v = 1 - b;\n    var c = v - w;\n    var g = 0;\n    if (c < 1) {\n        g = (v - c) / (1 - c);\n    }\n    return [\n        hwb[0],\n        c * 100,\n        g * 100\n    ];\n};\nconvert.apple.rgb = function(apple) {\n    return [\n        apple[0] / 65535 * 255,\n        apple[1] / 65535 * 255,\n        apple[2] / 65535 * 255\n    ];\n};\nconvert.rgb.apple = function(rgb) {\n    return [\n        rgb[0] / 255 * 65535,\n        rgb[1] / 255 * 65535,\n        rgb[2] / 255 * 65535\n    ];\n};\nconvert.gray.rgb = function(args) {\n    return [\n        args[0] / 100 * 255,\n        args[0] / 100 * 255,\n        args[0] / 100 * 255\n    ];\n};\nconvert.gray.hsl = convert.gray.hsv = function(args) {\n    return [\n        0,\n        0,\n        args[0]\n    ];\n};\nconvert.gray.hwb = function(gray) {\n    return [\n        0,\n        100,\n        gray[0]\n    ];\n};\nconvert.gray.cmyk = function(gray) {\n    return [\n        0,\n        0,\n        0,\n        gray[0]\n    ];\n};\nconvert.gray.lab = function(gray) {\n    return [\n        gray[0],\n        0,\n        0\n    ];\n};\nconvert.gray.hex = function(gray) {\n    var val = Math.round(gray[0] / 100 * 255) & 0xFF;\n    var integer = (val << 16) + (val << 8) + val;\n    var string = integer.toString(16).toUpperCase();\n    return \"000000\".substring(string.length) + string;\n};\nconvert.rgb.gray = function(rgb) {\n    var val = (rgb[0] + rgb[1] + rgb[2]) / 3;\n    return [\n        val / 255 * 100\n    ];\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/color/node_modules/color-convert/conversions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/color/node_modules/color-convert/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/color/node_modules/color-convert/index.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar conversions = __webpack_require__(/*! ./conversions */ \"(ssr)/./node_modules/color/node_modules/color-convert/conversions.js\");\nvar route = __webpack_require__(/*! ./route */ \"(ssr)/./node_modules/color/node_modules/color-convert/route.js\");\nvar convert = {};\nvar models = Object.keys(conversions);\nfunction wrapRaw(fn) {\n    var wrappedFn = function(args) {\n        if (args === undefined || args === null) {\n            return args;\n        }\n        if (arguments.length > 1) {\n            args = Array.prototype.slice.call(arguments);\n        }\n        return fn(args);\n    };\n    // preserve .conversion property if there is one\n    if (\"conversion\" in fn) {\n        wrappedFn.conversion = fn.conversion;\n    }\n    return wrappedFn;\n}\nfunction wrapRounded(fn) {\n    var wrappedFn = function(args) {\n        if (args === undefined || args === null) {\n            return args;\n        }\n        if (arguments.length > 1) {\n            args = Array.prototype.slice.call(arguments);\n        }\n        var result = fn(args);\n        // we're assuming the result is an array here.\n        // see notice in conversions.js; don't use box types\n        // in conversion functions.\n        if (typeof result === \"object\") {\n            for(var len = result.length, i = 0; i < len; i++){\n                result[i] = Math.round(result[i]);\n            }\n        }\n        return result;\n    };\n    // preserve .conversion property if there is one\n    if (\"conversion\" in fn) {\n        wrappedFn.conversion = fn.conversion;\n    }\n    return wrappedFn;\n}\nmodels.forEach(function(fromModel) {\n    convert[fromModel] = {};\n    Object.defineProperty(convert[fromModel], \"channels\", {\n        value: conversions[fromModel].channels\n    });\n    Object.defineProperty(convert[fromModel], \"labels\", {\n        value: conversions[fromModel].labels\n    });\n    var routes = route(fromModel);\n    var routeModels = Object.keys(routes);\n    routeModels.forEach(function(toModel) {\n        var fn = routes[toModel];\n        convert[fromModel][toModel] = wrapRounded(fn);\n        convert[fromModel][toModel].raw = wrapRaw(fn);\n    });\n});\nmodule.exports = convert;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29sb3Ivbm9kZV9tb2R1bGVzL2NvbG9yLWNvbnZlcnQvaW5kZXguanMiLCJtYXBwaW5ncyI6IjtBQUFBLElBQUlBLGNBQWNDLG1CQUFPQSxDQUFDO0FBQzFCLElBQUlDLFFBQVFELG1CQUFPQSxDQUFDO0FBRXBCLElBQUlFLFVBQVUsQ0FBQztBQUVmLElBQUlDLFNBQVNDLE9BQU9DLElBQUksQ0FBQ047QUFFekIsU0FBU08sUUFBUUMsRUFBRTtJQUNsQixJQUFJQyxZQUFZLFNBQVVDLElBQUk7UUFDN0IsSUFBSUEsU0FBU0MsYUFBYUQsU0FBUyxNQUFNO1lBQ3hDLE9BQU9BO1FBQ1I7UUFFQSxJQUFJRSxVQUFVQyxNQUFNLEdBQUcsR0FBRztZQUN6QkgsT0FBT0ksTUFBTUMsU0FBUyxDQUFDQyxLQUFLLENBQUNDLElBQUksQ0FBQ0w7UUFDbkM7UUFFQSxPQUFPSixHQUFHRTtJQUNYO0lBRUEsZ0RBQWdEO0lBQ2hELElBQUksZ0JBQWdCRixJQUFJO1FBQ3ZCQyxVQUFVUyxVQUFVLEdBQUdWLEdBQUdVLFVBQVU7SUFDckM7SUFFQSxPQUFPVDtBQUNSO0FBRUEsU0FBU1UsWUFBWVgsRUFBRTtJQUN0QixJQUFJQyxZQUFZLFNBQVVDLElBQUk7UUFDN0IsSUFBSUEsU0FBU0MsYUFBYUQsU0FBUyxNQUFNO1lBQ3hDLE9BQU9BO1FBQ1I7UUFFQSxJQUFJRSxVQUFVQyxNQUFNLEdBQUcsR0FBRztZQUN6QkgsT0FBT0ksTUFBTUMsU0FBUyxDQUFDQyxLQUFLLENBQUNDLElBQUksQ0FBQ0w7UUFDbkM7UUFFQSxJQUFJUSxTQUFTWixHQUFHRTtRQUVoQiw4Q0FBOEM7UUFDOUMsb0RBQW9EO1FBQ3BELDJCQUEyQjtRQUMzQixJQUFJLE9BQU9VLFdBQVcsVUFBVTtZQUMvQixJQUFLLElBQUlDLE1BQU1ELE9BQU9QLE1BQU0sRUFBRVMsSUFBSSxHQUFHQSxJQUFJRCxLQUFLQyxJQUFLO2dCQUNsREYsTUFBTSxDQUFDRSxFQUFFLEdBQUdDLEtBQUtDLEtBQUssQ0FBQ0osTUFBTSxDQUFDRSxFQUFFO1lBQ2pDO1FBQ0Q7UUFFQSxPQUFPRjtJQUNSO0lBRUEsZ0RBQWdEO0lBQ2hELElBQUksZ0JBQWdCWixJQUFJO1FBQ3ZCQyxVQUFVUyxVQUFVLEdBQUdWLEdBQUdVLFVBQVU7SUFDckM7SUFFQSxPQUFPVDtBQUNSO0FBRUFMLE9BQU9xQixPQUFPLENBQUMsU0FBVUMsU0FBUztJQUNqQ3ZCLE9BQU8sQ0FBQ3VCLFVBQVUsR0FBRyxDQUFDO0lBRXRCckIsT0FBT3NCLGNBQWMsQ0FBQ3hCLE9BQU8sQ0FBQ3VCLFVBQVUsRUFBRSxZQUFZO1FBQUNFLE9BQU81QixXQUFXLENBQUMwQixVQUFVLENBQUNHLFFBQVE7SUFBQTtJQUM3RnhCLE9BQU9zQixjQUFjLENBQUN4QixPQUFPLENBQUN1QixVQUFVLEVBQUUsVUFBVTtRQUFDRSxPQUFPNUIsV0FBVyxDQUFDMEIsVUFBVSxDQUFDSSxNQUFNO0lBQUE7SUFFekYsSUFBSUMsU0FBUzdCLE1BQU13QjtJQUNuQixJQUFJTSxjQUFjM0IsT0FBT0MsSUFBSSxDQUFDeUI7SUFFOUJDLFlBQVlQLE9BQU8sQ0FBQyxTQUFVUSxPQUFPO1FBQ3BDLElBQUl6QixLQUFLdUIsTUFBTSxDQUFDRSxRQUFRO1FBRXhCOUIsT0FBTyxDQUFDdUIsVUFBVSxDQUFDTyxRQUFRLEdBQUdkLFlBQVlYO1FBQzFDTCxPQUFPLENBQUN1QixVQUFVLENBQUNPLFFBQVEsQ0FBQ0MsR0FBRyxHQUFHM0IsUUFBUUM7SUFDM0M7QUFDRDtBQUVBMkIsT0FBT0MsT0FBTyxHQUFHakMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iaWdjb21tZXJjZS8uL25vZGVfbW9kdWxlcy9jb2xvci9ub2RlX21vZHVsZXMvY29sb3ItY29udmVydC9pbmRleC5qcz9lYmIyIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBjb252ZXJzaW9ucyA9IHJlcXVpcmUoJy4vY29udmVyc2lvbnMnKTtcbnZhciByb3V0ZSA9IHJlcXVpcmUoJy4vcm91dGUnKTtcblxudmFyIGNvbnZlcnQgPSB7fTtcblxudmFyIG1vZGVscyA9IE9iamVjdC5rZXlzKGNvbnZlcnNpb25zKTtcblxuZnVuY3Rpb24gd3JhcFJhdyhmbikge1xuXHR2YXIgd3JhcHBlZEZuID0gZnVuY3Rpb24gKGFyZ3MpIHtcblx0XHRpZiAoYXJncyA9PT0gdW5kZWZpbmVkIHx8IGFyZ3MgPT09IG51bGwpIHtcblx0XHRcdHJldHVybiBhcmdzO1xuXHRcdH1cblxuXHRcdGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuXHRcdFx0YXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZuKGFyZ3MpO1xuXHR9O1xuXG5cdC8vIHByZXNlcnZlIC5jb252ZXJzaW9uIHByb3BlcnR5IGlmIHRoZXJlIGlzIG9uZVxuXHRpZiAoJ2NvbnZlcnNpb24nIGluIGZuKSB7XG5cdFx0d3JhcHBlZEZuLmNvbnZlcnNpb24gPSBmbi5jb252ZXJzaW9uO1xuXHR9XG5cblx0cmV0dXJuIHdyYXBwZWRGbjtcbn1cblxuZnVuY3Rpb24gd3JhcFJvdW5kZWQoZm4pIHtcblx0dmFyIHdyYXBwZWRGbiA9IGZ1bmN0aW9uIChhcmdzKSB7XG5cdFx0aWYgKGFyZ3MgPT09IHVuZGVmaW5lZCB8fCBhcmdzID09PSBudWxsKSB7XG5cdFx0XHRyZXR1cm4gYXJncztcblx0XHR9XG5cblx0XHRpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcblx0XHRcdGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuXHRcdH1cblxuXHRcdHZhciByZXN1bHQgPSBmbihhcmdzKTtcblxuXHRcdC8vIHdlJ3JlIGFzc3VtaW5nIHRoZSByZXN1bHQgaXMgYW4gYXJyYXkgaGVyZS5cblx0XHQvLyBzZWUgbm90aWNlIGluIGNvbnZlcnNpb25zLmpzOyBkb24ndCB1c2UgYm94IHR5cGVzXG5cdFx0Ly8gaW4gY29udmVyc2lvbiBmdW5jdGlvbnMuXG5cdFx0aWYgKHR5cGVvZiByZXN1bHQgPT09ICdvYmplY3QnKSB7XG5cdFx0XHRmb3IgKHZhciBsZW4gPSByZXN1bHQubGVuZ3RoLCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRcdHJlc3VsdFtpXSA9IE1hdGgucm91bmQocmVzdWx0W2ldKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9O1xuXG5cdC8vIHByZXNlcnZlIC5jb252ZXJzaW9uIHByb3BlcnR5IGlmIHRoZXJlIGlzIG9uZVxuXHRpZiAoJ2NvbnZlcnNpb24nIGluIGZuKSB7XG5cdFx0d3JhcHBlZEZuLmNvbnZlcnNpb24gPSBmbi5jb252ZXJzaW9uO1xuXHR9XG5cblx0cmV0dXJuIHdyYXBwZWRGbjtcbn1cblxubW9kZWxzLmZvckVhY2goZnVuY3Rpb24gKGZyb21Nb2RlbCkge1xuXHRjb252ZXJ0W2Zyb21Nb2RlbF0gPSB7fTtcblxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoY29udmVydFtmcm9tTW9kZWxdLCAnY2hhbm5lbHMnLCB7dmFsdWU6IGNvbnZlcnNpb25zW2Zyb21Nb2RlbF0uY2hhbm5lbHN9KTtcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGNvbnZlcnRbZnJvbU1vZGVsXSwgJ2xhYmVscycsIHt2YWx1ZTogY29udmVyc2lvbnNbZnJvbU1vZGVsXS5sYWJlbHN9KTtcblxuXHR2YXIgcm91dGVzID0gcm91dGUoZnJvbU1vZGVsKTtcblx0dmFyIHJvdXRlTW9kZWxzID0gT2JqZWN0LmtleXMocm91dGVzKTtcblxuXHRyb3V0ZU1vZGVscy5mb3JFYWNoKGZ1bmN0aW9uICh0b01vZGVsKSB7XG5cdFx0dmFyIGZuID0gcm91dGVzW3RvTW9kZWxdO1xuXG5cdFx0Y29udmVydFtmcm9tTW9kZWxdW3RvTW9kZWxdID0gd3JhcFJvdW5kZWQoZm4pO1xuXHRcdGNvbnZlcnRbZnJvbU1vZGVsXVt0b01vZGVsXS5yYXcgPSB3cmFwUmF3KGZuKTtcblx0fSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBjb252ZXJ0O1xuIl0sIm5hbWVzIjpbImNvbnZlcnNpb25zIiwicmVxdWlyZSIsInJvdXRlIiwiY29udmVydCIsIm1vZGVscyIsIk9iamVjdCIsImtleXMiLCJ3cmFwUmF3IiwiZm4iLCJ3cmFwcGVkRm4iLCJhcmdzIiwidW5kZWZpbmVkIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJzbGljZSIsImNhbGwiLCJjb252ZXJzaW9uIiwid3JhcFJvdW5kZWQiLCJyZXN1bHQiLCJsZW4iLCJpIiwiTWF0aCIsInJvdW5kIiwiZm9yRWFjaCIsImZyb21Nb2RlbCIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJjaGFubmVscyIsImxhYmVscyIsInJvdXRlcyIsInJvdXRlTW9kZWxzIiwidG9Nb2RlbCIsInJhdyIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/color/node_modules/color-convert/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/color/node_modules/color-convert/route.js":
/*!****************************************************************!*\
  !*** ./node_modules/color/node_modules/color-convert/route.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar conversions = __webpack_require__(/*! ./conversions */ \"(ssr)/./node_modules/color/node_modules/color-convert/conversions.js\");\n/*\n\tthis function routes a model to all other models.\n\n\tall functions that are routed have a property `.conversion` attached\n\tto the returned synthetic function. This property is an array\n\tof strings, each with the steps in between the 'from' and 'to'\n\tcolor models (inclusive).\n\n\tconversions that are not possible simply are not included.\n*/ function buildGraph() {\n    var graph = {};\n    // https://jsperf.com/object-keys-vs-for-in-with-closure/3\n    var models = Object.keys(conversions);\n    for(var len = models.length, i = 0; i < len; i++){\n        graph[models[i]] = {\n            // http://jsperf.com/1-vs-infinity\n            // micro-opt, but this is simple.\n            distance: -1,\n            parent: null\n        };\n    }\n    return graph;\n}\n// https://en.wikipedia.org/wiki/Breadth-first_search\nfunction deriveBFS(fromModel) {\n    var graph = buildGraph();\n    var queue = [\n        fromModel\n    ]; // unshift -> queue -> pop\n    graph[fromModel].distance = 0;\n    while(queue.length){\n        var current = queue.pop();\n        var adjacents = Object.keys(conversions[current]);\n        for(var len = adjacents.length, i = 0; i < len; i++){\n            var adjacent = adjacents[i];\n            var node = graph[adjacent];\n            if (node.distance === -1) {\n                node.distance = graph[current].distance + 1;\n                node.parent = current;\n                queue.unshift(adjacent);\n            }\n        }\n    }\n    return graph;\n}\nfunction link(from, to) {\n    return function(args) {\n        return to(from(args));\n    };\n}\nfunction wrapConversion(toModel, graph) {\n    var path = [\n        graph[toModel].parent,\n        toModel\n    ];\n    var fn = conversions[graph[toModel].parent][toModel];\n    var cur = graph[toModel].parent;\n    while(graph[cur].parent){\n        path.unshift(graph[cur].parent);\n        fn = link(conversions[graph[cur].parent][cur], fn);\n        cur = graph[cur].parent;\n    }\n    fn.conversion = path;\n    return fn;\n}\nmodule.exports = function(fromModel) {\n    var graph = deriveBFS(fromModel);\n    var conversion = {};\n    var models = Object.keys(graph);\n    for(var len = models.length, i = 0; i < len; i++){\n        var toModel = models[i];\n        var node = graph[toModel];\n        if (node.parent === null) {\n            continue;\n        }\n        conversion[toModel] = wrapConversion(toModel, graph);\n    }\n    return conversion;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29sb3Ivbm9kZV9tb2R1bGVzL2NvbG9yLWNvbnZlcnQvcm91dGUuanMiLCJtYXBwaW5ncyI6IjtBQUFBLElBQUlBLGNBQWNDLG1CQUFPQSxDQUFDO0FBRTFCOzs7Ozs7Ozs7QUFTQSxHQUVBLFNBQVNDO0lBQ1IsSUFBSUMsUUFBUSxDQUFDO0lBQ2IsMERBQTBEO0lBQzFELElBQUlDLFNBQVNDLE9BQU9DLElBQUksQ0FBQ047SUFFekIsSUFBSyxJQUFJTyxNQUFNSCxPQUFPSSxNQUFNLEVBQUVDLElBQUksR0FBR0EsSUFBSUYsS0FBS0UsSUFBSztRQUNsRE4sS0FBSyxDQUFDQyxNQUFNLENBQUNLLEVBQUUsQ0FBQyxHQUFHO1lBQ2xCLGtDQUFrQztZQUNsQyxpQ0FBaUM7WUFDakNDLFVBQVUsQ0FBQztZQUNYQyxRQUFRO1FBQ1Q7SUFDRDtJQUVBLE9BQU9SO0FBQ1I7QUFFQSxxREFBcUQ7QUFDckQsU0FBU1MsVUFBVUMsU0FBUztJQUMzQixJQUFJVixRQUFRRDtJQUNaLElBQUlZLFFBQVE7UUFBQ0Q7S0FBVSxFQUFFLDBCQUEwQjtJQUVuRFYsS0FBSyxDQUFDVSxVQUFVLENBQUNILFFBQVEsR0FBRztJQUU1QixNQUFPSSxNQUFNTixNQUFNLENBQUU7UUFDcEIsSUFBSU8sVUFBVUQsTUFBTUUsR0FBRztRQUN2QixJQUFJQyxZQUFZWixPQUFPQyxJQUFJLENBQUNOLFdBQVcsQ0FBQ2UsUUFBUTtRQUVoRCxJQUFLLElBQUlSLE1BQU1VLFVBQVVULE1BQU0sRUFBRUMsSUFBSSxHQUFHQSxJQUFJRixLQUFLRSxJQUFLO1lBQ3JELElBQUlTLFdBQVdELFNBQVMsQ0FBQ1IsRUFBRTtZQUMzQixJQUFJVSxPQUFPaEIsS0FBSyxDQUFDZSxTQUFTO1lBRTFCLElBQUlDLEtBQUtULFFBQVEsS0FBSyxDQUFDLEdBQUc7Z0JBQ3pCUyxLQUFLVCxRQUFRLEdBQUdQLEtBQUssQ0FBQ1ksUUFBUSxDQUFDTCxRQUFRLEdBQUc7Z0JBQzFDUyxLQUFLUixNQUFNLEdBQUdJO2dCQUNkRCxNQUFNTSxPQUFPLENBQUNGO1lBQ2Y7UUFDRDtJQUNEO0lBRUEsT0FBT2Y7QUFDUjtBQUVBLFNBQVNrQixLQUFLQyxJQUFJLEVBQUVDLEVBQUU7SUFDckIsT0FBTyxTQUFVQyxJQUFJO1FBQ3BCLE9BQU9ELEdBQUdELEtBQUtFO0lBQ2hCO0FBQ0Q7QUFFQSxTQUFTQyxlQUFlQyxPQUFPLEVBQUV2QixLQUFLO0lBQ3JDLElBQUl3QixPQUFPO1FBQUN4QixLQUFLLENBQUN1QixRQUFRLENBQUNmLE1BQU07UUFBRWU7S0FBUTtJQUMzQyxJQUFJRSxLQUFLNUIsV0FBVyxDQUFDRyxLQUFLLENBQUN1QixRQUFRLENBQUNmLE1BQU0sQ0FBQyxDQUFDZSxRQUFRO0lBRXBELElBQUlHLE1BQU0xQixLQUFLLENBQUN1QixRQUFRLENBQUNmLE1BQU07SUFDL0IsTUFBT1IsS0FBSyxDQUFDMEIsSUFBSSxDQUFDbEIsTUFBTSxDQUFFO1FBQ3pCZ0IsS0FBS1AsT0FBTyxDQUFDakIsS0FBSyxDQUFDMEIsSUFBSSxDQUFDbEIsTUFBTTtRQUM5QmlCLEtBQUtQLEtBQUtyQixXQUFXLENBQUNHLEtBQUssQ0FBQzBCLElBQUksQ0FBQ2xCLE1BQU0sQ0FBQyxDQUFDa0IsSUFBSSxFQUFFRDtRQUMvQ0MsTUFBTTFCLEtBQUssQ0FBQzBCLElBQUksQ0FBQ2xCLE1BQU07SUFDeEI7SUFFQWlCLEdBQUdFLFVBQVUsR0FBR0g7SUFDaEIsT0FBT0M7QUFDUjtBQUVBRyxPQUFPQyxPQUFPLEdBQUcsU0FBVW5CLFNBQVM7SUFDbkMsSUFBSVYsUUFBUVMsVUFBVUM7SUFDdEIsSUFBSWlCLGFBQWEsQ0FBQztJQUVsQixJQUFJMUIsU0FBU0MsT0FBT0MsSUFBSSxDQUFDSDtJQUN6QixJQUFLLElBQUlJLE1BQU1ILE9BQU9JLE1BQU0sRUFBRUMsSUFBSSxHQUFHQSxJQUFJRixLQUFLRSxJQUFLO1FBQ2xELElBQUlpQixVQUFVdEIsTUFBTSxDQUFDSyxFQUFFO1FBQ3ZCLElBQUlVLE9BQU9oQixLQUFLLENBQUN1QixRQUFRO1FBRXpCLElBQUlQLEtBQUtSLE1BQU0sS0FBSyxNQUFNO1lBRXpCO1FBQ0Q7UUFFQW1CLFVBQVUsQ0FBQ0osUUFBUSxHQUFHRCxlQUFlQyxTQUFTdkI7SUFDL0M7SUFFQSxPQUFPMkI7QUFDUiIsInNvdXJjZXMiOlsid2VicGFjazovL2JpZ2NvbW1lcmNlLy4vbm9kZV9tb2R1bGVzL2NvbG9yL25vZGVfbW9kdWxlcy9jb2xvci1jb252ZXJ0L3JvdXRlLmpzPzY4MzIiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGNvbnZlcnNpb25zID0gcmVxdWlyZSgnLi9jb252ZXJzaW9ucycpO1xuXG4vKlxuXHR0aGlzIGZ1bmN0aW9uIHJvdXRlcyBhIG1vZGVsIHRvIGFsbCBvdGhlciBtb2RlbHMuXG5cblx0YWxsIGZ1bmN0aW9ucyB0aGF0IGFyZSByb3V0ZWQgaGF2ZSBhIHByb3BlcnR5IGAuY29udmVyc2lvbmAgYXR0YWNoZWRcblx0dG8gdGhlIHJldHVybmVkIHN5bnRoZXRpYyBmdW5jdGlvbi4gVGhpcyBwcm9wZXJ0eSBpcyBhbiBhcnJheVxuXHRvZiBzdHJpbmdzLCBlYWNoIHdpdGggdGhlIHN0ZXBzIGluIGJldHdlZW4gdGhlICdmcm9tJyBhbmQgJ3RvJ1xuXHRjb2xvciBtb2RlbHMgKGluY2x1c2l2ZSkuXG5cblx0Y29udmVyc2lvbnMgdGhhdCBhcmUgbm90IHBvc3NpYmxlIHNpbXBseSBhcmUgbm90IGluY2x1ZGVkLlxuKi9cblxuZnVuY3Rpb24gYnVpbGRHcmFwaCgpIHtcblx0dmFyIGdyYXBoID0ge307XG5cdC8vIGh0dHBzOi8vanNwZXJmLmNvbS9vYmplY3Qta2V5cy12cy1mb3ItaW4td2l0aC1jbG9zdXJlLzNcblx0dmFyIG1vZGVscyA9IE9iamVjdC5rZXlzKGNvbnZlcnNpb25zKTtcblxuXHRmb3IgKHZhciBsZW4gPSBtb2RlbHMubGVuZ3RoLCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0Z3JhcGhbbW9kZWxzW2ldXSA9IHtcblx0XHRcdC8vIGh0dHA6Ly9qc3BlcmYuY29tLzEtdnMtaW5maW5pdHlcblx0XHRcdC8vIG1pY3JvLW9wdCwgYnV0IHRoaXMgaXMgc2ltcGxlLlxuXHRcdFx0ZGlzdGFuY2U6IC0xLFxuXHRcdFx0cGFyZW50OiBudWxsXG5cdFx0fTtcblx0fVxuXG5cdHJldHVybiBncmFwaDtcbn1cblxuLy8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQnJlYWR0aC1maXJzdF9zZWFyY2hcbmZ1bmN0aW9uIGRlcml2ZUJGUyhmcm9tTW9kZWwpIHtcblx0dmFyIGdyYXBoID0gYnVpbGRHcmFwaCgpO1xuXHR2YXIgcXVldWUgPSBbZnJvbU1vZGVsXTsgLy8gdW5zaGlmdCAtPiBxdWV1ZSAtPiBwb3BcblxuXHRncmFwaFtmcm9tTW9kZWxdLmRpc3RhbmNlID0gMDtcblxuXHR3aGlsZSAocXVldWUubGVuZ3RoKSB7XG5cdFx0dmFyIGN1cnJlbnQgPSBxdWV1ZS5wb3AoKTtcblx0XHR2YXIgYWRqYWNlbnRzID0gT2JqZWN0LmtleXMoY29udmVyc2lvbnNbY3VycmVudF0pO1xuXG5cdFx0Zm9yICh2YXIgbGVuID0gYWRqYWNlbnRzLmxlbmd0aCwgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0dmFyIGFkamFjZW50ID0gYWRqYWNlbnRzW2ldO1xuXHRcdFx0dmFyIG5vZGUgPSBncmFwaFthZGphY2VudF07XG5cblx0XHRcdGlmIChub2RlLmRpc3RhbmNlID09PSAtMSkge1xuXHRcdFx0XHRub2RlLmRpc3RhbmNlID0gZ3JhcGhbY3VycmVudF0uZGlzdGFuY2UgKyAxO1xuXHRcdFx0XHRub2RlLnBhcmVudCA9IGN1cnJlbnQ7XG5cdFx0XHRcdHF1ZXVlLnVuc2hpZnQoYWRqYWNlbnQpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBncmFwaDtcbn1cblxuZnVuY3Rpb24gbGluayhmcm9tLCB0bykge1xuXHRyZXR1cm4gZnVuY3Rpb24gKGFyZ3MpIHtcblx0XHRyZXR1cm4gdG8oZnJvbShhcmdzKSk7XG5cdH07XG59XG5cbmZ1bmN0aW9uIHdyYXBDb252ZXJzaW9uKHRvTW9kZWwsIGdyYXBoKSB7XG5cdHZhciBwYXRoID0gW2dyYXBoW3RvTW9kZWxdLnBhcmVudCwgdG9Nb2RlbF07XG5cdHZhciBmbiA9IGNvbnZlcnNpb25zW2dyYXBoW3RvTW9kZWxdLnBhcmVudF1bdG9Nb2RlbF07XG5cblx0dmFyIGN1ciA9IGdyYXBoW3RvTW9kZWxdLnBhcmVudDtcblx0d2hpbGUgKGdyYXBoW2N1cl0ucGFyZW50KSB7XG5cdFx0cGF0aC51bnNoaWZ0KGdyYXBoW2N1cl0ucGFyZW50KTtcblx0XHRmbiA9IGxpbmsoY29udmVyc2lvbnNbZ3JhcGhbY3VyXS5wYXJlbnRdW2N1cl0sIGZuKTtcblx0XHRjdXIgPSBncmFwaFtjdXJdLnBhcmVudDtcblx0fVxuXG5cdGZuLmNvbnZlcnNpb24gPSBwYXRoO1xuXHRyZXR1cm4gZm47XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZyb21Nb2RlbCkge1xuXHR2YXIgZ3JhcGggPSBkZXJpdmVCRlMoZnJvbU1vZGVsKTtcblx0dmFyIGNvbnZlcnNpb24gPSB7fTtcblxuXHR2YXIgbW9kZWxzID0gT2JqZWN0LmtleXMoZ3JhcGgpO1xuXHRmb3IgKHZhciBsZW4gPSBtb2RlbHMubGVuZ3RoLCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0dmFyIHRvTW9kZWwgPSBtb2RlbHNbaV07XG5cdFx0dmFyIG5vZGUgPSBncmFwaFt0b01vZGVsXTtcblxuXHRcdGlmIChub2RlLnBhcmVudCA9PT0gbnVsbCkge1xuXHRcdFx0Ly8gbm8gcG9zc2libGUgY29udmVyc2lvbiwgb3IgdGhpcyBub2RlIGlzIHRoZSBzb3VyY2UgbW9kZWwuXG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRjb252ZXJzaW9uW3RvTW9kZWxdID0gd3JhcENvbnZlcnNpb24odG9Nb2RlbCwgZ3JhcGgpO1xuXHR9XG5cblx0cmV0dXJuIGNvbnZlcnNpb247XG59O1xuXG4iXSwibmFtZXMiOlsiY29udmVyc2lvbnMiLCJyZXF1aXJlIiwiYnVpbGRHcmFwaCIsImdyYXBoIiwibW9kZWxzIiwiT2JqZWN0Iiwia2V5cyIsImxlbiIsImxlbmd0aCIsImkiLCJkaXN0YW5jZSIsInBhcmVudCIsImRlcml2ZUJGUyIsImZyb21Nb2RlbCIsInF1ZXVlIiwiY3VycmVudCIsInBvcCIsImFkamFjZW50cyIsImFkamFjZW50Iiwibm9kZSIsInVuc2hpZnQiLCJsaW5rIiwiZnJvbSIsInRvIiwiYXJncyIsIndyYXBDb252ZXJzaW9uIiwidG9Nb2RlbCIsInBhdGgiLCJmbiIsImN1ciIsImNvbnZlcnNpb24iLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/color/node_modules/color-convert/route.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/color/node_modules/color-name/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/color/node_modules/color-name/index.js ***!
  \*************************************************************/
/***/ ((module) => {

eval("\nmodule.exports = {\n    \"aliceblue\": [\n        240,\n        248,\n        255\n    ],\n    \"antiquewhite\": [\n        250,\n        235,\n        215\n    ],\n    \"aqua\": [\n        0,\n        255,\n        255\n    ],\n    \"aquamarine\": [\n        127,\n        255,\n        212\n    ],\n    \"azure\": [\n        240,\n        255,\n        255\n    ],\n    \"beige\": [\n        245,\n        245,\n        220\n    ],\n    \"bisque\": [\n        255,\n        228,\n        196\n    ],\n    \"black\": [\n        0,\n        0,\n        0\n    ],\n    \"blanchedalmond\": [\n        255,\n        235,\n        205\n    ],\n    \"blue\": [\n        0,\n        0,\n        255\n    ],\n    \"blueviolet\": [\n        138,\n        43,\n        226\n    ],\n    \"brown\": [\n        165,\n        42,\n        42\n    ],\n    \"burlywood\": [\n        222,\n        184,\n        135\n    ],\n    \"cadetblue\": [\n        95,\n        158,\n        160\n    ],\n    \"chartreuse\": [\n        127,\n        255,\n        0\n    ],\n    \"chocolate\": [\n        210,\n        105,\n        30\n    ],\n    \"coral\": [\n        255,\n        127,\n        80\n    ],\n    \"cornflowerblue\": [\n        100,\n        149,\n        237\n    ],\n    \"cornsilk\": [\n        255,\n        248,\n        220\n    ],\n    \"crimson\": [\n        220,\n        20,\n        60\n    ],\n    \"cyan\": [\n        0,\n        255,\n        255\n    ],\n    \"darkblue\": [\n        0,\n        0,\n        139\n    ],\n    \"darkcyan\": [\n        0,\n        139,\n        139\n    ],\n    \"darkgoldenrod\": [\n        184,\n        134,\n        11\n    ],\n    \"darkgray\": [\n        169,\n        169,\n        169\n    ],\n    \"darkgreen\": [\n        0,\n        100,\n        0\n    ],\n    \"darkgrey\": [\n        169,\n        169,\n        169\n    ],\n    \"darkkhaki\": [\n        189,\n        183,\n        107\n    ],\n    \"darkmagenta\": [\n        139,\n        0,\n        139\n    ],\n    \"darkolivegreen\": [\n        85,\n        107,\n        47\n    ],\n    \"darkorange\": [\n        255,\n        140,\n        0\n    ],\n    \"darkorchid\": [\n        153,\n        50,\n        204\n    ],\n    \"darkred\": [\n        139,\n        0,\n        0\n    ],\n    \"darksalmon\": [\n        233,\n        150,\n        122\n    ],\n    \"darkseagreen\": [\n        143,\n        188,\n        143\n    ],\n    \"darkslateblue\": [\n        72,\n        61,\n        139\n    ],\n    \"darkslategray\": [\n        47,\n        79,\n        79\n    ],\n    \"darkslategrey\": [\n        47,\n        79,\n        79\n    ],\n    \"darkturquoise\": [\n        0,\n        206,\n        209\n    ],\n    \"darkviolet\": [\n        148,\n        0,\n        211\n    ],\n    \"deeppink\": [\n        255,\n        20,\n        147\n    ],\n    \"deepskyblue\": [\n        0,\n        191,\n        255\n    ],\n    \"dimgray\": [\n        105,\n        105,\n        105\n    ],\n    \"dimgrey\": [\n        105,\n        105,\n        105\n    ],\n    \"dodgerblue\": [\n        30,\n        144,\n        255\n    ],\n    \"firebrick\": [\n        178,\n        34,\n        34\n    ],\n    \"floralwhite\": [\n        255,\n        250,\n        240\n    ],\n    \"forestgreen\": [\n        34,\n        139,\n        34\n    ],\n    \"fuchsia\": [\n        255,\n        0,\n        255\n    ],\n    \"gainsboro\": [\n        220,\n        220,\n        220\n    ],\n    \"ghostwhite\": [\n        248,\n        248,\n        255\n    ],\n    \"gold\": [\n        255,\n        215,\n        0\n    ],\n    \"goldenrod\": [\n        218,\n        165,\n        32\n    ],\n    \"gray\": [\n        128,\n        128,\n        128\n    ],\n    \"green\": [\n        0,\n        128,\n        0\n    ],\n    \"greenyellow\": [\n        173,\n        255,\n        47\n    ],\n    \"grey\": [\n        128,\n        128,\n        128\n    ],\n    \"honeydew\": [\n        240,\n        255,\n        240\n    ],\n    \"hotpink\": [\n        255,\n        105,\n        180\n    ],\n    \"indianred\": [\n        205,\n        92,\n        92\n    ],\n    \"indigo\": [\n        75,\n        0,\n        130\n    ],\n    \"ivory\": [\n        255,\n        255,\n        240\n    ],\n    \"khaki\": [\n        240,\n        230,\n        140\n    ],\n    \"lavender\": [\n        230,\n        230,\n        250\n    ],\n    \"lavenderblush\": [\n        255,\n        240,\n        245\n    ],\n    \"lawngreen\": [\n        124,\n        252,\n        0\n    ],\n    \"lemonchiffon\": [\n        255,\n        250,\n        205\n    ],\n    \"lightblue\": [\n        173,\n        216,\n        230\n    ],\n    \"lightcoral\": [\n        240,\n        128,\n        128\n    ],\n    \"lightcyan\": [\n        224,\n        255,\n        255\n    ],\n    \"lightgoldenrodyellow\": [\n        250,\n        250,\n        210\n    ],\n    \"lightgray\": [\n        211,\n        211,\n        211\n    ],\n    \"lightgreen\": [\n        144,\n        238,\n        144\n    ],\n    \"lightgrey\": [\n        211,\n        211,\n        211\n    ],\n    \"lightpink\": [\n        255,\n        182,\n        193\n    ],\n    \"lightsalmon\": [\n        255,\n        160,\n        122\n    ],\n    \"lightseagreen\": [\n        32,\n        178,\n        170\n    ],\n    \"lightskyblue\": [\n        135,\n        206,\n        250\n    ],\n    \"lightslategray\": [\n        119,\n        136,\n        153\n    ],\n    \"lightslategrey\": [\n        119,\n        136,\n        153\n    ],\n    \"lightsteelblue\": [\n        176,\n        196,\n        222\n    ],\n    \"lightyellow\": [\n        255,\n        255,\n        224\n    ],\n    \"lime\": [\n        0,\n        255,\n        0\n    ],\n    \"limegreen\": [\n        50,\n        205,\n        50\n    ],\n    \"linen\": [\n        250,\n        240,\n        230\n    ],\n    \"magenta\": [\n        255,\n        0,\n        255\n    ],\n    \"maroon\": [\n        128,\n        0,\n        0\n    ],\n    \"mediumaquamarine\": [\n        102,\n        205,\n        170\n    ],\n    \"mediumblue\": [\n        0,\n        0,\n        205\n    ],\n    \"mediumorchid\": [\n        186,\n        85,\n        211\n    ],\n    \"mediumpurple\": [\n        147,\n        112,\n        219\n    ],\n    \"mediumseagreen\": [\n        60,\n        179,\n        113\n    ],\n    \"mediumslateblue\": [\n        123,\n        104,\n        238\n    ],\n    \"mediumspringgreen\": [\n        0,\n        250,\n        154\n    ],\n    \"mediumturquoise\": [\n        72,\n        209,\n        204\n    ],\n    \"mediumvioletred\": [\n        199,\n        21,\n        133\n    ],\n    \"midnightblue\": [\n        25,\n        25,\n        112\n    ],\n    \"mintcream\": [\n        245,\n        255,\n        250\n    ],\n    \"mistyrose\": [\n        255,\n        228,\n        225\n    ],\n    \"moccasin\": [\n        255,\n        228,\n        181\n    ],\n    \"navajowhite\": [\n        255,\n        222,\n        173\n    ],\n    \"navy\": [\n        0,\n        0,\n        128\n    ],\n    \"oldlace\": [\n        253,\n        245,\n        230\n    ],\n    \"olive\": [\n        128,\n        128,\n        0\n    ],\n    \"olivedrab\": [\n        107,\n        142,\n        35\n    ],\n    \"orange\": [\n        255,\n        165,\n        0\n    ],\n    \"orangered\": [\n        255,\n        69,\n        0\n    ],\n    \"orchid\": [\n        218,\n        112,\n        214\n    ],\n    \"palegoldenrod\": [\n        238,\n        232,\n        170\n    ],\n    \"palegreen\": [\n        152,\n        251,\n        152\n    ],\n    \"paleturquoise\": [\n        175,\n        238,\n        238\n    ],\n    \"palevioletred\": [\n        219,\n        112,\n        147\n    ],\n    \"papayawhip\": [\n        255,\n        239,\n        213\n    ],\n    \"peachpuff\": [\n        255,\n        218,\n        185\n    ],\n    \"peru\": [\n        205,\n        133,\n        63\n    ],\n    \"pink\": [\n        255,\n        192,\n        203\n    ],\n    \"plum\": [\n        221,\n        160,\n        221\n    ],\n    \"powderblue\": [\n        176,\n        224,\n        230\n    ],\n    \"purple\": [\n        128,\n        0,\n        128\n    ],\n    \"rebeccapurple\": [\n        102,\n        51,\n        153\n    ],\n    \"red\": [\n        255,\n        0,\n        0\n    ],\n    \"rosybrown\": [\n        188,\n        143,\n        143\n    ],\n    \"royalblue\": [\n        65,\n        105,\n        225\n    ],\n    \"saddlebrown\": [\n        139,\n        69,\n        19\n    ],\n    \"salmon\": [\n        250,\n        128,\n        114\n    ],\n    \"sandybrown\": [\n        244,\n        164,\n        96\n    ],\n    \"seagreen\": [\n        46,\n        139,\n        87\n    ],\n    \"seashell\": [\n        255,\n        245,\n        238\n    ],\n    \"sienna\": [\n        160,\n        82,\n        45\n    ],\n    \"silver\": [\n        192,\n        192,\n        192\n    ],\n    \"skyblue\": [\n        135,\n        206,\n        235\n    ],\n    \"slateblue\": [\n        106,\n        90,\n        205\n    ],\n    \"slategray\": [\n        112,\n        128,\n        144\n    ],\n    \"slategrey\": [\n        112,\n        128,\n        144\n    ],\n    \"snow\": [\n        255,\n        250,\n        250\n    ],\n    \"springgreen\": [\n        0,\n        255,\n        127\n    ],\n    \"steelblue\": [\n        70,\n        130,\n        180\n    ],\n    \"tan\": [\n        210,\n        180,\n        140\n    ],\n    \"teal\": [\n        0,\n        128,\n        128\n    ],\n    \"thistle\": [\n        216,\n        191,\n        216\n    ],\n    \"tomato\": [\n        255,\n        99,\n        71\n    ],\n    \"turquoise\": [\n        64,\n        224,\n        208\n    ],\n    \"violet\": [\n        238,\n        130,\n        238\n    ],\n    \"wheat\": [\n        245,\n        222,\n        179\n    ],\n    \"white\": [\n        255,\n        255,\n        255\n    ],\n    \"whitesmoke\": [\n        245,\n        245,\n        245\n    ],\n    \"yellow\": [\n        255,\n        255,\n        0\n    ],\n    \"yellowgreen\": [\n        154,\n        205,\n        50\n    ]\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/color/node_modules/color-name/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/color/index.js":
/*!*************************************!*\
  !*** ./node_modules/color/index.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar colorString = __webpack_require__(/*! color-string */ \"(rsc)/./node_modules/color-string/index.js\");\nvar convert = __webpack_require__(/*! color-convert */ \"(rsc)/./node_modules/color/node_modules/color-convert/index.js\");\nvar _slice = [].slice;\nvar skippedModels = [\n    // to be honest, I don't really feel like keyword belongs in color convert, but eh.\n    \"keyword\",\n    // gray conflicts with some method names, and has its own method defined.\n    \"gray\",\n    // shouldn't really be in color-convert either...\n    \"hex\"\n];\nvar hashedModelKeys = {};\nObject.keys(convert).forEach(function(model) {\n    hashedModelKeys[_slice.call(convert[model].labels).sort().join(\"\")] = model;\n});\nvar limiters = {};\nfunction Color(obj, model) {\n    if (!(this instanceof Color)) {\n        return new Color(obj, model);\n    }\n    if (model && model in skippedModels) {\n        model = null;\n    }\n    if (model && !(model in convert)) {\n        throw new Error(\"Unknown model: \" + model);\n    }\n    var i;\n    var channels;\n    if (obj == null) {\n        this.model = \"rgb\";\n        this.color = [\n            0,\n            0,\n            0\n        ];\n        this.valpha = 1;\n    } else if (obj instanceof Color) {\n        this.model = obj.model;\n        this.color = obj.color.slice();\n        this.valpha = obj.valpha;\n    } else if (typeof obj === \"string\") {\n        var result = colorString.get(obj);\n        if (result === null) {\n            throw new Error(\"Unable to parse color from string: \" + obj);\n        }\n        this.model = result.model;\n        channels = convert[this.model].channels;\n        this.color = result.value.slice(0, channels);\n        this.valpha = typeof result.value[channels] === \"number\" ? result.value[channels] : 1;\n    } else if (obj.length) {\n        this.model = model || \"rgb\";\n        channels = convert[this.model].channels;\n        var newArr = _slice.call(obj, 0, channels);\n        this.color = zeroArray(newArr, channels);\n        this.valpha = typeof obj[channels] === \"number\" ? obj[channels] : 1;\n    } else if (typeof obj === \"number\") {\n        // this is always RGB - can be converted later on.\n        obj &= 0xFFFFFF;\n        this.model = \"rgb\";\n        this.color = [\n            obj >> 16 & 0xFF,\n            obj >> 8 & 0xFF,\n            obj & 0xFF\n        ];\n        this.valpha = 1;\n    } else {\n        this.valpha = 1;\n        var keys = Object.keys(obj);\n        if (\"alpha\" in obj) {\n            keys.splice(keys.indexOf(\"alpha\"), 1);\n            this.valpha = typeof obj.alpha === \"number\" ? obj.alpha : 0;\n        }\n        var hashedKeys = keys.sort().join(\"\");\n        if (!(hashedKeys in hashedModelKeys)) {\n            throw new Error(\"Unable to parse color from object: \" + JSON.stringify(obj));\n        }\n        this.model = hashedModelKeys[hashedKeys];\n        var labels = convert[this.model].labels;\n        var color = [];\n        for(i = 0; i < labels.length; i++){\n            color.push(obj[labels[i]]);\n        }\n        this.color = zeroArray(color);\n    }\n    // perform limitations (clamping, etc.)\n    if (limiters[this.model]) {\n        channels = convert[this.model].channels;\n        for(i = 0; i < channels; i++){\n            var limit = limiters[this.model][i];\n            if (limit) {\n                this.color[i] = limit(this.color[i]);\n            }\n        }\n    }\n    this.valpha = Math.max(0, Math.min(1, this.valpha));\n    if (Object.freeze) {\n        Object.freeze(this);\n    }\n}\nColor.prototype = {\n    toString: function() {\n        return this.string();\n    },\n    toJSON: function() {\n        return this[this.model]();\n    },\n    string: function(places) {\n        var self = this.model in colorString.to ? this : this.rgb();\n        self = self.round(typeof places === \"number\" ? places : 1);\n        var args = self.valpha === 1 ? self.color : self.color.concat(this.valpha);\n        return colorString.to[self.model](args);\n    },\n    percentString: function(places) {\n        var self = this.rgb().round(typeof places === \"number\" ? places : 1);\n        var args = self.valpha === 1 ? self.color : self.color.concat(this.valpha);\n        return colorString.to.rgb.percent(args);\n    },\n    array: function() {\n        return this.valpha === 1 ? this.color.slice() : this.color.concat(this.valpha);\n    },\n    object: function() {\n        var result = {};\n        var channels = convert[this.model].channels;\n        var labels = convert[this.model].labels;\n        for(var i = 0; i < channels; i++){\n            result[labels[i]] = this.color[i];\n        }\n        if (this.valpha !== 1) {\n            result.alpha = this.valpha;\n        }\n        return result;\n    },\n    unitArray: function() {\n        var rgb = this.rgb().color;\n        rgb[0] /= 255;\n        rgb[1] /= 255;\n        rgb[2] /= 255;\n        if (this.valpha !== 1) {\n            rgb.push(this.valpha);\n        }\n        return rgb;\n    },\n    unitObject: function() {\n        var rgb = this.rgb().object();\n        rgb.r /= 255;\n        rgb.g /= 255;\n        rgb.b /= 255;\n        if (this.valpha !== 1) {\n            rgb.alpha = this.valpha;\n        }\n        return rgb;\n    },\n    round: function(places) {\n        places = Math.max(places || 0, 0);\n        return new Color(this.color.map(roundToPlace(places)).concat(this.valpha), this.model);\n    },\n    alpha: function(val) {\n        if (arguments.length) {\n            return new Color(this.color.concat(Math.max(0, Math.min(1, val))), this.model);\n        }\n        return this.valpha;\n    },\n    // rgb\n    red: getset(\"rgb\", 0, maxfn(255)),\n    green: getset(\"rgb\", 1, maxfn(255)),\n    blue: getset(\"rgb\", 2, maxfn(255)),\n    hue: getset([\n        \"hsl\",\n        \"hsv\",\n        \"hsl\",\n        \"hwb\",\n        \"hcg\"\n    ], 0, function(val) {\n        return (val % 360 + 360) % 360;\n    }),\n    saturationl: getset(\"hsl\", 1, maxfn(100)),\n    lightness: getset(\"hsl\", 2, maxfn(100)),\n    saturationv: getset(\"hsv\", 1, maxfn(100)),\n    value: getset(\"hsv\", 2, maxfn(100)),\n    chroma: getset(\"hcg\", 1, maxfn(100)),\n    gray: getset(\"hcg\", 2, maxfn(100)),\n    white: getset(\"hwb\", 1, maxfn(100)),\n    wblack: getset(\"hwb\", 2, maxfn(100)),\n    cyan: getset(\"cmyk\", 0, maxfn(100)),\n    magenta: getset(\"cmyk\", 1, maxfn(100)),\n    yellow: getset(\"cmyk\", 2, maxfn(100)),\n    black: getset(\"cmyk\", 3, maxfn(100)),\n    x: getset(\"xyz\", 0, maxfn(100)),\n    y: getset(\"xyz\", 1, maxfn(100)),\n    z: getset(\"xyz\", 2, maxfn(100)),\n    l: getset(\"lab\", 0, maxfn(100)),\n    a: getset(\"lab\", 1),\n    b: getset(\"lab\", 2),\n    keyword: function(val) {\n        if (arguments.length) {\n            return new Color(val);\n        }\n        return convert[this.model].keyword(this.color);\n    },\n    hex: function(val) {\n        if (arguments.length) {\n            return new Color(val);\n        }\n        return colorString.to.hex(this.rgb().round().color);\n    },\n    rgbNumber: function() {\n        var rgb = this.rgb().color;\n        return (rgb[0] & 0xFF) << 16 | (rgb[1] & 0xFF) << 8 | rgb[2] & 0xFF;\n    },\n    luminosity: function() {\n        // http://www.w3.org/TR/WCAG20/#relativeluminancedef\n        var rgb = this.rgb().color;\n        var lum = [];\n        for(var i = 0; i < rgb.length; i++){\n            var chan = rgb[i] / 255;\n            lum[i] = chan <= 0.03928 ? chan / 12.92 : Math.pow((chan + 0.055) / 1.055, 2.4);\n        }\n        return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];\n    },\n    contrast: function(color2) {\n        // http://www.w3.org/TR/WCAG20/#contrast-ratiodef\n        var lum1 = this.luminosity();\n        var lum2 = color2.luminosity();\n        if (lum1 > lum2) {\n            return (lum1 + 0.05) / (lum2 + 0.05);\n        }\n        return (lum2 + 0.05) / (lum1 + 0.05);\n    },\n    level: function(color2) {\n        var contrastRatio = this.contrast(color2);\n        if (contrastRatio >= 7.1) {\n            return \"AAA\";\n        }\n        return contrastRatio >= 4.5 ? \"AA\" : \"\";\n    },\n    isDark: function() {\n        // YIQ equation from http://24ways.org/2010/calculating-color-contrast\n        var rgb = this.rgb().color;\n        var yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;\n        return yiq < 128;\n    },\n    isLight: function() {\n        return !this.isDark();\n    },\n    negate: function() {\n        var rgb = this.rgb();\n        for(var i = 0; i < 3; i++){\n            rgb.color[i] = 255 - rgb.color[i];\n        }\n        return rgb;\n    },\n    lighten: function(ratio) {\n        var hsl = this.hsl();\n        hsl.color[2] += hsl.color[2] * ratio;\n        return hsl;\n    },\n    darken: function(ratio) {\n        var hsl = this.hsl();\n        hsl.color[2] -= hsl.color[2] * ratio;\n        return hsl;\n    },\n    saturate: function(ratio) {\n        var hsl = this.hsl();\n        hsl.color[1] += hsl.color[1] * ratio;\n        return hsl;\n    },\n    desaturate: function(ratio) {\n        var hsl = this.hsl();\n        hsl.color[1] -= hsl.color[1] * ratio;\n        return hsl;\n    },\n    whiten: function(ratio) {\n        var hwb = this.hwb();\n        hwb.color[1] += hwb.color[1] * ratio;\n        return hwb;\n    },\n    blacken: function(ratio) {\n        var hwb = this.hwb();\n        hwb.color[2] += hwb.color[2] * ratio;\n        return hwb;\n    },\n    grayscale: function() {\n        // http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale\n        var rgb = this.rgb().color;\n        var val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;\n        return Color.rgb(val, val, val);\n    },\n    fade: function(ratio) {\n        return this.alpha(this.valpha - this.valpha * ratio);\n    },\n    opaquer: function(ratio) {\n        return this.alpha(this.valpha + this.valpha * ratio);\n    },\n    rotate: function(degrees) {\n        var hsl = this.hsl();\n        var hue = hsl.color[0];\n        hue = (hue + degrees) % 360;\n        hue = hue < 0 ? 360 + hue : hue;\n        hsl.color[0] = hue;\n        return hsl;\n    },\n    mix: function(mixinColor, weight) {\n        // ported from sass implementation in C\n        // https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209\n        if (!mixinColor || !mixinColor.rgb) {\n            throw new Error('Argument to \"mix\" was not a Color instance, but rather an instance of ' + typeof mixinColor);\n        }\n        var color1 = mixinColor.rgb();\n        var color2 = this.rgb();\n        var p = weight === undefined ? 0.5 : weight;\n        var w = 2 * p - 1;\n        var a = color1.alpha() - color2.alpha();\n        var w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n        var w2 = 1 - w1;\n        return Color.rgb(w1 * color1.red() + w2 * color2.red(), w1 * color1.green() + w2 * color2.green(), w1 * color1.blue() + w2 * color2.blue(), color1.alpha() * p + color2.alpha() * (1 - p));\n    }\n};\n// model conversion methods and static constructors\nObject.keys(convert).forEach(function(model) {\n    if (skippedModels.indexOf(model) !== -1) {\n        return;\n    }\n    var channels = convert[model].channels;\n    // conversion methods\n    Color.prototype[model] = function() {\n        if (this.model === model) {\n            return new Color(this);\n        }\n        if (arguments.length) {\n            return new Color(arguments, model);\n        }\n        var newAlpha = typeof arguments[channels] === \"number\" ? channels : this.valpha;\n        return new Color(assertArray(convert[this.model][model].raw(this.color)).concat(newAlpha), model);\n    };\n    // 'static' construction methods\n    Color[model] = function(color) {\n        if (typeof color === \"number\") {\n            color = zeroArray(_slice.call(arguments), channels);\n        }\n        return new Color(color, model);\n    };\n});\nfunction roundTo(num, places) {\n    return Number(num.toFixed(places));\n}\nfunction roundToPlace(places) {\n    return function(num) {\n        return roundTo(num, places);\n    };\n}\nfunction getset(model, channel, modifier) {\n    model = Array.isArray(model) ? model : [\n        model\n    ];\n    model.forEach(function(m) {\n        (limiters[m] || (limiters[m] = []))[channel] = modifier;\n    });\n    model = model[0];\n    return function(val) {\n        var result;\n        if (arguments.length) {\n            if (modifier) {\n                val = modifier(val);\n            }\n            result = this[model]();\n            result.color[channel] = val;\n            return result;\n        }\n        result = this[model]().color[channel];\n        if (modifier) {\n            result = modifier(result);\n        }\n        return result;\n    };\n}\nfunction maxfn(max) {\n    return function(v) {\n        return Math.max(0, Math.min(max, v));\n    };\n}\nfunction assertArray(val) {\n    return Array.isArray(val) ? val : [\n        val\n    ];\n}\nfunction zeroArray(arr, length) {\n    for(var i = 0; i < length; i++){\n        if (typeof arr[i] !== \"number\") {\n            arr[i] = 0;\n        }\n    }\n    return arr;\n}\nmodule.exports = Color;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/color/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/color/node_modules/color-convert/conversions.js":
/*!**********************************************************************!*\
  !*** ./node_modules/color/node_modules/color-convert/conversions.js ***!
  \**********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* MIT license */ \nvar cssKeywords = __webpack_require__(/*! color-name */ \"(rsc)/./node_modules/color/node_modules/color-name/index.js\");\n// NOTE: conversions should only return primitive values (i.e. arrays, or\n//       values that give correct `typeof` results).\n//       do not use box values types (i.e. Number(), String(), etc.)\nvar reverseKeywords = {};\nfor(var key in cssKeywords){\n    if (cssKeywords.hasOwnProperty(key)) {\n        reverseKeywords[cssKeywords[key]] = key;\n    }\n}\nvar convert = module.exports = {\n    rgb: {\n        channels: 3,\n        labels: \"rgb\"\n    },\n    hsl: {\n        channels: 3,\n        labels: \"hsl\"\n    },\n    hsv: {\n        channels: 3,\n        labels: \"hsv\"\n    },\n    hwb: {\n        channels: 3,\n        labels: \"hwb\"\n    },\n    cmyk: {\n        channels: 4,\n        labels: \"cmyk\"\n    },\n    xyz: {\n        channels: 3,\n        labels: \"xyz\"\n    },\n    lab: {\n        channels: 3,\n        labels: \"lab\"\n    },\n    lch: {\n        channels: 3,\n        labels: \"lch\"\n    },\n    hex: {\n        channels: 1,\n        labels: [\n            \"hex\"\n        ]\n    },\n    keyword: {\n        channels: 1,\n        labels: [\n            \"keyword\"\n        ]\n    },\n    ansi16: {\n        channels: 1,\n        labels: [\n            \"ansi16\"\n        ]\n    },\n    ansi256: {\n        channels: 1,\n        labels: [\n            \"ansi256\"\n        ]\n    },\n    hcg: {\n        channels: 3,\n        labels: [\n            \"h\",\n            \"c\",\n            \"g\"\n        ]\n    },\n    apple: {\n        channels: 3,\n        labels: [\n            \"r16\",\n            \"g16\",\n            \"b16\"\n        ]\n    },\n    gray: {\n        channels: 1,\n        labels: [\n            \"gray\"\n        ]\n    }\n};\n// hide .channels and .labels properties\nfor(var model in convert){\n    if (convert.hasOwnProperty(model)) {\n        if (!(\"channels\" in convert[model])) {\n            throw new Error(\"missing channels property: \" + model);\n        }\n        if (!(\"labels\" in convert[model])) {\n            throw new Error(\"missing channel labels property: \" + model);\n        }\n        if (convert[model].labels.length !== convert[model].channels) {\n            throw new Error(\"channel and label counts mismatch: \" + model);\n        }\n        var channels = convert[model].channels;\n        var labels = convert[model].labels;\n        delete convert[model].channels;\n        delete convert[model].labels;\n        Object.defineProperty(convert[model], \"channels\", {\n            value: channels\n        });\n        Object.defineProperty(convert[model], \"labels\", {\n            value: labels\n        });\n    }\n}\nconvert.rgb.hsl = function(rgb) {\n    var r = rgb[0] / 255;\n    var g = rgb[1] / 255;\n    var b = rgb[2] / 255;\n    var min = Math.min(r, g, b);\n    var max = Math.max(r, g, b);\n    var delta = max - min;\n    var h;\n    var s;\n    var l;\n    if (max === min) {\n        h = 0;\n    } else if (r === max) {\n        h = (g - b) / delta;\n    } else if (g === max) {\n        h = 2 + (b - r) / delta;\n    } else if (b === max) {\n        h = 4 + (r - g) / delta;\n    }\n    h = Math.min(h * 60, 360);\n    if (h < 0) {\n        h += 360;\n    }\n    l = (min + max) / 2;\n    if (max === min) {\n        s = 0;\n    } else if (l <= 0.5) {\n        s = delta / (max + min);\n    } else {\n        s = delta / (2 - max - min);\n    }\n    return [\n        h,\n        s * 100,\n        l * 100\n    ];\n};\nconvert.rgb.hsv = function(rgb) {\n    var rdif;\n    var gdif;\n    var bdif;\n    var h;\n    var s;\n    var r = rgb[0] / 255;\n    var g = rgb[1] / 255;\n    var b = rgb[2] / 255;\n    var v = Math.max(r, g, b);\n    var diff = v - Math.min(r, g, b);\n    var diffc = function(c) {\n        return (v - c) / 6 / diff + 1 / 2;\n    };\n    if (diff === 0) {\n        h = s = 0;\n    } else {\n        s = diff / v;\n        rdif = diffc(r);\n        gdif = diffc(g);\n        bdif = diffc(b);\n        if (r === v) {\n            h = bdif - gdif;\n        } else if (g === v) {\n            h = 1 / 3 + rdif - bdif;\n        } else if (b === v) {\n            h = 2 / 3 + gdif - rdif;\n        }\n        if (h < 0) {\n            h += 1;\n        } else if (h > 1) {\n            h -= 1;\n        }\n    }\n    return [\n        h * 360,\n        s * 100,\n        v * 100\n    ];\n};\nconvert.rgb.hwb = function(rgb) {\n    var r = rgb[0];\n    var g = rgb[1];\n    var b = rgb[2];\n    var h = convert.rgb.hsl(rgb)[0];\n    var w = 1 / 255 * Math.min(r, Math.min(g, b));\n    b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));\n    return [\n        h,\n        w * 100,\n        b * 100\n    ];\n};\nconvert.rgb.cmyk = function(rgb) {\n    var r = rgb[0] / 255;\n    var g = rgb[1] / 255;\n    var b = rgb[2] / 255;\n    var c;\n    var m;\n    var y;\n    var k;\n    k = Math.min(1 - r, 1 - g, 1 - b);\n    c = (1 - r - k) / (1 - k) || 0;\n    m = (1 - g - k) / (1 - k) || 0;\n    y = (1 - b - k) / (1 - k) || 0;\n    return [\n        c * 100,\n        m * 100,\n        y * 100,\n        k * 100\n    ];\n};\n/**\n * See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance\n * */ function comparativeDistance(x, y) {\n    return Math.pow(x[0] - y[0], 2) + Math.pow(x[1] - y[1], 2) + Math.pow(x[2] - y[2], 2);\n}\nconvert.rgb.keyword = function(rgb) {\n    var reversed = reverseKeywords[rgb];\n    if (reversed) {\n        return reversed;\n    }\n    var currentClosestDistance = Infinity;\n    var currentClosestKeyword;\n    for(var keyword in cssKeywords){\n        if (cssKeywords.hasOwnProperty(keyword)) {\n            var value = cssKeywords[keyword];\n            // Compute comparative distance\n            var distance = comparativeDistance(rgb, value);\n            // Check if its less, if so set as closest\n            if (distance < currentClosestDistance) {\n                currentClosestDistance = distance;\n                currentClosestKeyword = keyword;\n            }\n        }\n    }\n    return currentClosestKeyword;\n};\nconvert.keyword.rgb = function(keyword) {\n    return cssKeywords[keyword];\n};\nconvert.rgb.xyz = function(rgb) {\n    var r = rgb[0] / 255;\n    var g = rgb[1] / 255;\n    var b = rgb[2] / 255;\n    // assume sRGB\n    r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;\n    g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;\n    b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;\n    var x = r * 0.4124 + g * 0.3576 + b * 0.1805;\n    var y = r * 0.2126 + g * 0.7152 + b * 0.0722;\n    var z = r * 0.0193 + g * 0.1192 + b * 0.9505;\n    return [\n        x * 100,\n        y * 100,\n        z * 100\n    ];\n};\nconvert.rgb.lab = function(rgb) {\n    var xyz = convert.rgb.xyz(rgb);\n    var x = xyz[0];\n    var y = xyz[1];\n    var z = xyz[2];\n    var l;\n    var a;\n    var b;\n    x /= 95.047;\n    y /= 100;\n    z /= 108.883;\n    x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;\n    y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;\n    z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;\n    l = 116 * y - 16;\n    a = 500 * (x - y);\n    b = 200 * (y - z);\n    return [\n        l,\n        a,\n        b\n    ];\n};\nconvert.hsl.rgb = function(hsl) {\n    var h = hsl[0] / 360;\n    var s = hsl[1] / 100;\n    var l = hsl[2] / 100;\n    var t1;\n    var t2;\n    var t3;\n    var rgb;\n    var val;\n    if (s === 0) {\n        val = l * 255;\n        return [\n            val,\n            val,\n            val\n        ];\n    }\n    if (l < 0.5) {\n        t2 = l * (1 + s);\n    } else {\n        t2 = l + s - l * s;\n    }\n    t1 = 2 * l - t2;\n    rgb = [\n        0,\n        0,\n        0\n    ];\n    for(var i = 0; i < 3; i++){\n        t3 = h + 1 / 3 * -(i - 1);\n        if (t3 < 0) {\n            t3++;\n        }\n        if (t3 > 1) {\n            t3--;\n        }\n        if (6 * t3 < 1) {\n            val = t1 + (t2 - t1) * 6 * t3;\n        } else if (2 * t3 < 1) {\n            val = t2;\n        } else if (3 * t3 < 2) {\n            val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;\n        } else {\n            val = t1;\n        }\n        rgb[i] = val * 255;\n    }\n    return rgb;\n};\nconvert.hsl.hsv = function(hsl) {\n    var h = hsl[0];\n    var s = hsl[1] / 100;\n    var l = hsl[2] / 100;\n    var smin = s;\n    var lmin = Math.max(l, 0.01);\n    var sv;\n    var v;\n    l *= 2;\n    s *= l <= 1 ? l : 2 - l;\n    smin *= lmin <= 1 ? lmin : 2 - lmin;\n    v = (l + s) / 2;\n    sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);\n    return [\n        h,\n        sv * 100,\n        v * 100\n    ];\n};\nconvert.hsv.rgb = function(hsv) {\n    var h = hsv[0] / 60;\n    var s = hsv[1] / 100;\n    var v = hsv[2] / 100;\n    var hi = Math.floor(h) % 6;\n    var f = h - Math.floor(h);\n    var p = 255 * v * (1 - s);\n    var q = 255 * v * (1 - s * f);\n    var t = 255 * v * (1 - s * (1 - f));\n    v *= 255;\n    switch(hi){\n        case 0:\n            return [\n                v,\n                t,\n                p\n            ];\n        case 1:\n            return [\n                q,\n                v,\n                p\n            ];\n        case 2:\n            return [\n                p,\n                v,\n                t\n            ];\n        case 3:\n            return [\n                p,\n                q,\n                v\n            ];\n        case 4:\n            return [\n                t,\n                p,\n                v\n            ];\n        case 5:\n            return [\n                v,\n                p,\n                q\n            ];\n    }\n};\nconvert.hsv.hsl = function(hsv) {\n    var h = hsv[0];\n    var s = hsv[1] / 100;\n    var v = hsv[2] / 100;\n    var vmin = Math.max(v, 0.01);\n    var lmin;\n    var sl;\n    var l;\n    l = (2 - s) * v;\n    lmin = (2 - s) * vmin;\n    sl = s * vmin;\n    sl /= lmin <= 1 ? lmin : 2 - lmin;\n    sl = sl || 0;\n    l /= 2;\n    return [\n        h,\n        sl * 100,\n        l * 100\n    ];\n};\n// http://dev.w3.org/csswg/css-color/#hwb-to-rgb\nconvert.hwb.rgb = function(hwb) {\n    var h = hwb[0] / 360;\n    var wh = hwb[1] / 100;\n    var bl = hwb[2] / 100;\n    var ratio = wh + bl;\n    var i;\n    var v;\n    var f;\n    var n;\n    // wh + bl cant be > 1\n    if (ratio > 1) {\n        wh /= ratio;\n        bl /= ratio;\n    }\n    i = Math.floor(6 * h);\n    v = 1 - bl;\n    f = 6 * h - i;\n    if ((i & 0x01) !== 0) {\n        f = 1 - f;\n    }\n    n = wh + f * (v - wh); // linear interpolation\n    var r;\n    var g;\n    var b;\n    switch(i){\n        default:\n        case 6:\n        case 0:\n            r = v;\n            g = n;\n            b = wh;\n            break;\n        case 1:\n            r = n;\n            g = v;\n            b = wh;\n            break;\n        case 2:\n            r = wh;\n            g = v;\n            b = n;\n            break;\n        case 3:\n            r = wh;\n            g = n;\n            b = v;\n            break;\n        case 4:\n            r = n;\n            g = wh;\n            b = v;\n            break;\n        case 5:\n            r = v;\n            g = wh;\n            b = n;\n            break;\n    }\n    return [\n        r * 255,\n        g * 255,\n        b * 255\n    ];\n};\nconvert.cmyk.rgb = function(cmyk) {\n    var c = cmyk[0] / 100;\n    var m = cmyk[1] / 100;\n    var y = cmyk[2] / 100;\n    var k = cmyk[3] / 100;\n    var r;\n    var g;\n    var b;\n    r = 1 - Math.min(1, c * (1 - k) + k);\n    g = 1 - Math.min(1, m * (1 - k) + k);\n    b = 1 - Math.min(1, y * (1 - k) + k);\n    return [\n        r * 255,\n        g * 255,\n        b * 255\n    ];\n};\nconvert.xyz.rgb = function(xyz) {\n    var x = xyz[0] / 100;\n    var y = xyz[1] / 100;\n    var z = xyz[2] / 100;\n    var r;\n    var g;\n    var b;\n    r = x * 3.2406 + y * -1.5372 + z * -0.4986;\n    g = x * -0.9689 + y * 1.8758 + z * 0.0415;\n    b = x * 0.0557 + y * -0.2040 + z * 1.0570;\n    // assume sRGB\n    r = r > 0.0031308 ? 1.055 * Math.pow(r, 1.0 / 2.4) - 0.055 : r * 12.92;\n    g = g > 0.0031308 ? 1.055 * Math.pow(g, 1.0 / 2.4) - 0.055 : g * 12.92;\n    b = b > 0.0031308 ? 1.055 * Math.pow(b, 1.0 / 2.4) - 0.055 : b * 12.92;\n    r = Math.min(Math.max(0, r), 1);\n    g = Math.min(Math.max(0, g), 1);\n    b = Math.min(Math.max(0, b), 1);\n    return [\n        r * 255,\n        g * 255,\n        b * 255\n    ];\n};\nconvert.xyz.lab = function(xyz) {\n    var x = xyz[0];\n    var y = xyz[1];\n    var z = xyz[2];\n    var l;\n    var a;\n    var b;\n    x /= 95.047;\n    y /= 100;\n    z /= 108.883;\n    x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;\n    y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;\n    z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;\n    l = 116 * y - 16;\n    a = 500 * (x - y);\n    b = 200 * (y - z);\n    return [\n        l,\n        a,\n        b\n    ];\n};\nconvert.lab.xyz = function(lab) {\n    var l = lab[0];\n    var a = lab[1];\n    var b = lab[2];\n    var x;\n    var y;\n    var z;\n    y = (l + 16) / 116;\n    x = a / 500 + y;\n    z = y - b / 200;\n    var y2 = Math.pow(y, 3);\n    var x2 = Math.pow(x, 3);\n    var z2 = Math.pow(z, 3);\n    y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;\n    x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;\n    z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;\n    x *= 95.047;\n    y *= 100;\n    z *= 108.883;\n    return [\n        x,\n        y,\n        z\n    ];\n};\nconvert.lab.lch = function(lab) {\n    var l = lab[0];\n    var a = lab[1];\n    var b = lab[2];\n    var hr;\n    var h;\n    var c;\n    hr = Math.atan2(b, a);\n    h = hr * 360 / 2 / Math.PI;\n    if (h < 0) {\n        h += 360;\n    }\n    c = Math.sqrt(a * a + b * b);\n    return [\n        l,\n        c,\n        h\n    ];\n};\nconvert.lch.lab = function(lch) {\n    var l = lch[0];\n    var c = lch[1];\n    var h = lch[2];\n    var a;\n    var b;\n    var hr;\n    hr = h / 360 * 2 * Math.PI;\n    a = c * Math.cos(hr);\n    b = c * Math.sin(hr);\n    return [\n        l,\n        a,\n        b\n    ];\n};\nconvert.rgb.ansi16 = function(args) {\n    var r = args[0];\n    var g = args[1];\n    var b = args[2];\n    var value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2]; // hsv -> ansi16 optimization\n    value = Math.round(value / 50);\n    if (value === 0) {\n        return 30;\n    }\n    var ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));\n    if (value === 2) {\n        ansi += 60;\n    }\n    return ansi;\n};\nconvert.hsv.ansi16 = function(args) {\n    // optimization here; we already know the value and don't need to get\n    // it converted for us.\n    return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);\n};\nconvert.rgb.ansi256 = function(args) {\n    var r = args[0];\n    var g = args[1];\n    var b = args[2];\n    // we use the extended greyscale palette here, with the exception of\n    // black and white. normal palette only has 4 greyscale shades.\n    if (r === g && g === b) {\n        if (r < 8) {\n            return 16;\n        }\n        if (r > 248) {\n            return 231;\n        }\n        return Math.round((r - 8) / 247 * 24) + 232;\n    }\n    var ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);\n    return ansi;\n};\nconvert.ansi16.rgb = function(args) {\n    var color = args % 10;\n    // handle greyscale\n    if (color === 0 || color === 7) {\n        if (args > 50) {\n            color += 3.5;\n        }\n        color = color / 10.5 * 255;\n        return [\n            color,\n            color,\n            color\n        ];\n    }\n    var mult = (~~(args > 50) + 1) * 0.5;\n    var r = (color & 1) * mult * 255;\n    var g = (color >> 1 & 1) * mult * 255;\n    var b = (color >> 2 & 1) * mult * 255;\n    return [\n        r,\n        g,\n        b\n    ];\n};\nconvert.ansi256.rgb = function(args) {\n    // handle greyscale\n    if (args >= 232) {\n        var c = (args - 232) * 10 + 8;\n        return [\n            c,\n            c,\n            c\n        ];\n    }\n    args -= 16;\n    var rem;\n    var r = Math.floor(args / 36) / 5 * 255;\n    var g = Math.floor((rem = args % 36) / 6) / 5 * 255;\n    var b = rem % 6 / 5 * 255;\n    return [\n        r,\n        g,\n        b\n    ];\n};\nconvert.rgb.hex = function(args) {\n    var integer = ((Math.round(args[0]) & 0xFF) << 16) + ((Math.round(args[1]) & 0xFF) << 8) + (Math.round(args[2]) & 0xFF);\n    var string = integer.toString(16).toUpperCase();\n    return \"000000\".substring(string.length) + string;\n};\nconvert.hex.rgb = function(args) {\n    var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);\n    if (!match) {\n        return [\n            0,\n            0,\n            0\n        ];\n    }\n    var colorString = match[0];\n    if (match[0].length === 3) {\n        colorString = colorString.split(\"\").map(function(char) {\n            return char + char;\n        }).join(\"\");\n    }\n    var integer = parseInt(colorString, 16);\n    var r = integer >> 16 & 0xFF;\n    var g = integer >> 8 & 0xFF;\n    var b = integer & 0xFF;\n    return [\n        r,\n        g,\n        b\n    ];\n};\nconvert.rgb.hcg = function(rgb) {\n    var r = rgb[0] / 255;\n    var g = rgb[1] / 255;\n    var b = rgb[2] / 255;\n    var max = Math.max(Math.max(r, g), b);\n    var min = Math.min(Math.min(r, g), b);\n    var chroma = max - min;\n    var grayscale;\n    var hue;\n    if (chroma < 1) {\n        grayscale = min / (1 - chroma);\n    } else {\n        grayscale = 0;\n    }\n    if (chroma <= 0) {\n        hue = 0;\n    } else if (max === r) {\n        hue = (g - b) / chroma % 6;\n    } else if (max === g) {\n        hue = 2 + (b - r) / chroma;\n    } else {\n        hue = 4 + (r - g) / chroma + 4;\n    }\n    hue /= 6;\n    hue %= 1;\n    return [\n        hue * 360,\n        chroma * 100,\n        grayscale * 100\n    ];\n};\nconvert.hsl.hcg = function(hsl) {\n    var s = hsl[1] / 100;\n    var l = hsl[2] / 100;\n    var c = 1;\n    var f = 0;\n    if (l < 0.5) {\n        c = 2.0 * s * l;\n    } else {\n        c = 2.0 * s * (1.0 - l);\n    }\n    if (c < 1.0) {\n        f = (l - 0.5 * c) / (1.0 - c);\n    }\n    return [\n        hsl[0],\n        c * 100,\n        f * 100\n    ];\n};\nconvert.hsv.hcg = function(hsv) {\n    var s = hsv[1] / 100;\n    var v = hsv[2] / 100;\n    var c = s * v;\n    var f = 0;\n    if (c < 1.0) {\n        f = (v - c) / (1 - c);\n    }\n    return [\n        hsv[0],\n        c * 100,\n        f * 100\n    ];\n};\nconvert.hcg.rgb = function(hcg) {\n    var h = hcg[0] / 360;\n    var c = hcg[1] / 100;\n    var g = hcg[2] / 100;\n    if (c === 0.0) {\n        return [\n            g * 255,\n            g * 255,\n            g * 255\n        ];\n    }\n    var pure = [\n        0,\n        0,\n        0\n    ];\n    var hi = h % 1 * 6;\n    var v = hi % 1;\n    var w = 1 - v;\n    var mg = 0;\n    switch(Math.floor(hi)){\n        case 0:\n            pure[0] = 1;\n            pure[1] = v;\n            pure[2] = 0;\n            break;\n        case 1:\n            pure[0] = w;\n            pure[1] = 1;\n            pure[2] = 0;\n            break;\n        case 2:\n            pure[0] = 0;\n            pure[1] = 1;\n            pure[2] = v;\n            break;\n        case 3:\n            pure[0] = 0;\n            pure[1] = w;\n            pure[2] = 1;\n            break;\n        case 4:\n            pure[0] = v;\n            pure[1] = 0;\n            pure[2] = 1;\n            break;\n        default:\n            pure[0] = 1;\n            pure[1] = 0;\n            pure[2] = w;\n    }\n    mg = (1.0 - c) * g;\n    return [\n        (c * pure[0] + mg) * 255,\n        (c * pure[1] + mg) * 255,\n        (c * pure[2] + mg) * 255\n    ];\n};\nconvert.hcg.hsv = function(hcg) {\n    var c = hcg[1] / 100;\n    var g = hcg[2] / 100;\n    var v = c + g * (1.0 - c);\n    var f = 0;\n    if (v > 0.0) {\n        f = c / v;\n    }\n    return [\n        hcg[0],\n        f * 100,\n        v * 100\n    ];\n};\nconvert.hcg.hsl = function(hcg) {\n    var c = hcg[1] / 100;\n    var g = hcg[2] / 100;\n    var l = g * (1.0 - c) + 0.5 * c;\n    var s = 0;\n    if (l > 0.0 && l < 0.5) {\n        s = c / (2 * l);\n    } else if (l >= 0.5 && l < 1.0) {\n        s = c / (2 * (1 - l));\n    }\n    return [\n        hcg[0],\n        s * 100,\n        l * 100\n    ];\n};\nconvert.hcg.hwb = function(hcg) {\n    var c = hcg[1] / 100;\n    var g = hcg[2] / 100;\n    var v = c + g * (1.0 - c);\n    return [\n        hcg[0],\n        (v - c) * 100,\n        (1 - v) * 100\n    ];\n};\nconvert.hwb.hcg = function(hwb) {\n    var w = hwb[1] / 100;\n    var b = hwb[2] / 100;\n    var v = 1 - b;\n    var c = v - w;\n    var g = 0;\n    if (c < 1) {\n        g = (v - c) / (1 - c);\n    }\n    return [\n        hwb[0],\n        c * 100,\n        g * 100\n    ];\n};\nconvert.apple.rgb = function(apple) {\n    return [\n        apple[0] / 65535 * 255,\n        apple[1] / 65535 * 255,\n        apple[2] / 65535 * 255\n    ];\n};\nconvert.rgb.apple = function(rgb) {\n    return [\n        rgb[0] / 255 * 65535,\n        rgb[1] / 255 * 65535,\n        rgb[2] / 255 * 65535\n    ];\n};\nconvert.gray.rgb = function(args) {\n    return [\n        args[0] / 100 * 255,\n        args[0] / 100 * 255,\n        args[0] / 100 * 255\n    ];\n};\nconvert.gray.hsl = convert.gray.hsv = function(args) {\n    return [\n        0,\n        0,\n        args[0]\n    ];\n};\nconvert.gray.hwb = function(gray) {\n    return [\n        0,\n        100,\n        gray[0]\n    ];\n};\nconvert.gray.cmyk = function(gray) {\n    return [\n        0,\n        0,\n        0,\n        gray[0]\n    ];\n};\nconvert.gray.lab = function(gray) {\n    return [\n        gray[0],\n        0,\n        0\n    ];\n};\nconvert.gray.hex = function(gray) {\n    var val = Math.round(gray[0] / 100 * 255) & 0xFF;\n    var integer = (val << 16) + (val << 8) + val;\n    var string = integer.toString(16).toUpperCase();\n    return \"000000\".substring(string.length) + string;\n};\nconvert.rgb.gray = function(rgb) {\n    var val = (rgb[0] + rgb[1] + rgb[2]) / 3;\n    return [\n        val / 255 * 100\n    ];\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/color/node_modules/color-convert/conversions.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/color/node_modules/color-convert/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/color/node_modules/color-convert/index.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar conversions = __webpack_require__(/*! ./conversions */ \"(rsc)/./node_modules/color/node_modules/color-convert/conversions.js\");\nvar route = __webpack_require__(/*! ./route */ \"(rsc)/./node_modules/color/node_modules/color-convert/route.js\");\nvar convert = {};\nvar models = Object.keys(conversions);\nfunction wrapRaw(fn) {\n    var wrappedFn = function(args) {\n        if (args === undefined || args === null) {\n            return args;\n        }\n        if (arguments.length > 1) {\n            args = Array.prototype.slice.call(arguments);\n        }\n        return fn(args);\n    };\n    // preserve .conversion property if there is one\n    if (\"conversion\" in fn) {\n        wrappedFn.conversion = fn.conversion;\n    }\n    return wrappedFn;\n}\nfunction wrapRounded(fn) {\n    var wrappedFn = function(args) {\n        if (args === undefined || args === null) {\n            return args;\n        }\n        if (arguments.length > 1) {\n            args = Array.prototype.slice.call(arguments);\n        }\n        var result = fn(args);\n        // we're assuming the result is an array here.\n        // see notice in conversions.js; don't use box types\n        // in conversion functions.\n        if (typeof result === \"object\") {\n            for(var len = result.length, i = 0; i < len; i++){\n                result[i] = Math.round(result[i]);\n            }\n        }\n        return result;\n    };\n    // preserve .conversion property if there is one\n    if (\"conversion\" in fn) {\n        wrappedFn.conversion = fn.conversion;\n    }\n    return wrappedFn;\n}\nmodels.forEach(function(fromModel) {\n    convert[fromModel] = {};\n    Object.defineProperty(convert[fromModel], \"channels\", {\n        value: conversions[fromModel].channels\n    });\n    Object.defineProperty(convert[fromModel], \"labels\", {\n        value: conversions[fromModel].labels\n    });\n    var routes = route(fromModel);\n    var routeModels = Object.keys(routes);\n    routeModels.forEach(function(toModel) {\n        var fn = routes[toModel];\n        convert[fromModel][toModel] = wrapRounded(fn);\n        convert[fromModel][toModel].raw = wrapRaw(fn);\n    });\n});\nmodule.exports = convert;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvY29sb3Ivbm9kZV9tb2R1bGVzL2NvbG9yLWNvbnZlcnQvaW5kZXguanMiLCJtYXBwaW5ncyI6IjtBQUFBLElBQUlBLGNBQWNDLG1CQUFPQSxDQUFDO0FBQzFCLElBQUlDLFFBQVFELG1CQUFPQSxDQUFDO0FBRXBCLElBQUlFLFVBQVUsQ0FBQztBQUVmLElBQUlDLFNBQVNDLE9BQU9DLElBQUksQ0FBQ047QUFFekIsU0FBU08sUUFBUUMsRUFBRTtJQUNsQixJQUFJQyxZQUFZLFNBQVVDLElBQUk7UUFDN0IsSUFBSUEsU0FBU0MsYUFBYUQsU0FBUyxNQUFNO1lBQ3hDLE9BQU9BO1FBQ1I7UUFFQSxJQUFJRSxVQUFVQyxNQUFNLEdBQUcsR0FBRztZQUN6QkgsT0FBT0ksTUFBTUMsU0FBUyxDQUFDQyxLQUFLLENBQUNDLElBQUksQ0FBQ0w7UUFDbkM7UUFFQSxPQUFPSixHQUFHRTtJQUNYO0lBRUEsZ0RBQWdEO0lBQ2hELElBQUksZ0JBQWdCRixJQUFJO1FBQ3ZCQyxVQUFVUyxVQUFVLEdBQUdWLEdBQUdVLFVBQVU7SUFDckM7SUFFQSxPQUFPVDtBQUNSO0FBRUEsU0FBU1UsWUFBWVgsRUFBRTtJQUN0QixJQUFJQyxZQUFZLFNBQVVDLElBQUk7UUFDN0IsSUFBSUEsU0FBU0MsYUFBYUQsU0FBUyxNQUFNO1lBQ3hDLE9BQU9BO1FBQ1I7UUFFQSxJQUFJRSxVQUFVQyxNQUFNLEdBQUcsR0FBRztZQUN6QkgsT0FBT0ksTUFBTUMsU0FBUyxDQUFDQyxLQUFLLENBQUNDLElBQUksQ0FBQ0w7UUFDbkM7UUFFQSxJQUFJUSxTQUFTWixHQUFHRTtRQUVoQiw4Q0FBOEM7UUFDOUMsb0RBQW9EO1FBQ3BELDJCQUEyQjtRQUMzQixJQUFJLE9BQU9VLFdBQVcsVUFBVTtZQUMvQixJQUFLLElBQUlDLE1BQU1ELE9BQU9QLE1BQU0sRUFBRVMsSUFBSSxHQUFHQSxJQUFJRCxLQUFLQyxJQUFLO2dCQUNsREYsTUFBTSxDQUFDRSxFQUFFLEdBQUdDLEtBQUtDLEtBQUssQ0FBQ0osTUFBTSxDQUFDRSxFQUFFO1lBQ2pDO1FBQ0Q7UUFFQSxPQUFPRjtJQUNSO0lBRUEsZ0RBQWdEO0lBQ2hELElBQUksZ0JBQWdCWixJQUFJO1FBQ3ZCQyxVQUFVUyxVQUFVLEdBQUdWLEdBQUdVLFVBQVU7SUFDckM7SUFFQSxPQUFPVDtBQUNSO0FBRUFMLE9BQU9xQixPQUFPLENBQUMsU0FBVUMsU0FBUztJQUNqQ3ZCLE9BQU8sQ0FBQ3VCLFVBQVUsR0FBRyxDQUFDO0lBRXRCckIsT0FBT3NCLGNBQWMsQ0FBQ3hCLE9BQU8sQ0FBQ3VCLFVBQVUsRUFBRSxZQUFZO1FBQUNFLE9BQU81QixXQUFXLENBQUMwQixVQUFVLENBQUNHLFFBQVE7SUFBQTtJQUM3RnhCLE9BQU9zQixjQUFjLENBQUN4QixPQUFPLENBQUN1QixVQUFVLEVBQUUsVUFBVTtRQUFDRSxPQUFPNUIsV0FBVyxDQUFDMEIsVUFBVSxDQUFDSSxNQUFNO0lBQUE7SUFFekYsSUFBSUMsU0FBUzdCLE1BQU13QjtJQUNuQixJQUFJTSxjQUFjM0IsT0FBT0MsSUFBSSxDQUFDeUI7SUFFOUJDLFlBQVlQLE9BQU8sQ0FBQyxTQUFVUSxPQUFPO1FBQ3BDLElBQUl6QixLQUFLdUIsTUFBTSxDQUFDRSxRQUFRO1FBRXhCOUIsT0FBTyxDQUFDdUIsVUFBVSxDQUFDTyxRQUFRLEdBQUdkLFlBQVlYO1FBQzFDTCxPQUFPLENBQUN1QixVQUFVLENBQUNPLFFBQVEsQ0FBQ0MsR0FBRyxHQUFHM0IsUUFBUUM7SUFDM0M7QUFDRDtBQUVBMkIsT0FBT0MsT0FBTyxHQUFHakMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iaWdjb21tZXJjZS8uL25vZGVfbW9kdWxlcy9jb2xvci9ub2RlX21vZHVsZXMvY29sb3ItY29udmVydC9pbmRleC5qcz9lYmIyIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBjb252ZXJzaW9ucyA9IHJlcXVpcmUoJy4vY29udmVyc2lvbnMnKTtcbnZhciByb3V0ZSA9IHJlcXVpcmUoJy4vcm91dGUnKTtcblxudmFyIGNvbnZlcnQgPSB7fTtcblxudmFyIG1vZGVscyA9IE9iamVjdC5rZXlzKGNvbnZlcnNpb25zKTtcblxuZnVuY3Rpb24gd3JhcFJhdyhmbikge1xuXHR2YXIgd3JhcHBlZEZuID0gZnVuY3Rpb24gKGFyZ3MpIHtcblx0XHRpZiAoYXJncyA9PT0gdW5kZWZpbmVkIHx8IGFyZ3MgPT09IG51bGwpIHtcblx0XHRcdHJldHVybiBhcmdzO1xuXHRcdH1cblxuXHRcdGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuXHRcdFx0YXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZuKGFyZ3MpO1xuXHR9O1xuXG5cdC8vIHByZXNlcnZlIC5jb252ZXJzaW9uIHByb3BlcnR5IGlmIHRoZXJlIGlzIG9uZVxuXHRpZiAoJ2NvbnZlcnNpb24nIGluIGZuKSB7XG5cdFx0d3JhcHBlZEZuLmNvbnZlcnNpb24gPSBmbi5jb252ZXJzaW9uO1xuXHR9XG5cblx0cmV0dXJuIHdyYXBwZWRGbjtcbn1cblxuZnVuY3Rpb24gd3JhcFJvdW5kZWQoZm4pIHtcblx0dmFyIHdyYXBwZWRGbiA9IGZ1bmN0aW9uIChhcmdzKSB7XG5cdFx0aWYgKGFyZ3MgPT09IHVuZGVmaW5lZCB8fCBhcmdzID09PSBudWxsKSB7XG5cdFx0XHRyZXR1cm4gYXJncztcblx0XHR9XG5cblx0XHRpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcblx0XHRcdGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuXHRcdH1cblxuXHRcdHZhciByZXN1bHQgPSBmbihhcmdzKTtcblxuXHRcdC8vIHdlJ3JlIGFzc3VtaW5nIHRoZSByZXN1bHQgaXMgYW4gYXJyYXkgaGVyZS5cblx0XHQvLyBzZWUgbm90aWNlIGluIGNvbnZlcnNpb25zLmpzOyBkb24ndCB1c2UgYm94IHR5cGVzXG5cdFx0Ly8gaW4gY29udmVyc2lvbiBmdW5jdGlvbnMuXG5cdFx0aWYgKHR5cGVvZiByZXN1bHQgPT09ICdvYmplY3QnKSB7XG5cdFx0XHRmb3IgKHZhciBsZW4gPSByZXN1bHQubGVuZ3RoLCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRcdHJlc3VsdFtpXSA9IE1hdGgucm91bmQocmVzdWx0W2ldKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9O1xuXG5cdC8vIHByZXNlcnZlIC5jb252ZXJzaW9uIHByb3BlcnR5IGlmIHRoZXJlIGlzIG9uZVxuXHRpZiAoJ2NvbnZlcnNpb24nIGluIGZuKSB7XG5cdFx0d3JhcHBlZEZuLmNvbnZlcnNpb24gPSBmbi5jb252ZXJzaW9uO1xuXHR9XG5cblx0cmV0dXJuIHdyYXBwZWRGbjtcbn1cblxubW9kZWxzLmZvckVhY2goZnVuY3Rpb24gKGZyb21Nb2RlbCkge1xuXHRjb252ZXJ0W2Zyb21Nb2RlbF0gPSB7fTtcblxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoY29udmVydFtmcm9tTW9kZWxdLCAnY2hhbm5lbHMnLCB7dmFsdWU6IGNvbnZlcnNpb25zW2Zyb21Nb2RlbF0uY2hhbm5lbHN9KTtcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGNvbnZlcnRbZnJvbU1vZGVsXSwgJ2xhYmVscycsIHt2YWx1ZTogY29udmVyc2lvbnNbZnJvbU1vZGVsXS5sYWJlbHN9KTtcblxuXHR2YXIgcm91dGVzID0gcm91dGUoZnJvbU1vZGVsKTtcblx0dmFyIHJvdXRlTW9kZWxzID0gT2JqZWN0LmtleXMocm91dGVzKTtcblxuXHRyb3V0ZU1vZGVscy5mb3JFYWNoKGZ1bmN0aW9uICh0b01vZGVsKSB7XG5cdFx0dmFyIGZuID0gcm91dGVzW3RvTW9kZWxdO1xuXG5cdFx0Y29udmVydFtmcm9tTW9kZWxdW3RvTW9kZWxdID0gd3JhcFJvdW5kZWQoZm4pO1xuXHRcdGNvbnZlcnRbZnJvbU1vZGVsXVt0b01vZGVsXS5yYXcgPSB3cmFwUmF3KGZuKTtcblx0fSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBjb252ZXJ0O1xuIl0sIm5hbWVzIjpbImNvbnZlcnNpb25zIiwicmVxdWlyZSIsInJvdXRlIiwiY29udmVydCIsIm1vZGVscyIsIk9iamVjdCIsImtleXMiLCJ3cmFwUmF3IiwiZm4iLCJ3cmFwcGVkRm4iLCJhcmdzIiwidW5kZWZpbmVkIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJzbGljZSIsImNhbGwiLCJjb252ZXJzaW9uIiwid3JhcFJvdW5kZWQiLCJyZXN1bHQiLCJsZW4iLCJpIiwiTWF0aCIsInJvdW5kIiwiZm9yRWFjaCIsImZyb21Nb2RlbCIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJjaGFubmVscyIsImxhYmVscyIsInJvdXRlcyIsInJvdXRlTW9kZWxzIiwidG9Nb2RlbCIsInJhdyIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/color/node_modules/color-convert/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/color/node_modules/color-convert/route.js":
/*!****************************************************************!*\
  !*** ./node_modules/color/node_modules/color-convert/route.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar conversions = __webpack_require__(/*! ./conversions */ \"(rsc)/./node_modules/color/node_modules/color-convert/conversions.js\");\n/*\n\tthis function routes a model to all other models.\n\n\tall functions that are routed have a property `.conversion` attached\n\tto the returned synthetic function. This property is an array\n\tof strings, each with the steps in between the 'from' and 'to'\n\tcolor models (inclusive).\n\n\tconversions that are not possible simply are not included.\n*/ function buildGraph() {\n    var graph = {};\n    // https://jsperf.com/object-keys-vs-for-in-with-closure/3\n    var models = Object.keys(conversions);\n    for(var len = models.length, i = 0; i < len; i++){\n        graph[models[i]] = {\n            // http://jsperf.com/1-vs-infinity\n            // micro-opt, but this is simple.\n            distance: -1,\n            parent: null\n        };\n    }\n    return graph;\n}\n// https://en.wikipedia.org/wiki/Breadth-first_search\nfunction deriveBFS(fromModel) {\n    var graph = buildGraph();\n    var queue = [\n        fromModel\n    ]; // unshift -> queue -> pop\n    graph[fromModel].distance = 0;\n    while(queue.length){\n        var current = queue.pop();\n        var adjacents = Object.keys(conversions[current]);\n        for(var len = adjacents.length, i = 0; i < len; i++){\n            var adjacent = adjacents[i];\n            var node = graph[adjacent];\n            if (node.distance === -1) {\n                node.distance = graph[current].distance + 1;\n                node.parent = current;\n                queue.unshift(adjacent);\n            }\n        }\n    }\n    return graph;\n}\nfunction link(from, to) {\n    return function(args) {\n        return to(from(args));\n    };\n}\nfunction wrapConversion(toModel, graph) {\n    var path = [\n        graph[toModel].parent,\n        toModel\n    ];\n    var fn = conversions[graph[toModel].parent][toModel];\n    var cur = graph[toModel].parent;\n    while(graph[cur].parent){\n        path.unshift(graph[cur].parent);\n        fn = link(conversions[graph[cur].parent][cur], fn);\n        cur = graph[cur].parent;\n    }\n    fn.conversion = path;\n    return fn;\n}\nmodule.exports = function(fromModel) {\n    var graph = deriveBFS(fromModel);\n    var conversion = {};\n    var models = Object.keys(graph);\n    for(var len = models.length, i = 0; i < len; i++){\n        var toModel = models[i];\n        var node = graph[toModel];\n        if (node.parent === null) {\n            continue;\n        }\n        conversion[toModel] = wrapConversion(toModel, graph);\n    }\n    return conversion;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvY29sb3Ivbm9kZV9tb2R1bGVzL2NvbG9yLWNvbnZlcnQvcm91dGUuanMiLCJtYXBwaW5ncyI6IjtBQUFBLElBQUlBLGNBQWNDLG1CQUFPQSxDQUFDO0FBRTFCOzs7Ozs7Ozs7QUFTQSxHQUVBLFNBQVNDO0lBQ1IsSUFBSUMsUUFBUSxDQUFDO0lBQ2IsMERBQTBEO0lBQzFELElBQUlDLFNBQVNDLE9BQU9DLElBQUksQ0FBQ047SUFFekIsSUFBSyxJQUFJTyxNQUFNSCxPQUFPSSxNQUFNLEVBQUVDLElBQUksR0FBR0EsSUFBSUYsS0FBS0UsSUFBSztRQUNsRE4sS0FBSyxDQUFDQyxNQUFNLENBQUNLLEVBQUUsQ0FBQyxHQUFHO1lBQ2xCLGtDQUFrQztZQUNsQyxpQ0FBaUM7WUFDakNDLFVBQVUsQ0FBQztZQUNYQyxRQUFRO1FBQ1Q7SUFDRDtJQUVBLE9BQU9SO0FBQ1I7QUFFQSxxREFBcUQ7QUFDckQsU0FBU1MsVUFBVUMsU0FBUztJQUMzQixJQUFJVixRQUFRRDtJQUNaLElBQUlZLFFBQVE7UUFBQ0Q7S0FBVSxFQUFFLDBCQUEwQjtJQUVuRFYsS0FBSyxDQUFDVSxVQUFVLENBQUNILFFBQVEsR0FBRztJQUU1QixNQUFPSSxNQUFNTixNQUFNLENBQUU7UUFDcEIsSUFBSU8sVUFBVUQsTUFBTUUsR0FBRztRQUN2QixJQUFJQyxZQUFZWixPQUFPQyxJQUFJLENBQUNOLFdBQVcsQ0FBQ2UsUUFBUTtRQUVoRCxJQUFLLElBQUlSLE1BQU1VLFVBQVVULE1BQU0sRUFBRUMsSUFBSSxHQUFHQSxJQUFJRixLQUFLRSxJQUFLO1lBQ3JELElBQUlTLFdBQVdELFNBQVMsQ0FBQ1IsRUFBRTtZQUMzQixJQUFJVSxPQUFPaEIsS0FBSyxDQUFDZSxTQUFTO1lBRTFCLElBQUlDLEtBQUtULFFBQVEsS0FBSyxDQUFDLEdBQUc7Z0JBQ3pCUyxLQUFLVCxRQUFRLEdBQUdQLEtBQUssQ0FBQ1ksUUFBUSxDQUFDTCxRQUFRLEdBQUc7Z0JBQzFDUyxLQUFLUixNQUFNLEdBQUdJO2dCQUNkRCxNQUFNTSxPQUFPLENBQUNGO1lBQ2Y7UUFDRDtJQUNEO0lBRUEsT0FBT2Y7QUFDUjtBQUVBLFNBQVNrQixLQUFLQyxJQUFJLEVBQUVDLEVBQUU7SUFDckIsT0FBTyxTQUFVQyxJQUFJO1FBQ3BCLE9BQU9ELEdBQUdELEtBQUtFO0lBQ2hCO0FBQ0Q7QUFFQSxTQUFTQyxlQUFlQyxPQUFPLEVBQUV2QixLQUFLO0lBQ3JDLElBQUl3QixPQUFPO1FBQUN4QixLQUFLLENBQUN1QixRQUFRLENBQUNmLE1BQU07UUFBRWU7S0FBUTtJQUMzQyxJQUFJRSxLQUFLNUIsV0FBVyxDQUFDRyxLQUFLLENBQUN1QixRQUFRLENBQUNmLE1BQU0sQ0FBQyxDQUFDZSxRQUFRO0lBRXBELElBQUlHLE1BQU0xQixLQUFLLENBQUN1QixRQUFRLENBQUNmLE1BQU07SUFDL0IsTUFBT1IsS0FBSyxDQUFDMEIsSUFBSSxDQUFDbEIsTUFBTSxDQUFFO1FBQ3pCZ0IsS0FBS1AsT0FBTyxDQUFDakIsS0FBSyxDQUFDMEIsSUFBSSxDQUFDbEIsTUFBTTtRQUM5QmlCLEtBQUtQLEtBQUtyQixXQUFXLENBQUNHLEtBQUssQ0FBQzBCLElBQUksQ0FBQ2xCLE1BQU0sQ0FBQyxDQUFDa0IsSUFBSSxFQUFFRDtRQUMvQ0MsTUFBTTFCLEtBQUssQ0FBQzBCLElBQUksQ0FBQ2xCLE1BQU07SUFDeEI7SUFFQWlCLEdBQUdFLFVBQVUsR0FBR0g7SUFDaEIsT0FBT0M7QUFDUjtBQUVBRyxPQUFPQyxPQUFPLEdBQUcsU0FBVW5CLFNBQVM7SUFDbkMsSUFBSVYsUUFBUVMsVUFBVUM7SUFDdEIsSUFBSWlCLGFBQWEsQ0FBQztJQUVsQixJQUFJMUIsU0FBU0MsT0FBT0MsSUFBSSxDQUFDSDtJQUN6QixJQUFLLElBQUlJLE1BQU1ILE9BQU9JLE1BQU0sRUFBRUMsSUFBSSxHQUFHQSxJQUFJRixLQUFLRSxJQUFLO1FBQ2xELElBQUlpQixVQUFVdEIsTUFBTSxDQUFDSyxFQUFFO1FBQ3ZCLElBQUlVLE9BQU9oQixLQUFLLENBQUN1QixRQUFRO1FBRXpCLElBQUlQLEtBQUtSLE1BQU0sS0FBSyxNQUFNO1lBRXpCO1FBQ0Q7UUFFQW1CLFVBQVUsQ0FBQ0osUUFBUSxHQUFHRCxlQUFlQyxTQUFTdkI7SUFDL0M7SUFFQSxPQUFPMkI7QUFDUiIsInNvdXJjZXMiOlsid2VicGFjazovL2JpZ2NvbW1lcmNlLy4vbm9kZV9tb2R1bGVzL2NvbG9yL25vZGVfbW9kdWxlcy9jb2xvci1jb252ZXJ0L3JvdXRlLmpzPzY4MzIiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGNvbnZlcnNpb25zID0gcmVxdWlyZSgnLi9jb252ZXJzaW9ucycpO1xuXG4vKlxuXHR0aGlzIGZ1bmN0aW9uIHJvdXRlcyBhIG1vZGVsIHRvIGFsbCBvdGhlciBtb2RlbHMuXG5cblx0YWxsIGZ1bmN0aW9ucyB0aGF0IGFyZSByb3V0ZWQgaGF2ZSBhIHByb3BlcnR5IGAuY29udmVyc2lvbmAgYXR0YWNoZWRcblx0dG8gdGhlIHJldHVybmVkIHN5bnRoZXRpYyBmdW5jdGlvbi4gVGhpcyBwcm9wZXJ0eSBpcyBhbiBhcnJheVxuXHRvZiBzdHJpbmdzLCBlYWNoIHdpdGggdGhlIHN0ZXBzIGluIGJldHdlZW4gdGhlICdmcm9tJyBhbmQgJ3RvJ1xuXHRjb2xvciBtb2RlbHMgKGluY2x1c2l2ZSkuXG5cblx0Y29udmVyc2lvbnMgdGhhdCBhcmUgbm90IHBvc3NpYmxlIHNpbXBseSBhcmUgbm90IGluY2x1ZGVkLlxuKi9cblxuZnVuY3Rpb24gYnVpbGRHcmFwaCgpIHtcblx0dmFyIGdyYXBoID0ge307XG5cdC8vIGh0dHBzOi8vanNwZXJmLmNvbS9vYmplY3Qta2V5cy12cy1mb3ItaW4td2l0aC1jbG9zdXJlLzNcblx0dmFyIG1vZGVscyA9IE9iamVjdC5rZXlzKGNvbnZlcnNpb25zKTtcblxuXHRmb3IgKHZhciBsZW4gPSBtb2RlbHMubGVuZ3RoLCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0Z3JhcGhbbW9kZWxzW2ldXSA9IHtcblx0XHRcdC8vIGh0dHA6Ly9qc3BlcmYuY29tLzEtdnMtaW5maW5pdHlcblx0XHRcdC8vIG1pY3JvLW9wdCwgYnV0IHRoaXMgaXMgc2ltcGxlLlxuXHRcdFx0ZGlzdGFuY2U6IC0xLFxuXHRcdFx0cGFyZW50OiBudWxsXG5cdFx0fTtcblx0fVxuXG5cdHJldHVybiBncmFwaDtcbn1cblxuLy8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQnJlYWR0aC1maXJzdF9zZWFyY2hcbmZ1bmN0aW9uIGRlcml2ZUJGUyhmcm9tTW9kZWwpIHtcblx0dmFyIGdyYXBoID0gYnVpbGRHcmFwaCgpO1xuXHR2YXIgcXVldWUgPSBbZnJvbU1vZGVsXTsgLy8gdW5zaGlmdCAtPiBxdWV1ZSAtPiBwb3BcblxuXHRncmFwaFtmcm9tTW9kZWxdLmRpc3RhbmNlID0gMDtcblxuXHR3aGlsZSAocXVldWUubGVuZ3RoKSB7XG5cdFx0dmFyIGN1cnJlbnQgPSBxdWV1ZS5wb3AoKTtcblx0XHR2YXIgYWRqYWNlbnRzID0gT2JqZWN0LmtleXMoY29udmVyc2lvbnNbY3VycmVudF0pO1xuXG5cdFx0Zm9yICh2YXIgbGVuID0gYWRqYWNlbnRzLmxlbmd0aCwgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0dmFyIGFkamFjZW50ID0gYWRqYWNlbnRzW2ldO1xuXHRcdFx0dmFyIG5vZGUgPSBncmFwaFthZGphY2VudF07XG5cblx0XHRcdGlmIChub2RlLmRpc3RhbmNlID09PSAtMSkge1xuXHRcdFx0XHRub2RlLmRpc3RhbmNlID0gZ3JhcGhbY3VycmVudF0uZGlzdGFuY2UgKyAxO1xuXHRcdFx0XHRub2RlLnBhcmVudCA9IGN1cnJlbnQ7XG5cdFx0XHRcdHF1ZXVlLnVuc2hpZnQoYWRqYWNlbnQpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBncmFwaDtcbn1cblxuZnVuY3Rpb24gbGluayhmcm9tLCB0bykge1xuXHRyZXR1cm4gZnVuY3Rpb24gKGFyZ3MpIHtcblx0XHRyZXR1cm4gdG8oZnJvbShhcmdzKSk7XG5cdH07XG59XG5cbmZ1bmN0aW9uIHdyYXBDb252ZXJzaW9uKHRvTW9kZWwsIGdyYXBoKSB7XG5cdHZhciBwYXRoID0gW2dyYXBoW3RvTW9kZWxdLnBhcmVudCwgdG9Nb2RlbF07XG5cdHZhciBmbiA9IGNvbnZlcnNpb25zW2dyYXBoW3RvTW9kZWxdLnBhcmVudF1bdG9Nb2RlbF07XG5cblx0dmFyIGN1ciA9IGdyYXBoW3RvTW9kZWxdLnBhcmVudDtcblx0d2hpbGUgKGdyYXBoW2N1cl0ucGFyZW50KSB7XG5cdFx0cGF0aC51bnNoaWZ0KGdyYXBoW2N1cl0ucGFyZW50KTtcblx0XHRmbiA9IGxpbmsoY29udmVyc2lvbnNbZ3JhcGhbY3VyXS5wYXJlbnRdW2N1cl0sIGZuKTtcblx0XHRjdXIgPSBncmFwaFtjdXJdLnBhcmVudDtcblx0fVxuXG5cdGZuLmNvbnZlcnNpb24gPSBwYXRoO1xuXHRyZXR1cm4gZm47XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZyb21Nb2RlbCkge1xuXHR2YXIgZ3JhcGggPSBkZXJpdmVCRlMoZnJvbU1vZGVsKTtcblx0dmFyIGNvbnZlcnNpb24gPSB7fTtcblxuXHR2YXIgbW9kZWxzID0gT2JqZWN0LmtleXMoZ3JhcGgpO1xuXHRmb3IgKHZhciBsZW4gPSBtb2RlbHMubGVuZ3RoLCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0dmFyIHRvTW9kZWwgPSBtb2RlbHNbaV07XG5cdFx0dmFyIG5vZGUgPSBncmFwaFt0b01vZGVsXTtcblxuXHRcdGlmIChub2RlLnBhcmVudCA9PT0gbnVsbCkge1xuXHRcdFx0Ly8gbm8gcG9zc2libGUgY29udmVyc2lvbiwgb3IgdGhpcyBub2RlIGlzIHRoZSBzb3VyY2UgbW9kZWwuXG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRjb252ZXJzaW9uW3RvTW9kZWxdID0gd3JhcENvbnZlcnNpb24odG9Nb2RlbCwgZ3JhcGgpO1xuXHR9XG5cblx0cmV0dXJuIGNvbnZlcnNpb247XG59O1xuXG4iXSwibmFtZXMiOlsiY29udmVyc2lvbnMiLCJyZXF1aXJlIiwiYnVpbGRHcmFwaCIsImdyYXBoIiwibW9kZWxzIiwiT2JqZWN0Iiwia2V5cyIsImxlbiIsImxlbmd0aCIsImkiLCJkaXN0YW5jZSIsInBhcmVudCIsImRlcml2ZUJGUyIsImZyb21Nb2RlbCIsInF1ZXVlIiwiY3VycmVudCIsInBvcCIsImFkamFjZW50cyIsImFkamFjZW50Iiwibm9kZSIsInVuc2hpZnQiLCJsaW5rIiwiZnJvbSIsInRvIiwiYXJncyIsIndyYXBDb252ZXJzaW9uIiwidG9Nb2RlbCIsInBhdGgiLCJmbiIsImN1ciIsImNvbnZlcnNpb24iLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/color/node_modules/color-convert/route.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/color/node_modules/color-name/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/color/node_modules/color-name/index.js ***!
  \*************************************************************/
/***/ ((module) => {

eval("\nmodule.exports = {\n    \"aliceblue\": [\n        240,\n        248,\n        255\n    ],\n    \"antiquewhite\": [\n        250,\n        235,\n        215\n    ],\n    \"aqua\": [\n        0,\n        255,\n        255\n    ],\n    \"aquamarine\": [\n        127,\n        255,\n        212\n    ],\n    \"azure\": [\n        240,\n        255,\n        255\n    ],\n    \"beige\": [\n        245,\n        245,\n        220\n    ],\n    \"bisque\": [\n        255,\n        228,\n        196\n    ],\n    \"black\": [\n        0,\n        0,\n        0\n    ],\n    \"blanchedalmond\": [\n        255,\n        235,\n        205\n    ],\n    \"blue\": [\n        0,\n        0,\n        255\n    ],\n    \"blueviolet\": [\n        138,\n        43,\n        226\n    ],\n    \"brown\": [\n        165,\n        42,\n        42\n    ],\n    \"burlywood\": [\n        222,\n        184,\n        135\n    ],\n    \"cadetblue\": [\n        95,\n        158,\n        160\n    ],\n    \"chartreuse\": [\n        127,\n        255,\n        0\n    ],\n    \"chocolate\": [\n        210,\n        105,\n        30\n    ],\n    \"coral\": [\n        255,\n        127,\n        80\n    ],\n    \"cornflowerblue\": [\n        100,\n        149,\n        237\n    ],\n    \"cornsilk\": [\n        255,\n        248,\n        220\n    ],\n    \"crimson\": [\n        220,\n        20,\n        60\n    ],\n    \"cyan\": [\n        0,\n        255,\n        255\n    ],\n    \"darkblue\": [\n        0,\n        0,\n        139\n    ],\n    \"darkcyan\": [\n        0,\n        139,\n        139\n    ],\n    \"darkgoldenrod\": [\n        184,\n        134,\n        11\n    ],\n    \"darkgray\": [\n        169,\n        169,\n        169\n    ],\n    \"darkgreen\": [\n        0,\n        100,\n        0\n    ],\n    \"darkgrey\": [\n        169,\n        169,\n        169\n    ],\n    \"darkkhaki\": [\n        189,\n        183,\n        107\n    ],\n    \"darkmagenta\": [\n        139,\n        0,\n        139\n    ],\n    \"darkolivegreen\": [\n        85,\n        107,\n        47\n    ],\n    \"darkorange\": [\n        255,\n        140,\n        0\n    ],\n    \"darkorchid\": [\n        153,\n        50,\n        204\n    ],\n    \"darkred\": [\n        139,\n        0,\n        0\n    ],\n    \"darksalmon\": [\n        233,\n        150,\n        122\n    ],\n    \"darkseagreen\": [\n        143,\n        188,\n        143\n    ],\n    \"darkslateblue\": [\n        72,\n        61,\n        139\n    ],\n    \"darkslategray\": [\n        47,\n        79,\n        79\n    ],\n    \"darkslategrey\": [\n        47,\n        79,\n        79\n    ],\n    \"darkturquoise\": [\n        0,\n        206,\n        209\n    ],\n    \"darkviolet\": [\n        148,\n        0,\n        211\n    ],\n    \"deeppink\": [\n        255,\n        20,\n        147\n    ],\n    \"deepskyblue\": [\n        0,\n        191,\n        255\n    ],\n    \"dimgray\": [\n        105,\n        105,\n        105\n    ],\n    \"dimgrey\": [\n        105,\n        105,\n        105\n    ],\n    \"dodgerblue\": [\n        30,\n        144,\n        255\n    ],\n    \"firebrick\": [\n        178,\n        34,\n        34\n    ],\n    \"floralwhite\": [\n        255,\n        250,\n        240\n    ],\n    \"forestgreen\": [\n        34,\n        139,\n        34\n    ],\n    \"fuchsia\": [\n        255,\n        0,\n        255\n    ],\n    \"gainsboro\": [\n        220,\n        220,\n        220\n    ],\n    \"ghostwhite\": [\n        248,\n        248,\n        255\n    ],\n    \"gold\": [\n        255,\n        215,\n        0\n    ],\n    \"goldenrod\": [\n        218,\n        165,\n        32\n    ],\n    \"gray\": [\n        128,\n        128,\n        128\n    ],\n    \"green\": [\n        0,\n        128,\n        0\n    ],\n    \"greenyellow\": [\n        173,\n        255,\n        47\n    ],\n    \"grey\": [\n        128,\n        128,\n        128\n    ],\n    \"honeydew\": [\n        240,\n        255,\n        240\n    ],\n    \"hotpink\": [\n        255,\n        105,\n        180\n    ],\n    \"indianred\": [\n        205,\n        92,\n        92\n    ],\n    \"indigo\": [\n        75,\n        0,\n        130\n    ],\n    \"ivory\": [\n        255,\n        255,\n        240\n    ],\n    \"khaki\": [\n        240,\n        230,\n        140\n    ],\n    \"lavender\": [\n        230,\n        230,\n        250\n    ],\n    \"lavenderblush\": [\n        255,\n        240,\n        245\n    ],\n    \"lawngreen\": [\n        124,\n        252,\n        0\n    ],\n    \"lemonchiffon\": [\n        255,\n        250,\n        205\n    ],\n    \"lightblue\": [\n        173,\n        216,\n        230\n    ],\n    \"lightcoral\": [\n        240,\n        128,\n        128\n    ],\n    \"lightcyan\": [\n        224,\n        255,\n        255\n    ],\n    \"lightgoldenrodyellow\": [\n        250,\n        250,\n        210\n    ],\n    \"lightgray\": [\n        211,\n        211,\n        211\n    ],\n    \"lightgreen\": [\n        144,\n        238,\n        144\n    ],\n    \"lightgrey\": [\n        211,\n        211,\n        211\n    ],\n    \"lightpink\": [\n        255,\n        182,\n        193\n    ],\n    \"lightsalmon\": [\n        255,\n        160,\n        122\n    ],\n    \"lightseagreen\": [\n        32,\n        178,\n        170\n    ],\n    \"lightskyblue\": [\n        135,\n        206,\n        250\n    ],\n    \"lightslategray\": [\n        119,\n        136,\n        153\n    ],\n    \"lightslategrey\": [\n        119,\n        136,\n        153\n    ],\n    \"lightsteelblue\": [\n        176,\n        196,\n        222\n    ],\n    \"lightyellow\": [\n        255,\n        255,\n        224\n    ],\n    \"lime\": [\n        0,\n        255,\n        0\n    ],\n    \"limegreen\": [\n        50,\n        205,\n        50\n    ],\n    \"linen\": [\n        250,\n        240,\n        230\n    ],\n    \"magenta\": [\n        255,\n        0,\n        255\n    ],\n    \"maroon\": [\n        128,\n        0,\n        0\n    ],\n    \"mediumaquamarine\": [\n        102,\n        205,\n        170\n    ],\n    \"mediumblue\": [\n        0,\n        0,\n        205\n    ],\n    \"mediumorchid\": [\n        186,\n        85,\n        211\n    ],\n    \"mediumpurple\": [\n        147,\n        112,\n        219\n    ],\n    \"mediumseagreen\": [\n        60,\n        179,\n        113\n    ],\n    \"mediumslateblue\": [\n        123,\n        104,\n        238\n    ],\n    \"mediumspringgreen\": [\n        0,\n        250,\n        154\n    ],\n    \"mediumturquoise\": [\n        72,\n        209,\n        204\n    ],\n    \"mediumvioletred\": [\n        199,\n        21,\n        133\n    ],\n    \"midnightblue\": [\n        25,\n        25,\n        112\n    ],\n    \"mintcream\": [\n        245,\n        255,\n        250\n    ],\n    \"mistyrose\": [\n        255,\n        228,\n        225\n    ],\n    \"moccasin\": [\n        255,\n        228,\n        181\n    ],\n    \"navajowhite\": [\n        255,\n        222,\n        173\n    ],\n    \"navy\": [\n        0,\n        0,\n        128\n    ],\n    \"oldlace\": [\n        253,\n        245,\n        230\n    ],\n    \"olive\": [\n        128,\n        128,\n        0\n    ],\n    \"olivedrab\": [\n        107,\n        142,\n        35\n    ],\n    \"orange\": [\n        255,\n        165,\n        0\n    ],\n    \"orangered\": [\n        255,\n        69,\n        0\n    ],\n    \"orchid\": [\n        218,\n        112,\n        214\n    ],\n    \"palegoldenrod\": [\n        238,\n        232,\n        170\n    ],\n    \"palegreen\": [\n        152,\n        251,\n        152\n    ],\n    \"paleturquoise\": [\n        175,\n        238,\n        238\n    ],\n    \"palevioletred\": [\n        219,\n        112,\n        147\n    ],\n    \"papayawhip\": [\n        255,\n        239,\n        213\n    ],\n    \"peachpuff\": [\n        255,\n        218,\n        185\n    ],\n    \"peru\": [\n        205,\n        133,\n        63\n    ],\n    \"pink\": [\n        255,\n        192,\n        203\n    ],\n    \"plum\": [\n        221,\n        160,\n        221\n    ],\n    \"powderblue\": [\n        176,\n        224,\n        230\n    ],\n    \"purple\": [\n        128,\n        0,\n        128\n    ],\n    \"rebeccapurple\": [\n        102,\n        51,\n        153\n    ],\n    \"red\": [\n        255,\n        0,\n        0\n    ],\n    \"rosybrown\": [\n        188,\n        143,\n        143\n    ],\n    \"royalblue\": [\n        65,\n        105,\n        225\n    ],\n    \"saddlebrown\": [\n        139,\n        69,\n        19\n    ],\n    \"salmon\": [\n        250,\n        128,\n        114\n    ],\n    \"sandybrown\": [\n        244,\n        164,\n        96\n    ],\n    \"seagreen\": [\n        46,\n        139,\n        87\n    ],\n    \"seashell\": [\n        255,\n        245,\n        238\n    ],\n    \"sienna\": [\n        160,\n        82,\n        45\n    ],\n    \"silver\": [\n        192,\n        192,\n        192\n    ],\n    \"skyblue\": [\n        135,\n        206,\n        235\n    ],\n    \"slateblue\": [\n        106,\n        90,\n        205\n    ],\n    \"slategray\": [\n        112,\n        128,\n        144\n    ],\n    \"slategrey\": [\n        112,\n        128,\n        144\n    ],\n    \"snow\": [\n        255,\n        250,\n        250\n    ],\n    \"springgreen\": [\n        0,\n        255,\n        127\n    ],\n    \"steelblue\": [\n        70,\n        130,\n        180\n    ],\n    \"tan\": [\n        210,\n        180,\n        140\n    ],\n    \"teal\": [\n        0,\n        128,\n        128\n    ],\n    \"thistle\": [\n        216,\n        191,\n        216\n    ],\n    \"tomato\": [\n        255,\n        99,\n        71\n    ],\n    \"turquoise\": [\n        64,\n        224,\n        208\n    ],\n    \"violet\": [\n        238,\n        130,\n        238\n    ],\n    \"wheat\": [\n        245,\n        222,\n        179\n    ],\n    \"white\": [\n        255,\n        255,\n        255\n    ],\n    \"whitesmoke\": [\n        245,\n        245,\n        245\n    ],\n    \"yellow\": [\n        255,\n        255,\n        0\n    ],\n    \"yellowgreen\": [\n        154,\n        205,\n        50\n    ]\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvY29sb3Ivbm9kZV9tb2R1bGVzL2NvbG9yLW5hbWUvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQUEsT0FBT0MsT0FBTyxHQUFHO0lBQ2hCLGFBQWE7UUFBQztRQUFLO1FBQUs7S0FBSTtJQUM1QixnQkFBZ0I7UUFBQztRQUFLO1FBQUs7S0FBSTtJQUMvQixRQUFRO1FBQUM7UUFBRztRQUFLO0tBQUk7SUFDckIsY0FBYztRQUFDO1FBQUs7UUFBSztLQUFJO0lBQzdCLFNBQVM7UUFBQztRQUFLO1FBQUs7S0FBSTtJQUN4QixTQUFTO1FBQUM7UUFBSztRQUFLO0tBQUk7SUFDeEIsVUFBVTtRQUFDO1FBQUs7UUFBSztLQUFJO0lBQ3pCLFNBQVM7UUFBQztRQUFHO1FBQUc7S0FBRTtJQUNsQixrQkFBa0I7UUFBQztRQUFLO1FBQUs7S0FBSTtJQUNqQyxRQUFRO1FBQUM7UUFBRztRQUFHO0tBQUk7SUFDbkIsY0FBYztRQUFDO1FBQUs7UUFBSTtLQUFJO0lBQzVCLFNBQVM7UUFBQztRQUFLO1FBQUk7S0FBRztJQUN0QixhQUFhO1FBQUM7UUFBSztRQUFLO0tBQUk7SUFDNUIsYUFBYTtRQUFDO1FBQUk7UUFBSztLQUFJO0lBQzNCLGNBQWM7UUFBQztRQUFLO1FBQUs7S0FBRTtJQUMzQixhQUFhO1FBQUM7UUFBSztRQUFLO0tBQUc7SUFDM0IsU0FBUztRQUFDO1FBQUs7UUFBSztLQUFHO0lBQ3ZCLGtCQUFrQjtRQUFDO1FBQUs7UUFBSztLQUFJO0lBQ2pDLFlBQVk7UUFBQztRQUFLO1FBQUs7S0FBSTtJQUMzQixXQUFXO1FBQUM7UUFBSztRQUFJO0tBQUc7SUFDeEIsUUFBUTtRQUFDO1FBQUc7UUFBSztLQUFJO0lBQ3JCLFlBQVk7UUFBQztRQUFHO1FBQUc7S0FBSTtJQUN2QixZQUFZO1FBQUM7UUFBRztRQUFLO0tBQUk7SUFDekIsaUJBQWlCO1FBQUM7UUFBSztRQUFLO0tBQUc7SUFDL0IsWUFBWTtRQUFDO1FBQUs7UUFBSztLQUFJO0lBQzNCLGFBQWE7UUFBQztRQUFHO1FBQUs7S0FBRTtJQUN4QixZQUFZO1FBQUM7UUFBSztRQUFLO0tBQUk7SUFDM0IsYUFBYTtRQUFDO1FBQUs7UUFBSztLQUFJO0lBQzVCLGVBQWU7UUFBQztRQUFLO1FBQUc7S0FBSTtJQUM1QixrQkFBa0I7UUFBQztRQUFJO1FBQUs7S0FBRztJQUMvQixjQUFjO1FBQUM7UUFBSztRQUFLO0tBQUU7SUFDM0IsY0FBYztRQUFDO1FBQUs7UUFBSTtLQUFJO0lBQzVCLFdBQVc7UUFBQztRQUFLO1FBQUc7S0FBRTtJQUN0QixjQUFjO1FBQUM7UUFBSztRQUFLO0tBQUk7SUFDN0IsZ0JBQWdCO1FBQUM7UUFBSztRQUFLO0tBQUk7SUFDL0IsaUJBQWlCO1FBQUM7UUFBSTtRQUFJO0tBQUk7SUFDOUIsaUJBQWlCO1FBQUM7UUFBSTtRQUFJO0tBQUc7SUFDN0IsaUJBQWlCO1FBQUM7UUFBSTtRQUFJO0tBQUc7SUFDN0IsaUJBQWlCO1FBQUM7UUFBRztRQUFLO0tBQUk7SUFDOUIsY0FBYztRQUFDO1FBQUs7UUFBRztLQUFJO0lBQzNCLFlBQVk7UUFBQztRQUFLO1FBQUk7S0FBSTtJQUMxQixlQUFlO1FBQUM7UUFBRztRQUFLO0tBQUk7SUFDNUIsV0FBVztRQUFDO1FBQUs7UUFBSztLQUFJO0lBQzFCLFdBQVc7UUFBQztRQUFLO1FBQUs7S0FBSTtJQUMxQixjQUFjO1FBQUM7UUFBSTtRQUFLO0tBQUk7SUFDNUIsYUFBYTtRQUFDO1FBQUs7UUFBSTtLQUFHO0lBQzFCLGVBQWU7UUFBQztRQUFLO1FBQUs7S0FBSTtJQUM5QixlQUFlO1FBQUM7UUFBSTtRQUFLO0tBQUc7SUFDNUIsV0FBVztRQUFDO1FBQUs7UUFBRztLQUFJO0lBQ3hCLGFBQWE7UUFBQztRQUFLO1FBQUs7S0FBSTtJQUM1QixjQUFjO1FBQUM7UUFBSztRQUFLO0tBQUk7SUFDN0IsUUFBUTtRQUFDO1FBQUs7UUFBSztLQUFFO0lBQ3JCLGFBQWE7UUFBQztRQUFLO1FBQUs7S0FBRztJQUMzQixRQUFRO1FBQUM7UUFBSztRQUFLO0tBQUk7SUFDdkIsU0FBUztRQUFDO1FBQUc7UUFBSztLQUFFO0lBQ3BCLGVBQWU7UUFBQztRQUFLO1FBQUs7S0FBRztJQUM3QixRQUFRO1FBQUM7UUFBSztRQUFLO0tBQUk7SUFDdkIsWUFBWTtRQUFDO1FBQUs7UUFBSztLQUFJO0lBQzNCLFdBQVc7UUFBQztRQUFLO1FBQUs7S0FBSTtJQUMxQixhQUFhO1FBQUM7UUFBSztRQUFJO0tBQUc7SUFDMUIsVUFBVTtRQUFDO1FBQUk7UUFBRztLQUFJO0lBQ3RCLFNBQVM7UUFBQztRQUFLO1FBQUs7S0FBSTtJQUN4QixTQUFTO1FBQUM7UUFBSztRQUFLO0tBQUk7SUFDeEIsWUFBWTtRQUFDO1FBQUs7UUFBSztLQUFJO0lBQzNCLGlCQUFpQjtRQUFDO1FBQUs7UUFBSztLQUFJO0lBQ2hDLGFBQWE7UUFBQztRQUFLO1FBQUs7S0FBRTtJQUMxQixnQkFBZ0I7UUFBQztRQUFLO1FBQUs7S0FBSTtJQUMvQixhQUFhO1FBQUM7UUFBSztRQUFLO0tBQUk7SUFDNUIsY0FBYztRQUFDO1FBQUs7UUFBSztLQUFJO0lBQzdCLGFBQWE7UUFBQztRQUFLO1FBQUs7S0FBSTtJQUM1Qix3QkFBd0I7UUFBQztRQUFLO1FBQUs7S0FBSTtJQUN2QyxhQUFhO1FBQUM7UUFBSztRQUFLO0tBQUk7SUFDNUIsY0FBYztRQUFDO1FBQUs7UUFBSztLQUFJO0lBQzdCLGFBQWE7UUFBQztRQUFLO1FBQUs7S0FBSTtJQUM1QixhQUFhO1FBQUM7UUFBSztRQUFLO0tBQUk7SUFDNUIsZUFBZTtRQUFDO1FBQUs7UUFBSztLQUFJO0lBQzlCLGlCQUFpQjtRQUFDO1FBQUk7UUFBSztLQUFJO0lBQy9CLGdCQUFnQjtRQUFDO1FBQUs7UUFBSztLQUFJO0lBQy9CLGtCQUFrQjtRQUFDO1FBQUs7UUFBSztLQUFJO0lBQ2pDLGtCQUFrQjtRQUFDO1FBQUs7UUFBSztLQUFJO0lBQ2pDLGtCQUFrQjtRQUFDO1FBQUs7UUFBSztLQUFJO0lBQ2pDLGVBQWU7UUFBQztRQUFLO1FBQUs7S0FBSTtJQUM5QixRQUFRO1FBQUM7UUFBRztRQUFLO0tBQUU7SUFDbkIsYUFBYTtRQUFDO1FBQUk7UUFBSztLQUFHO0lBQzFCLFNBQVM7UUFBQztRQUFLO1FBQUs7S0FBSTtJQUN4QixXQUFXO1FBQUM7UUFBSztRQUFHO0tBQUk7SUFDeEIsVUFBVTtRQUFDO1FBQUs7UUFBRztLQUFFO0lBQ3JCLG9CQUFvQjtRQUFDO1FBQUs7UUFBSztLQUFJO0lBQ25DLGNBQWM7UUFBQztRQUFHO1FBQUc7S0FBSTtJQUN6QixnQkFBZ0I7UUFBQztRQUFLO1FBQUk7S0FBSTtJQUM5QixnQkFBZ0I7UUFBQztRQUFLO1FBQUs7S0FBSTtJQUMvQixrQkFBa0I7UUFBQztRQUFJO1FBQUs7S0FBSTtJQUNoQyxtQkFBbUI7UUFBQztRQUFLO1FBQUs7S0FBSTtJQUNsQyxxQkFBcUI7UUFBQztRQUFHO1FBQUs7S0FBSTtJQUNsQyxtQkFBbUI7UUFBQztRQUFJO1FBQUs7S0FBSTtJQUNqQyxtQkFBbUI7UUFBQztRQUFLO1FBQUk7S0FBSTtJQUNqQyxnQkFBZ0I7UUFBQztRQUFJO1FBQUk7S0FBSTtJQUM3QixhQUFhO1FBQUM7UUFBSztRQUFLO0tBQUk7SUFDNUIsYUFBYTtRQUFDO1FBQUs7UUFBSztLQUFJO0lBQzVCLFlBQVk7UUFBQztRQUFLO1FBQUs7S0FBSTtJQUMzQixlQUFlO1FBQUM7UUFBSztRQUFLO0tBQUk7SUFDOUIsUUFBUTtRQUFDO1FBQUc7UUFBRztLQUFJO0lBQ25CLFdBQVc7UUFBQztRQUFLO1FBQUs7S0FBSTtJQUMxQixTQUFTO1FBQUM7UUFBSztRQUFLO0tBQUU7SUFDdEIsYUFBYTtRQUFDO1FBQUs7UUFBSztLQUFHO0lBQzNCLFVBQVU7UUFBQztRQUFLO1FBQUs7S0FBRTtJQUN2QixhQUFhO1FBQUM7UUFBSztRQUFJO0tBQUU7SUFDekIsVUFBVTtRQUFDO1FBQUs7UUFBSztLQUFJO0lBQ3pCLGlCQUFpQjtRQUFDO1FBQUs7UUFBSztLQUFJO0lBQ2hDLGFBQWE7UUFBQztRQUFLO1FBQUs7S0FBSTtJQUM1QixpQkFBaUI7UUFBQztRQUFLO1FBQUs7S0FBSTtJQUNoQyxpQkFBaUI7UUFBQztRQUFLO1FBQUs7S0FBSTtJQUNoQyxjQUFjO1FBQUM7UUFBSztRQUFLO0tBQUk7SUFDN0IsYUFBYTtRQUFDO1FBQUs7UUFBSztLQUFJO0lBQzVCLFFBQVE7UUFBQztRQUFLO1FBQUs7S0FBRztJQUN0QixRQUFRO1FBQUM7UUFBSztRQUFLO0tBQUk7SUFDdkIsUUFBUTtRQUFDO1FBQUs7UUFBSztLQUFJO0lBQ3ZCLGNBQWM7UUFBQztRQUFLO1FBQUs7S0FBSTtJQUM3QixVQUFVO1FBQUM7UUFBSztRQUFHO0tBQUk7SUFDdkIsaUJBQWlCO1FBQUM7UUFBSztRQUFJO0tBQUk7SUFDL0IsT0FBTztRQUFDO1FBQUs7UUFBRztLQUFFO0lBQ2xCLGFBQWE7UUFBQztRQUFLO1FBQUs7S0FBSTtJQUM1QixhQUFhO1FBQUM7UUFBSTtRQUFLO0tBQUk7SUFDM0IsZUFBZTtRQUFDO1FBQUs7UUFBSTtLQUFHO0lBQzVCLFVBQVU7UUFBQztRQUFLO1FBQUs7S0FBSTtJQUN6QixjQUFjO1FBQUM7UUFBSztRQUFLO0tBQUc7SUFDNUIsWUFBWTtRQUFDO1FBQUk7UUFBSztLQUFHO0lBQ3pCLFlBQVk7UUFBQztRQUFLO1FBQUs7S0FBSTtJQUMzQixVQUFVO1FBQUM7UUFBSztRQUFJO0tBQUc7SUFDdkIsVUFBVTtRQUFDO1FBQUs7UUFBSztLQUFJO0lBQ3pCLFdBQVc7UUFBQztRQUFLO1FBQUs7S0FBSTtJQUMxQixhQUFhO1FBQUM7UUFBSztRQUFJO0tBQUk7SUFDM0IsYUFBYTtRQUFDO1FBQUs7UUFBSztLQUFJO0lBQzVCLGFBQWE7UUFBQztRQUFLO1FBQUs7S0FBSTtJQUM1QixRQUFRO1FBQUM7UUFBSztRQUFLO0tBQUk7SUFDdkIsZUFBZTtRQUFDO1FBQUc7UUFBSztLQUFJO0lBQzVCLGFBQWE7UUFBQztRQUFJO1FBQUs7S0FBSTtJQUMzQixPQUFPO1FBQUM7UUFBSztRQUFLO0tBQUk7SUFDdEIsUUFBUTtRQUFDO1FBQUc7UUFBSztLQUFJO0lBQ3JCLFdBQVc7UUFBQztRQUFLO1FBQUs7S0FBSTtJQUMxQixVQUFVO1FBQUM7UUFBSztRQUFJO0tBQUc7SUFDdkIsYUFBYTtRQUFDO1FBQUk7UUFBSztLQUFJO0lBQzNCLFVBQVU7UUFBQztRQUFLO1FBQUs7S0FBSTtJQUN6QixTQUFTO1FBQUM7UUFBSztRQUFLO0tBQUk7SUFDeEIsU0FBUztRQUFDO1FBQUs7UUFBSztLQUFJO0lBQ3hCLGNBQWM7UUFBQztRQUFLO1FBQUs7S0FBSTtJQUM3QixVQUFVO1FBQUM7UUFBSztRQUFLO0tBQUU7SUFDdkIsZUFBZTtRQUFDO1FBQUs7UUFBSztLQUFHO0FBQzlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UvLi9ub2RlX21vZHVsZXMvY29sb3Ivbm9kZV9tb2R1bGVzL2NvbG9yLW5hbWUvaW5kZXguanM/NDhlNSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG5cdFwiYWxpY2VibHVlXCI6IFsyNDAsIDI0OCwgMjU1XSxcclxuXHRcImFudGlxdWV3aGl0ZVwiOiBbMjUwLCAyMzUsIDIxNV0sXHJcblx0XCJhcXVhXCI6IFswLCAyNTUsIDI1NV0sXHJcblx0XCJhcXVhbWFyaW5lXCI6IFsxMjcsIDI1NSwgMjEyXSxcclxuXHRcImF6dXJlXCI6IFsyNDAsIDI1NSwgMjU1XSxcclxuXHRcImJlaWdlXCI6IFsyNDUsIDI0NSwgMjIwXSxcclxuXHRcImJpc3F1ZVwiOiBbMjU1LCAyMjgsIDE5Nl0sXHJcblx0XCJibGFja1wiOiBbMCwgMCwgMF0sXHJcblx0XCJibGFuY2hlZGFsbW9uZFwiOiBbMjU1LCAyMzUsIDIwNV0sXHJcblx0XCJibHVlXCI6IFswLCAwLCAyNTVdLFxyXG5cdFwiYmx1ZXZpb2xldFwiOiBbMTM4LCA0MywgMjI2XSxcclxuXHRcImJyb3duXCI6IFsxNjUsIDQyLCA0Ml0sXHJcblx0XCJidXJseXdvb2RcIjogWzIyMiwgMTg0LCAxMzVdLFxyXG5cdFwiY2FkZXRibHVlXCI6IFs5NSwgMTU4LCAxNjBdLFxyXG5cdFwiY2hhcnRyZXVzZVwiOiBbMTI3LCAyNTUsIDBdLFxyXG5cdFwiY2hvY29sYXRlXCI6IFsyMTAsIDEwNSwgMzBdLFxyXG5cdFwiY29yYWxcIjogWzI1NSwgMTI3LCA4MF0sXHJcblx0XCJjb3JuZmxvd2VyYmx1ZVwiOiBbMTAwLCAxNDksIDIzN10sXHJcblx0XCJjb3Juc2lsa1wiOiBbMjU1LCAyNDgsIDIyMF0sXHJcblx0XCJjcmltc29uXCI6IFsyMjAsIDIwLCA2MF0sXHJcblx0XCJjeWFuXCI6IFswLCAyNTUsIDI1NV0sXHJcblx0XCJkYXJrYmx1ZVwiOiBbMCwgMCwgMTM5XSxcclxuXHRcImRhcmtjeWFuXCI6IFswLCAxMzksIDEzOV0sXHJcblx0XCJkYXJrZ29sZGVucm9kXCI6IFsxODQsIDEzNCwgMTFdLFxyXG5cdFwiZGFya2dyYXlcIjogWzE2OSwgMTY5LCAxNjldLFxyXG5cdFwiZGFya2dyZWVuXCI6IFswLCAxMDAsIDBdLFxyXG5cdFwiZGFya2dyZXlcIjogWzE2OSwgMTY5LCAxNjldLFxyXG5cdFwiZGFya2toYWtpXCI6IFsxODksIDE4MywgMTA3XSxcclxuXHRcImRhcmttYWdlbnRhXCI6IFsxMzksIDAsIDEzOV0sXHJcblx0XCJkYXJrb2xpdmVncmVlblwiOiBbODUsIDEwNywgNDddLFxyXG5cdFwiZGFya29yYW5nZVwiOiBbMjU1LCAxNDAsIDBdLFxyXG5cdFwiZGFya29yY2hpZFwiOiBbMTUzLCA1MCwgMjA0XSxcclxuXHRcImRhcmtyZWRcIjogWzEzOSwgMCwgMF0sXHJcblx0XCJkYXJrc2FsbW9uXCI6IFsyMzMsIDE1MCwgMTIyXSxcclxuXHRcImRhcmtzZWFncmVlblwiOiBbMTQzLCAxODgsIDE0M10sXHJcblx0XCJkYXJrc2xhdGVibHVlXCI6IFs3MiwgNjEsIDEzOV0sXHJcblx0XCJkYXJrc2xhdGVncmF5XCI6IFs0NywgNzksIDc5XSxcclxuXHRcImRhcmtzbGF0ZWdyZXlcIjogWzQ3LCA3OSwgNzldLFxyXG5cdFwiZGFya3R1cnF1b2lzZVwiOiBbMCwgMjA2LCAyMDldLFxyXG5cdFwiZGFya3Zpb2xldFwiOiBbMTQ4LCAwLCAyMTFdLFxyXG5cdFwiZGVlcHBpbmtcIjogWzI1NSwgMjAsIDE0N10sXHJcblx0XCJkZWVwc2t5Ymx1ZVwiOiBbMCwgMTkxLCAyNTVdLFxyXG5cdFwiZGltZ3JheVwiOiBbMTA1LCAxMDUsIDEwNV0sXHJcblx0XCJkaW1ncmV5XCI6IFsxMDUsIDEwNSwgMTA1XSxcclxuXHRcImRvZGdlcmJsdWVcIjogWzMwLCAxNDQsIDI1NV0sXHJcblx0XCJmaXJlYnJpY2tcIjogWzE3OCwgMzQsIDM0XSxcclxuXHRcImZsb3JhbHdoaXRlXCI6IFsyNTUsIDI1MCwgMjQwXSxcclxuXHRcImZvcmVzdGdyZWVuXCI6IFszNCwgMTM5LCAzNF0sXHJcblx0XCJmdWNoc2lhXCI6IFsyNTUsIDAsIDI1NV0sXHJcblx0XCJnYWluc2Jvcm9cIjogWzIyMCwgMjIwLCAyMjBdLFxyXG5cdFwiZ2hvc3R3aGl0ZVwiOiBbMjQ4LCAyNDgsIDI1NV0sXHJcblx0XCJnb2xkXCI6IFsyNTUsIDIxNSwgMF0sXHJcblx0XCJnb2xkZW5yb2RcIjogWzIxOCwgMTY1LCAzMl0sXHJcblx0XCJncmF5XCI6IFsxMjgsIDEyOCwgMTI4XSxcclxuXHRcImdyZWVuXCI6IFswLCAxMjgsIDBdLFxyXG5cdFwiZ3JlZW55ZWxsb3dcIjogWzE3MywgMjU1LCA0N10sXHJcblx0XCJncmV5XCI6IFsxMjgsIDEyOCwgMTI4XSxcclxuXHRcImhvbmV5ZGV3XCI6IFsyNDAsIDI1NSwgMjQwXSxcclxuXHRcImhvdHBpbmtcIjogWzI1NSwgMTA1LCAxODBdLFxyXG5cdFwiaW5kaWFucmVkXCI6IFsyMDUsIDkyLCA5Ml0sXHJcblx0XCJpbmRpZ29cIjogWzc1LCAwLCAxMzBdLFxyXG5cdFwiaXZvcnlcIjogWzI1NSwgMjU1LCAyNDBdLFxyXG5cdFwia2hha2lcIjogWzI0MCwgMjMwLCAxNDBdLFxyXG5cdFwibGF2ZW5kZXJcIjogWzIzMCwgMjMwLCAyNTBdLFxyXG5cdFwibGF2ZW5kZXJibHVzaFwiOiBbMjU1LCAyNDAsIDI0NV0sXHJcblx0XCJsYXduZ3JlZW5cIjogWzEyNCwgMjUyLCAwXSxcclxuXHRcImxlbW9uY2hpZmZvblwiOiBbMjU1LCAyNTAsIDIwNV0sXHJcblx0XCJsaWdodGJsdWVcIjogWzE3MywgMjE2LCAyMzBdLFxyXG5cdFwibGlnaHRjb3JhbFwiOiBbMjQwLCAxMjgsIDEyOF0sXHJcblx0XCJsaWdodGN5YW5cIjogWzIyNCwgMjU1LCAyNTVdLFxyXG5cdFwibGlnaHRnb2xkZW5yb2R5ZWxsb3dcIjogWzI1MCwgMjUwLCAyMTBdLFxyXG5cdFwibGlnaHRncmF5XCI6IFsyMTEsIDIxMSwgMjExXSxcclxuXHRcImxpZ2h0Z3JlZW5cIjogWzE0NCwgMjM4LCAxNDRdLFxyXG5cdFwibGlnaHRncmV5XCI6IFsyMTEsIDIxMSwgMjExXSxcclxuXHRcImxpZ2h0cGlua1wiOiBbMjU1LCAxODIsIDE5M10sXHJcblx0XCJsaWdodHNhbG1vblwiOiBbMjU1LCAxNjAsIDEyMl0sXHJcblx0XCJsaWdodHNlYWdyZWVuXCI6IFszMiwgMTc4LCAxNzBdLFxyXG5cdFwibGlnaHRza3libHVlXCI6IFsxMzUsIDIwNiwgMjUwXSxcclxuXHRcImxpZ2h0c2xhdGVncmF5XCI6IFsxMTksIDEzNiwgMTUzXSxcclxuXHRcImxpZ2h0c2xhdGVncmV5XCI6IFsxMTksIDEzNiwgMTUzXSxcclxuXHRcImxpZ2h0c3RlZWxibHVlXCI6IFsxNzYsIDE5NiwgMjIyXSxcclxuXHRcImxpZ2h0eWVsbG93XCI6IFsyNTUsIDI1NSwgMjI0XSxcclxuXHRcImxpbWVcIjogWzAsIDI1NSwgMF0sXHJcblx0XCJsaW1lZ3JlZW5cIjogWzUwLCAyMDUsIDUwXSxcclxuXHRcImxpbmVuXCI6IFsyNTAsIDI0MCwgMjMwXSxcclxuXHRcIm1hZ2VudGFcIjogWzI1NSwgMCwgMjU1XSxcclxuXHRcIm1hcm9vblwiOiBbMTI4LCAwLCAwXSxcclxuXHRcIm1lZGl1bWFxdWFtYXJpbmVcIjogWzEwMiwgMjA1LCAxNzBdLFxyXG5cdFwibWVkaXVtYmx1ZVwiOiBbMCwgMCwgMjA1XSxcclxuXHRcIm1lZGl1bW9yY2hpZFwiOiBbMTg2LCA4NSwgMjExXSxcclxuXHRcIm1lZGl1bXB1cnBsZVwiOiBbMTQ3LCAxMTIsIDIxOV0sXHJcblx0XCJtZWRpdW1zZWFncmVlblwiOiBbNjAsIDE3OSwgMTEzXSxcclxuXHRcIm1lZGl1bXNsYXRlYmx1ZVwiOiBbMTIzLCAxMDQsIDIzOF0sXHJcblx0XCJtZWRpdW1zcHJpbmdncmVlblwiOiBbMCwgMjUwLCAxNTRdLFxyXG5cdFwibWVkaXVtdHVycXVvaXNlXCI6IFs3MiwgMjA5LCAyMDRdLFxyXG5cdFwibWVkaXVtdmlvbGV0cmVkXCI6IFsxOTksIDIxLCAxMzNdLFxyXG5cdFwibWlkbmlnaHRibHVlXCI6IFsyNSwgMjUsIDExMl0sXHJcblx0XCJtaW50Y3JlYW1cIjogWzI0NSwgMjU1LCAyNTBdLFxyXG5cdFwibWlzdHlyb3NlXCI6IFsyNTUsIDIyOCwgMjI1XSxcclxuXHRcIm1vY2Nhc2luXCI6IFsyNTUsIDIyOCwgMTgxXSxcclxuXHRcIm5hdmFqb3doaXRlXCI6IFsyNTUsIDIyMiwgMTczXSxcclxuXHRcIm5hdnlcIjogWzAsIDAsIDEyOF0sXHJcblx0XCJvbGRsYWNlXCI6IFsyNTMsIDI0NSwgMjMwXSxcclxuXHRcIm9saXZlXCI6IFsxMjgsIDEyOCwgMF0sXHJcblx0XCJvbGl2ZWRyYWJcIjogWzEwNywgMTQyLCAzNV0sXHJcblx0XCJvcmFuZ2VcIjogWzI1NSwgMTY1LCAwXSxcclxuXHRcIm9yYW5nZXJlZFwiOiBbMjU1LCA2OSwgMF0sXHJcblx0XCJvcmNoaWRcIjogWzIxOCwgMTEyLCAyMTRdLFxyXG5cdFwicGFsZWdvbGRlbnJvZFwiOiBbMjM4LCAyMzIsIDE3MF0sXHJcblx0XCJwYWxlZ3JlZW5cIjogWzE1MiwgMjUxLCAxNTJdLFxyXG5cdFwicGFsZXR1cnF1b2lzZVwiOiBbMTc1LCAyMzgsIDIzOF0sXHJcblx0XCJwYWxldmlvbGV0cmVkXCI6IFsyMTksIDExMiwgMTQ3XSxcclxuXHRcInBhcGF5YXdoaXBcIjogWzI1NSwgMjM5LCAyMTNdLFxyXG5cdFwicGVhY2hwdWZmXCI6IFsyNTUsIDIxOCwgMTg1XSxcclxuXHRcInBlcnVcIjogWzIwNSwgMTMzLCA2M10sXHJcblx0XCJwaW5rXCI6IFsyNTUsIDE5MiwgMjAzXSxcclxuXHRcInBsdW1cIjogWzIyMSwgMTYwLCAyMjFdLFxyXG5cdFwicG93ZGVyYmx1ZVwiOiBbMTc2LCAyMjQsIDIzMF0sXHJcblx0XCJwdXJwbGVcIjogWzEyOCwgMCwgMTI4XSxcclxuXHRcInJlYmVjY2FwdXJwbGVcIjogWzEwMiwgNTEsIDE1M10sXHJcblx0XCJyZWRcIjogWzI1NSwgMCwgMF0sXHJcblx0XCJyb3N5YnJvd25cIjogWzE4OCwgMTQzLCAxNDNdLFxyXG5cdFwicm95YWxibHVlXCI6IFs2NSwgMTA1LCAyMjVdLFxyXG5cdFwic2FkZGxlYnJvd25cIjogWzEzOSwgNjksIDE5XSxcclxuXHRcInNhbG1vblwiOiBbMjUwLCAxMjgsIDExNF0sXHJcblx0XCJzYW5keWJyb3duXCI6IFsyNDQsIDE2NCwgOTZdLFxyXG5cdFwic2VhZ3JlZW5cIjogWzQ2LCAxMzksIDg3XSxcclxuXHRcInNlYXNoZWxsXCI6IFsyNTUsIDI0NSwgMjM4XSxcclxuXHRcInNpZW5uYVwiOiBbMTYwLCA4MiwgNDVdLFxyXG5cdFwic2lsdmVyXCI6IFsxOTIsIDE5MiwgMTkyXSxcclxuXHRcInNreWJsdWVcIjogWzEzNSwgMjA2LCAyMzVdLFxyXG5cdFwic2xhdGVibHVlXCI6IFsxMDYsIDkwLCAyMDVdLFxyXG5cdFwic2xhdGVncmF5XCI6IFsxMTIsIDEyOCwgMTQ0XSxcclxuXHRcInNsYXRlZ3JleVwiOiBbMTEyLCAxMjgsIDE0NF0sXHJcblx0XCJzbm93XCI6IFsyNTUsIDI1MCwgMjUwXSxcclxuXHRcInNwcmluZ2dyZWVuXCI6IFswLCAyNTUsIDEyN10sXHJcblx0XCJzdGVlbGJsdWVcIjogWzcwLCAxMzAsIDE4MF0sXHJcblx0XCJ0YW5cIjogWzIxMCwgMTgwLCAxNDBdLFxyXG5cdFwidGVhbFwiOiBbMCwgMTI4LCAxMjhdLFxyXG5cdFwidGhpc3RsZVwiOiBbMjE2LCAxOTEsIDIxNl0sXHJcblx0XCJ0b21hdG9cIjogWzI1NSwgOTksIDcxXSxcclxuXHRcInR1cnF1b2lzZVwiOiBbNjQsIDIyNCwgMjA4XSxcclxuXHRcInZpb2xldFwiOiBbMjM4LCAxMzAsIDIzOF0sXHJcblx0XCJ3aGVhdFwiOiBbMjQ1LCAyMjIsIDE3OV0sXHJcblx0XCJ3aGl0ZVwiOiBbMjU1LCAyNTUsIDI1NV0sXHJcblx0XCJ3aGl0ZXNtb2tlXCI6IFsyNDUsIDI0NSwgMjQ1XSxcclxuXHRcInllbGxvd1wiOiBbMjU1LCAyNTUsIDBdLFxyXG5cdFwieWVsbG93Z3JlZW5cIjogWzE1NCwgMjA1LCA1MF1cclxufTtcclxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/color/node_modules/color-name/index.js\n");

/***/ })

};
;