"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/slate-hyperscript";
exports.ids = ["vendor-chunks/slate-hyperscript"];
exports.modules = {

/***/ "(ssr)/./node_modules/slate-hyperscript/dist/index.es.js":
/*!*********************************************************!*\
  !*** ./node_modules/slate-hyperscript/dist/index.es.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createEditor: () => (/* binding */ createEditor),\n/* harmony export */   createHyperscript: () => (/* binding */ createHyperscript),\n/* harmony export */   createText: () => (/* binding */ createText),\n/* harmony export */   jsx: () => (/* binding */ jsx)\n/* harmony export */ });\n/* harmony import */ var is_plain_object__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! is-plain-object */ \"(ssr)/./node_modules/is-plain-object/dist/is-plain-object.mjs\");\n/* harmony import */ var slate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! slate */ \"(ssr)/./node_modules/slate/dist/index.es.js\");\n\n\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\n/**\r\n * A weak map to hold anchor tokens.\r\n */ var ANCHOR = new WeakMap();\n/**\r\n * A weak map to hold focus tokens.\r\n */ var FOCUS = new WeakMap();\n/**\r\n * All tokens inherit from a single constructor for `instanceof` checking.\r\n */ class Token {\n}\n/**\r\n * Anchor tokens represent the selection's anchor point.\r\n */ class AnchorToken extends Token {\n    constructor(){\n        var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        super();\n        var { offset, path } = props;\n        this.offset = offset;\n        this.path = path;\n    }\n}\n/**\r\n * Focus tokens represent the selection's focus point.\r\n */ class FocusToken extends Token {\n    constructor(){\n        var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        super();\n        var { offset, path } = props;\n        this.offset = offset;\n        this.path = path;\n    }\n}\n/**\r\n * Add an anchor token to the end of a text node.\r\n */ var addAnchorToken = (text, token)=>{\n    var offset = text.text.length;\n    ANCHOR.set(text, [\n        offset,\n        token\n    ]);\n};\n/**\r\n * Get the offset if a text node has an associated anchor token.\r\n */ var getAnchorOffset = (text)=>{\n    return ANCHOR.get(text);\n};\n/**\r\n * Add a focus token to the end of a text node.\r\n */ var addFocusToken = (text, token)=>{\n    var offset = text.text.length;\n    FOCUS.set(text, [\n        offset,\n        token\n    ]);\n};\n/**\r\n * Get the offset if a text node has an associated focus token.\r\n */ var getFocusOffset = (text)=>{\n    return FOCUS.get(text);\n};\nfunction ownKeys$1(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread$1(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys$1(Object(source), true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys$1(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\n/**\r\n * Resolve the descedants of a node by normalizing the children that can be\r\n * passed into a hyperscript creator function.\r\n */ var STRINGS = new WeakSet();\nvar resolveDescendants = (children)=>{\n    var nodes = [];\n    var addChild = (child)=>{\n        if (child == null) {\n            return;\n        }\n        var prev = nodes[nodes.length - 1];\n        if (typeof child === \"string\") {\n            var text = {\n                text: child\n            };\n            STRINGS.add(text);\n            child = text;\n        }\n        if (slate__WEBPACK_IMPORTED_MODULE_1__.Text.isText(child)) {\n            var c = child; // HACK: fix typescript complaining\n            if (slate__WEBPACK_IMPORTED_MODULE_1__.Text.isText(prev) && STRINGS.has(prev) && STRINGS.has(c) && slate__WEBPACK_IMPORTED_MODULE_1__.Text.equals(prev, c, {\n                loose: true\n            })) {\n                prev.text += c.text;\n            } else {\n                nodes.push(c);\n            }\n        } else if (slate__WEBPACK_IMPORTED_MODULE_1__.Element.isElement(child)) {\n            nodes.push(child);\n        } else if (child instanceof Token) {\n            var n = nodes[nodes.length - 1];\n            if (!slate__WEBPACK_IMPORTED_MODULE_1__.Text.isText(n)) {\n                addChild(\"\");\n                n = nodes[nodes.length - 1];\n            }\n            if (child instanceof AnchorToken) {\n                addAnchorToken(n, child);\n            } else if (child instanceof FocusToken) {\n                addFocusToken(n, child);\n            }\n        } else {\n            throw new Error(\"Unexpected hyperscript child object: \".concat(child));\n        }\n    };\n    for (var child of children.flat(Infinity)){\n        addChild(child);\n    }\n    return nodes;\n};\n/**\r\n * Create an anchor token.\r\n */ function createAnchor(tagName, attributes, children) {\n    return new AnchorToken(attributes);\n}\n/**\r\n * Create an anchor and a focus token.\r\n */ function createCursor(tagName, attributes, children) {\n    return [\n        new AnchorToken(attributes),\n        new FocusToken(attributes)\n    ];\n}\n/**\r\n * Create an `Element` object.\r\n */ function createElement(tagName, attributes, children) {\n    return _objectSpread$1(_objectSpread$1({}, attributes), {}, {\n        children: resolveDescendants(children)\n    });\n}\n/**\r\n * Create a focus token.\r\n */ function createFocus(tagName, attributes, children) {\n    return new FocusToken(attributes);\n}\n/**\r\n * Create a fragment.\r\n */ function createFragment(tagName, attributes, children) {\n    return resolveDescendants(children);\n}\n/**\r\n * Create a `Selection` object.\r\n */ function createSelection(tagName, attributes, children) {\n    var anchor = children.find((c)=>c instanceof AnchorToken);\n    var focus = children.find((c)=>c instanceof FocusToken);\n    if (!anchor || anchor.offset == null || anchor.path == null) {\n        throw new Error(\"The <selection> hyperscript tag must have an <anchor> tag as a child with `path` and `offset` attributes defined.\");\n    }\n    if (!focus || focus.offset == null || focus.path == null) {\n        throw new Error(\"The <selection> hyperscript tag must have a <focus> tag as a child with `path` and `offset` attributes defined.\");\n    }\n    return _objectSpread$1({\n        anchor: {\n            offset: anchor.offset,\n            path: anchor.path\n        },\n        focus: {\n            offset: focus.offset,\n            path: focus.path\n        }\n    }, attributes);\n}\n/**\r\n * Create a `Text` object.\r\n */ function createText(tagName, attributes, children) {\n    var nodes = resolveDescendants(children);\n    if (nodes.length > 1) {\n        throw new Error(\"The <text> hyperscript tag must only contain a single node's worth of children.\");\n    }\n    var [node] = nodes;\n    if (node == null) {\n        node = {\n            text: \"\"\n        };\n    }\n    if (!slate__WEBPACK_IMPORTED_MODULE_1__.Text.isText(node)) {\n        throw new Error(\"\\n    The <text> hyperscript tag can only contain text content as children.\");\n    } // COMPAT: If they used the <text> tag we want to guarantee that it won't be\n    // merge with other string children.\n    STRINGS.delete(node);\n    Object.assign(node, attributes);\n    return node;\n}\n/**\r\n * Create a top-level `Editor` object.\r\n */ var createEditor = (makeEditor)=>(tagName, attributes, children)=>{\n        var otherChildren = [];\n        var selectionChild;\n        for (var child of children){\n            if (slate__WEBPACK_IMPORTED_MODULE_1__.Range.isRange(child)) {\n                selectionChild = child;\n            } else {\n                otherChildren.push(child);\n            }\n        }\n        var descendants = resolveDescendants(otherChildren);\n        var selection = {};\n        var editor = makeEditor();\n        Object.assign(editor, attributes);\n        editor.children = descendants; // Search the document's texts to see if any of them have tokens associated\n        // that need incorporated into the selection.\n        for (var [node, path] of slate__WEBPACK_IMPORTED_MODULE_1__.Node.texts(editor)){\n            var anchor = getAnchorOffset(node);\n            var focus = getFocusOffset(node);\n            if (anchor != null) {\n                var [offset] = anchor;\n                selection.anchor = {\n                    path,\n                    offset\n                };\n            }\n            if (focus != null) {\n                var [_offset] = focus;\n                selection.focus = {\n                    path,\n                    offset: _offset\n                };\n            }\n        }\n        if (selection.anchor && !selection.focus) {\n            throw new Error(\"Slate hyperscript ranges must have both `<anchor />` and `<focus />` defined if one is defined, but you only defined `<anchor />`. For collapsed selections, use `<cursor />` instead.\");\n        }\n        if (!selection.anchor && selection.focus) {\n            throw new Error(\"Slate hyperscript ranges must have both `<anchor />` and `<focus />` defined if one is defined, but you only defined `<focus />`. For collapsed selections, use `<cursor />` instead.\");\n        }\n        if (selectionChild != null) {\n            editor.selection = selectionChild;\n        } else if (slate__WEBPACK_IMPORTED_MODULE_1__.Range.isRange(selection)) {\n            editor.selection = selection;\n        }\n        return editor;\n    };\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys(Object(source), true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\n/**\r\n * The default creators for Slate objects.\r\n */ var DEFAULT_CREATORS = {\n    anchor: createAnchor,\n    cursor: createCursor,\n    editor: createEditor(slate__WEBPACK_IMPORTED_MODULE_1__.createEditor),\n    element: createElement,\n    focus: createFocus,\n    fragment: createFragment,\n    selection: createSelection,\n    text: createText\n};\n/**\r\n * Create a Slate hyperscript function with `options`.\r\n */ var createHyperscript = function createHyperscript() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var { elements = {} } = options;\n    var elementCreators = normalizeElements(elements);\n    var creators = _objectSpread(_objectSpread(_objectSpread({}, DEFAULT_CREATORS), elementCreators), options.creators);\n    var jsx = createFactory(creators);\n    return jsx;\n};\n/**\r\n * Create a Slate hyperscript function with `options`.\r\n */ var createFactory = (creators)=>{\n    var jsx = function jsx(tagName, attributes) {\n        for(var _len = arguments.length, children = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++){\n            children[_key - 2] = arguments[_key];\n        }\n        var creator = creators[tagName];\n        if (!creator) {\n            throw new Error(\"No hyperscript creator found for tag: <\".concat(tagName, \">\"));\n        }\n        if (attributes == null) {\n            attributes = {};\n        }\n        if (!(0,is_plain_object__WEBPACK_IMPORTED_MODULE_0__.isPlainObject)(attributes)) {\n            children = [\n                attributes\n            ].concat(children);\n            attributes = {};\n        }\n        children = children.filter((child)=>Boolean(child)).flat();\n        var ret = creator(tagName, attributes, children);\n        return ret;\n    };\n    return jsx;\n};\n/**\r\n * Normalize a dictionary of element shorthands into creator functions.\r\n */ var normalizeElements = (elements)=>{\n    var creators = {};\n    var _loop = function _loop(tagName) {\n        var props = elements[tagName];\n        if (typeof props !== \"object\") {\n            throw new Error(\"Properties specified for a hyperscript shorthand should be an object, but for the custom element <\".concat(tagName, \">  tag you passed: \").concat(props));\n        }\n        creators[tagName] = (tagName, attributes, children)=>{\n            return createElement(\"element\", _objectSpread(_objectSpread({}, props), attributes), children);\n        };\n    };\n    for(var tagName in elements){\n        _loop(tagName);\n    }\n    return creators;\n};\n/**\r\n * The default hyperscript factory that ships with Slate, without custom tags.\r\n */ var jsx = createHyperscript();\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/slate-hyperscript/dist/index.es.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/slate-hyperscript/dist/index.es.js":
/*!*********************************************************!*\
  !*** ./node_modules/slate-hyperscript/dist/index.es.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createEditor: () => (/* binding */ createEditor),\n/* harmony export */   createHyperscript: () => (/* binding */ createHyperscript),\n/* harmony export */   createText: () => (/* binding */ createText),\n/* harmony export */   jsx: () => (/* binding */ jsx)\n/* harmony export */ });\n/* harmony import */ var is_plain_object__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! is-plain-object */ \"(rsc)/./node_modules/is-plain-object/dist/is-plain-object.mjs\");\n/* harmony import */ var slate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! slate */ \"(rsc)/./node_modules/slate/dist/index.es.js\");\n\n\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\n/**\r\n * A weak map to hold anchor tokens.\r\n */ var ANCHOR = new WeakMap();\n/**\r\n * A weak map to hold focus tokens.\r\n */ var FOCUS = new WeakMap();\n/**\r\n * All tokens inherit from a single constructor for `instanceof` checking.\r\n */ class Token {\n}\n/**\r\n * Anchor tokens represent the selection's anchor point.\r\n */ class AnchorToken extends Token {\n    constructor(){\n        var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        super();\n        var { offset, path } = props;\n        this.offset = offset;\n        this.path = path;\n    }\n}\n/**\r\n * Focus tokens represent the selection's focus point.\r\n */ class FocusToken extends Token {\n    constructor(){\n        var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        super();\n        var { offset, path } = props;\n        this.offset = offset;\n        this.path = path;\n    }\n}\n/**\r\n * Add an anchor token to the end of a text node.\r\n */ var addAnchorToken = (text, token)=>{\n    var offset = text.text.length;\n    ANCHOR.set(text, [\n        offset,\n        token\n    ]);\n};\n/**\r\n * Get the offset if a text node has an associated anchor token.\r\n */ var getAnchorOffset = (text)=>{\n    return ANCHOR.get(text);\n};\n/**\r\n * Add a focus token to the end of a text node.\r\n */ var addFocusToken = (text, token)=>{\n    var offset = text.text.length;\n    FOCUS.set(text, [\n        offset,\n        token\n    ]);\n};\n/**\r\n * Get the offset if a text node has an associated focus token.\r\n */ var getFocusOffset = (text)=>{\n    return FOCUS.get(text);\n};\nfunction ownKeys$1(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread$1(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys$1(Object(source), true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys$1(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\n/**\r\n * Resolve the descedants of a node by normalizing the children that can be\r\n * passed into a hyperscript creator function.\r\n */ var STRINGS = new WeakSet();\nvar resolveDescendants = (children)=>{\n    var nodes = [];\n    var addChild = (child)=>{\n        if (child == null) {\n            return;\n        }\n        var prev = nodes[nodes.length - 1];\n        if (typeof child === \"string\") {\n            var text = {\n                text: child\n            };\n            STRINGS.add(text);\n            child = text;\n        }\n        if (slate__WEBPACK_IMPORTED_MODULE_1__.Text.isText(child)) {\n            var c = child; // HACK: fix typescript complaining\n            if (slate__WEBPACK_IMPORTED_MODULE_1__.Text.isText(prev) && STRINGS.has(prev) && STRINGS.has(c) && slate__WEBPACK_IMPORTED_MODULE_1__.Text.equals(prev, c, {\n                loose: true\n            })) {\n                prev.text += c.text;\n            } else {\n                nodes.push(c);\n            }\n        } else if (slate__WEBPACK_IMPORTED_MODULE_1__.Element.isElement(child)) {\n            nodes.push(child);\n        } else if (child instanceof Token) {\n            var n = nodes[nodes.length - 1];\n            if (!slate__WEBPACK_IMPORTED_MODULE_1__.Text.isText(n)) {\n                addChild(\"\");\n                n = nodes[nodes.length - 1];\n            }\n            if (child instanceof AnchorToken) {\n                addAnchorToken(n, child);\n            } else if (child instanceof FocusToken) {\n                addFocusToken(n, child);\n            }\n        } else {\n            throw new Error(\"Unexpected hyperscript child object: \".concat(child));\n        }\n    };\n    for (var child of children.flat(Infinity)){\n        addChild(child);\n    }\n    return nodes;\n};\n/**\r\n * Create an anchor token.\r\n */ function createAnchor(tagName, attributes, children) {\n    return new AnchorToken(attributes);\n}\n/**\r\n * Create an anchor and a focus token.\r\n */ function createCursor(tagName, attributes, children) {\n    return [\n        new AnchorToken(attributes),\n        new FocusToken(attributes)\n    ];\n}\n/**\r\n * Create an `Element` object.\r\n */ function createElement(tagName, attributes, children) {\n    return _objectSpread$1(_objectSpread$1({}, attributes), {}, {\n        children: resolveDescendants(children)\n    });\n}\n/**\r\n * Create a focus token.\r\n */ function createFocus(tagName, attributes, children) {\n    return new FocusToken(attributes);\n}\n/**\r\n * Create a fragment.\r\n */ function createFragment(tagName, attributes, children) {\n    return resolveDescendants(children);\n}\n/**\r\n * Create a `Selection` object.\r\n */ function createSelection(tagName, attributes, children) {\n    var anchor = children.find((c)=>c instanceof AnchorToken);\n    var focus = children.find((c)=>c instanceof FocusToken);\n    if (!anchor || anchor.offset == null || anchor.path == null) {\n        throw new Error(\"The <selection> hyperscript tag must have an <anchor> tag as a child with `path` and `offset` attributes defined.\");\n    }\n    if (!focus || focus.offset == null || focus.path == null) {\n        throw new Error(\"The <selection> hyperscript tag must have a <focus> tag as a child with `path` and `offset` attributes defined.\");\n    }\n    return _objectSpread$1({\n        anchor: {\n            offset: anchor.offset,\n            path: anchor.path\n        },\n        focus: {\n            offset: focus.offset,\n            path: focus.path\n        }\n    }, attributes);\n}\n/**\r\n * Create a `Text` object.\r\n */ function createText(tagName, attributes, children) {\n    var nodes = resolveDescendants(children);\n    if (nodes.length > 1) {\n        throw new Error(\"The <text> hyperscript tag must only contain a single node's worth of children.\");\n    }\n    var [node] = nodes;\n    if (node == null) {\n        node = {\n            text: \"\"\n        };\n    }\n    if (!slate__WEBPACK_IMPORTED_MODULE_1__.Text.isText(node)) {\n        throw new Error(\"\\n    The <text> hyperscript tag can only contain text content as children.\");\n    } // COMPAT: If they used the <text> tag we want to guarantee that it won't be\n    // merge with other string children.\n    STRINGS.delete(node);\n    Object.assign(node, attributes);\n    return node;\n}\n/**\r\n * Create a top-level `Editor` object.\r\n */ var createEditor = (makeEditor)=>(tagName, attributes, children)=>{\n        var otherChildren = [];\n        var selectionChild;\n        for (var child of children){\n            if (slate__WEBPACK_IMPORTED_MODULE_1__.Range.isRange(child)) {\n                selectionChild = child;\n            } else {\n                otherChildren.push(child);\n            }\n        }\n        var descendants = resolveDescendants(otherChildren);\n        var selection = {};\n        var editor = makeEditor();\n        Object.assign(editor, attributes);\n        editor.children = descendants; // Search the document's texts to see if any of them have tokens associated\n        // that need incorporated into the selection.\n        for (var [node, path] of slate__WEBPACK_IMPORTED_MODULE_1__.Node.texts(editor)){\n            var anchor = getAnchorOffset(node);\n            var focus = getFocusOffset(node);\n            if (anchor != null) {\n                var [offset] = anchor;\n                selection.anchor = {\n                    path,\n                    offset\n                };\n            }\n            if (focus != null) {\n                var [_offset] = focus;\n                selection.focus = {\n                    path,\n                    offset: _offset\n                };\n            }\n        }\n        if (selection.anchor && !selection.focus) {\n            throw new Error(\"Slate hyperscript ranges must have both `<anchor />` and `<focus />` defined if one is defined, but you only defined `<anchor />`. For collapsed selections, use `<cursor />` instead.\");\n        }\n        if (!selection.anchor && selection.focus) {\n            throw new Error(\"Slate hyperscript ranges must have both `<anchor />` and `<focus />` defined if one is defined, but you only defined `<focus />`. For collapsed selections, use `<cursor />` instead.\");\n        }\n        if (selectionChild != null) {\n            editor.selection = selectionChild;\n        } else if (slate__WEBPACK_IMPORTED_MODULE_1__.Range.isRange(selection)) {\n            editor.selection = selection;\n        }\n        return editor;\n    };\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) {\n            symbols = symbols.filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n            });\n        }\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys(Object(source), true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\n/**\r\n * The default creators for Slate objects.\r\n */ var DEFAULT_CREATORS = {\n    anchor: createAnchor,\n    cursor: createCursor,\n    editor: createEditor(slate__WEBPACK_IMPORTED_MODULE_1__.createEditor),\n    element: createElement,\n    focus: createFocus,\n    fragment: createFragment,\n    selection: createSelection,\n    text: createText\n};\n/**\r\n * Create a Slate hyperscript function with `options`.\r\n */ var createHyperscript = function createHyperscript() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var { elements = {} } = options;\n    var elementCreators = normalizeElements(elements);\n    var creators = _objectSpread(_objectSpread(_objectSpread({}, DEFAULT_CREATORS), elementCreators), options.creators);\n    var jsx = createFactory(creators);\n    return jsx;\n};\n/**\r\n * Create a Slate hyperscript function with `options`.\r\n */ var createFactory = (creators)=>{\n    var jsx = function jsx(tagName, attributes) {\n        for(var _len = arguments.length, children = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++){\n            children[_key - 2] = arguments[_key];\n        }\n        var creator = creators[tagName];\n        if (!creator) {\n            throw new Error(\"No hyperscript creator found for tag: <\".concat(tagName, \">\"));\n        }\n        if (attributes == null) {\n            attributes = {};\n        }\n        if (!(0,is_plain_object__WEBPACK_IMPORTED_MODULE_0__.isPlainObject)(attributes)) {\n            children = [\n                attributes\n            ].concat(children);\n            attributes = {};\n        }\n        children = children.filter((child)=>Boolean(child)).flat();\n        var ret = creator(tagName, attributes, children);\n        return ret;\n    };\n    return jsx;\n};\n/**\r\n * Normalize a dictionary of element shorthands into creator functions.\r\n */ var normalizeElements = (elements)=>{\n    var creators = {};\n    var _loop = function _loop(tagName) {\n        var props = elements[tagName];\n        if (typeof props !== \"object\") {\n            throw new Error(\"Properties specified for a hyperscript shorthand should be an object, but for the custom element <\".concat(tagName, \">  tag you passed: \").concat(props));\n        }\n        creators[tagName] = (tagName, attributes, children)=>{\n            return createElement(\"element\", _objectSpread(_objectSpread({}, props), attributes), children);\n        };\n    };\n    for(var tagName in elements){\n        _loop(tagName);\n    }\n    return creators;\n};\n/**\r\n * The default hyperscript factory that ships with Slate, without custom tags.\r\n */ var jsx = createHyperscript();\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/slate-hyperscript/dist/index.es.js\n");

/***/ })

};
;