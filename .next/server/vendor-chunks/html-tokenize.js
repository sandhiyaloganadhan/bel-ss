/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/html-tokenize";
exports.ids = ["vendor-chunks/html-tokenize"];
exports.modules = {

/***/ "(ssr)/./node_modules/html-tokenize/index.js":
/*!*********************************************!*\
  !*** ./node_modules/html-tokenize/index.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nvar bufferFrom = __webpack_require__(/*! buffer-from */ \"(ssr)/./node_modules/buffer-from/index.js\");\nvar Transform = (__webpack_require__(/*! readable-stream */ \"(ssr)/./node_modules/html-tokenize/node_modules/readable-stream/readable.js\").Transform);\nvar inherits = __webpack_require__(/*! inherits */ \"(ssr)/./node_modules/inherits/inherits.js\");\ninherits(Tokenize, Transform);\nmodule.exports = Tokenize;\nvar codes = {\n    lt: \"<\".charCodeAt(0),\n    gt: \">\".charCodeAt(0),\n    slash: \"/\".charCodeAt(0),\n    dquote: '\"'.charCodeAt(0),\n    squote: \"'\".charCodeAt(0),\n    equal: \"=\".charCodeAt(0)\n};\nvar strings = {\n    endScript: bufferFrom(\"</script\"),\n    endStyle: bufferFrom(\"</style\"),\n    endTitle: bufferFrom(\"</title\"),\n    comment: bufferFrom(\"<!--\"),\n    endComment: bufferFrom(\"-->\"),\n    cdata: bufferFrom(\"<![CDATA[\"),\n    endCdata: bufferFrom(\"]]>\")\n};\nvar states = {\n    \"TagNameState\": 1,\n    \"AttributeNameState\": 2,\n    \"BeforeAttributeValueState\": 3,\n    \"AttributeValueState\": 4\n};\nfunction Tokenize() {\n    if (!(this instanceof Tokenize)) return new Tokenize;\n    Transform.call(this);\n    this._readableState.objectMode = true;\n    this.state = \"text\";\n    this.tagState = null;\n    this.quoteState = null;\n    this.raw = null;\n    this.buffers = [];\n    this._last = [];\n}\nTokenize.prototype._transform = function(buf, enc, next) {\n    var i = 0;\n    var offset = 0;\n    if (this._prev) {\n        buf = Buffer.concat([\n            this._prev,\n            buf\n        ]);\n        i = this._prev.length - 1;\n        offset = this._offset;\n        this._prev = null;\n        this._offset = 0;\n    }\n    for(; i < buf.length; i++){\n        var b = buf[i];\n        this._last.push(b);\n        if (this._last.length > 9) this._last.shift();\n        // detect end of raw character mode (comment, script,..)\n        if (this.raw) {\n            var parts = this._testRaw(buf, offset, i);\n            if (parts) {\n                this.push([\n                    \"text\",\n                    parts[0]\n                ]);\n                if (this.raw === strings.endComment || this.raw === strings.endCdata) {\n                    this.state = \"text\";\n                    this.buffers = [];\n                    this.push([\n                        \"close\",\n                        parts[1]\n                    ]);\n                } else {\n                    this.state = \"open\";\n                    this.buffers = [\n                        parts[1]\n                    ];\n                }\n                this.raw = null;\n                offset = i + 1;\n            }\n        } else if (this.state === \"text\" && b === codes.lt && i === buf.length - 1) {\n            this._prev = buf;\n            this._offset = offset;\n            return next();\n        } else if (this.state === \"text\" && b === codes.lt && !isWhiteSpace(buf[i + 1])) {\n            if (i > 0 && i - offset > 0) {\n                this.buffers.push(buf.slice(offset, i));\n            }\n            offset = i;\n            this.state = \"open\";\n            this.tagState = states.TagNameState;\n            this._pushState(\"text\");\n        } else if (this.tagState === states.TagNameState && isWhiteSpace(b)) {\n            this.tagState = states.AttributeNameState;\n        } else if (this.tagState === states.AttributeNameState && b === codes.equal) {\n            this.tagState = states.BeforeAttributeValueState;\n        } else if (this.tagState === states.BeforeAttributeValueState && isWhiteSpace(b)) {} else if (this.tagState === states.BeforeAttributeValueState && b !== codes.gt) {\n            this.tagState = states.AttributeValueState;\n            if (b === codes.dquote) {\n                this.quoteState = \"double\";\n            } else if (b === codes.squote) {\n                this.quoteState = \"single\";\n            } else {\n                this.quoteState = null;\n            }\n        } else if (this.tagState === states.AttributeValueState && !this.quoteState && isWhiteSpace(b)) {\n            this.tagState = states.AttributeNameState;\n        } else if (this.tagState === states.AttributeValueState && this.quoteState === \"double\" && b === codes.dquote) {\n            this.quoteState = null;\n            this.tagState = states.AttributeNameState;\n        } else if (this.tagState === states.AttributeValueState && this.quoteState === \"single\" && b === codes.squote) {\n            this.quoteState = null;\n            this.tagState = states.AttributeNameState;\n        } else if (this.state === \"open\" && b === codes.gt && !this.quoteState) {\n            this.buffers.push(buf.slice(offset, i + 1));\n            offset = i + 1;\n            this.state = \"text\";\n            this.tagState = null;\n            if (this._getChar(1) === codes.slash) {\n                this._pushState(\"close\");\n            } else {\n                var tag = this._getTag();\n                if (tag === \"script\") this.raw = strings.endScript;\n                if (tag === \"style\") this.raw = strings.endStyle;\n                if (tag === \"title\") this.raw = strings.endTitle;\n                this._pushState(\"open\");\n            }\n        } else if (this.state === \"open\" && compare(this._last, strings.comment)) {\n            this.buffers.push(buf.slice(offset, i + 1));\n            offset = i + 1;\n            this.state = \"text\";\n            this.raw = strings.endComment;\n            this._pushState(\"open\");\n        } else if (this.state === \"open\" && compare(this._last, strings.cdata)) {\n            this.buffers.push(buf.slice(offset, i + 1));\n            offset = i + 1;\n            this.state = \"text\";\n            this.raw = strings.endCdata;\n            this._pushState(\"open\");\n        }\n    }\n    if (offset < buf.length) this.buffers.push(buf.slice(offset));\n    next();\n};\nTokenize.prototype._flush = function(next) {\n    if (this.state === \"text\") this._pushState(\"text\");\n    this.push(null);\n    next();\n};\nTokenize.prototype._pushState = function(ev) {\n    if (this.buffers.length === 0) return;\n    var buf = Buffer.concat(this.buffers);\n    this.buffers = [];\n    this.push([\n        ev,\n        buf\n    ]);\n};\nTokenize.prototype._getChar = function(i) {\n    var offset = 0;\n    for(var j = 0; j < this.buffers.length; j++){\n        var buf = this.buffers[j];\n        if (offset + buf.length > i) {\n            return buf[i - offset];\n        }\n        offset += buf;\n    }\n};\nTokenize.prototype._getTag = function() {\n    var offset = 0;\n    var tag = \"\";\n    for(var j = 0; j < this.buffers.length; j++){\n        var buf = this.buffers[j];\n        for(var k = 0; k < buf.length; k++){\n            if (offset === 0 && k === 0) continue;\n            var c = String.fromCharCode(buf[k]);\n            if (/[^\\w-!\\[\\]]/.test(c)) {\n                return tag.toLowerCase();\n            } else tag += c;\n        }\n        offset += buf.length;\n    }\n};\nTokenize.prototype._testRaw = function(buf, offset, index) {\n    var raw = this.raw, last = this._last;\n    if (!compare(last, raw)) return;\n    this.buffers.push(buf.slice(offset, index + 1));\n    var buf = Buffer.concat(this.buffers);\n    var k = buf.length - raw.length;\n    return [\n        buf.slice(0, k),\n        buf.slice(k)\n    ];\n};\nfunction compare(a, b) {\n    if (a.length < b.length) return false;\n    for(var i = a.length - 1, j = b.length - 1; i >= 0 && j >= 0; i--, j--){\n        if (lower(a[i]) !== lower(b[j])) return false;\n    }\n    return true;\n}\nfunction lower(n) {\n    if (n >= 65 && n <= 90) return n + 32;\n    return n;\n}\nfunction isWhiteSpace(b) {\n    return b === 0x20 || b === 0x09 || b === 0x0A || b === 0x0C || b === 0x0D;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/html-tokenize/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/html-tokenize/node_modules/isarray/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/html-tokenize/node_modules/isarray/index.js ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
eval("\nmodule.exports = Array.isArray || function(arr) {\n    return Object.prototype.toString.call(arr) == \"[object Array]\";\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaHRtbC10b2tlbml6ZS9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiO0FBQUFBLE9BQU9DLE9BQU8sR0FBR0MsTUFBTUMsT0FBTyxJQUFJLFNBQVVDLEdBQUc7SUFDN0MsT0FBT0MsT0FBT0MsU0FBUyxDQUFDQyxRQUFRLENBQUNDLElBQUksQ0FBQ0osUUFBUTtBQUNoRCIsInNvdXJjZXMiOlsid2VicGFjazovL2JpZ2NvbW1lcmNlLy4vbm9kZV9tb2R1bGVzL2h0bWwtdG9rZW5pemUvbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanM/NzdiNyJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIkFycmF5IiwiaXNBcnJheSIsImFyciIsIk9iamVjdCIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiY2FsbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/html-tokenize/node_modules/isarray/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/html-tokenize/node_modules/readable-stream/lib/_stream_duplex.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/html-tokenize/node_modules/readable-stream/lib/_stream_duplex.js ***!
  \***************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// a duplex stream is just a stream that is both readable and writable.\n// Since JS doesn't have multiple prototypal inheritance, this class\n// prototypally inherits from Readable, and then parasitically from\n// Writable.\n\nmodule.exports = Duplex;\n/*<replacement>*/ var objectKeys = Object.keys || function(obj) {\n    var keys = [];\n    for(var key in obj)keys.push(key);\n    return keys;\n};\n/*</replacement>*/ /*<replacement>*/ var util = __webpack_require__(/*! core-util-is */ \"(ssr)/./node_modules/core-util-is/lib/util.js\");\nutil.inherits = __webpack_require__(/*! inherits */ \"(ssr)/./node_modules/inherits/inherits.js\");\n/*</replacement>*/ var Readable = __webpack_require__(/*! ./_stream_readable */ \"(ssr)/./node_modules/html-tokenize/node_modules/readable-stream/lib/_stream_readable.js\");\nvar Writable = __webpack_require__(/*! ./_stream_writable */ \"(ssr)/./node_modules/html-tokenize/node_modules/readable-stream/lib/_stream_writable.js\");\nutil.inherits(Duplex, Readable);\nforEach(objectKeys(Writable.prototype), function(method) {\n    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];\n});\nfunction Duplex(options) {\n    if (!(this instanceof Duplex)) return new Duplex(options);\n    Readable.call(this, options);\n    Writable.call(this, options);\n    if (options && options.readable === false) this.readable = false;\n    if (options && options.writable === false) this.writable = false;\n    this.allowHalfOpen = true;\n    if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;\n    this.once(\"end\", onend);\n}\n// the no-half-open enforcer\nfunction onend() {\n    // if we allow half-open state, or if the writable side ended,\n    // then we're ok.\n    if (this.allowHalfOpen || this._writableState.ended) return;\n    // no more data can be written.\n    // But allow more writes to happen in this tick.\n    process.nextTick(this.end.bind(this));\n}\nfunction forEach(xs, f) {\n    for(var i = 0, l = xs.length; i < l; i++){\n        f(xs[i], i);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaHRtbC10b2tlbml6ZS9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX2R1cGxleC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxzREFBc0Q7QUFDdEQsRUFBRTtBQUNGLDBFQUEwRTtBQUMxRSxnRUFBZ0U7QUFDaEUsc0VBQXNFO0FBQ3RFLHNFQUFzRTtBQUN0RSw0RUFBNEU7QUFDNUUscUVBQXFFO0FBQ3JFLHdCQUF3QjtBQUN4QixFQUFFO0FBQ0YsMEVBQTBFO0FBQzFFLHlEQUF5RDtBQUN6RCxFQUFFO0FBQ0YsMEVBQTBFO0FBQzFFLDZEQUE2RDtBQUM3RCw0RUFBNEU7QUFDNUUsMkVBQTJFO0FBQzNFLHdFQUF3RTtBQUN4RSw0RUFBNEU7QUFDNUUseUNBQXlDO0FBRXpDLHVFQUF1RTtBQUN2RSxvRUFBb0U7QUFDcEUsbUVBQW1FO0FBQ25FLFlBQVk7O0FBRVpBLE9BQU9DLE9BQU8sR0FBR0M7QUFFakIsZUFBZSxHQUNmLElBQUlDLGFBQWFDLE9BQU9DLElBQUksSUFBSSxTQUFVQyxHQUFHO0lBQzNDLElBQUlELE9BQU8sRUFBRTtJQUNiLElBQUssSUFBSUUsT0FBT0QsSUFBS0QsS0FBS0csSUFBSSxDQUFDRDtJQUMvQixPQUFPRjtBQUNUO0FBQ0EsZ0JBQWdCLEdBR2hCLGVBQWUsR0FDZixJQUFJSSxPQUFPQyxtQkFBT0EsQ0FBQztBQUNuQkQsS0FBS0UsUUFBUSxHQUFHRCxtQkFBT0EsQ0FBQztBQUN4QixnQkFBZ0IsR0FFaEIsSUFBSUUsV0FBV0YsbUJBQU9BLENBQUM7QUFDdkIsSUFBSUcsV0FBV0gsbUJBQU9BLENBQUM7QUFFdkJELEtBQUtFLFFBQVEsQ0FBQ1QsUUFBUVU7QUFFdEJFLFFBQVFYLFdBQVdVLFNBQVNFLFNBQVMsR0FBRyxTQUFTQyxNQUFNO0lBQ3JELElBQUksQ0FBQ2QsT0FBT2EsU0FBUyxDQUFDQyxPQUFPLEVBQzNCZCxPQUFPYSxTQUFTLENBQUNDLE9BQU8sR0FBR0gsU0FBU0UsU0FBUyxDQUFDQyxPQUFPO0FBQ3pEO0FBRUEsU0FBU2QsT0FBT2UsT0FBTztJQUNyQixJQUFJLENBQUUsS0FBSSxZQUFZZixNQUFLLEdBQ3pCLE9BQU8sSUFBSUEsT0FBT2U7SUFFcEJMLFNBQVNNLElBQUksQ0FBQyxJQUFJLEVBQUVEO0lBQ3BCSixTQUFTSyxJQUFJLENBQUMsSUFBSSxFQUFFRDtJQUVwQixJQUFJQSxXQUFXQSxRQUFRRSxRQUFRLEtBQUssT0FDbEMsSUFBSSxDQUFDQSxRQUFRLEdBQUc7SUFFbEIsSUFBSUYsV0FBV0EsUUFBUUcsUUFBUSxLQUFLLE9BQ2xDLElBQUksQ0FBQ0EsUUFBUSxHQUFHO0lBRWxCLElBQUksQ0FBQ0MsYUFBYSxHQUFHO0lBQ3JCLElBQUlKLFdBQVdBLFFBQVFJLGFBQWEsS0FBSyxPQUN2QyxJQUFJLENBQUNBLGFBQWEsR0FBRztJQUV2QixJQUFJLENBQUNDLElBQUksQ0FBQyxPQUFPQztBQUNuQjtBQUVBLDRCQUE0QjtBQUM1QixTQUFTQTtJQUNQLDhEQUE4RDtJQUM5RCxpQkFBaUI7SUFDakIsSUFBSSxJQUFJLENBQUNGLGFBQWEsSUFBSSxJQUFJLENBQUNHLGNBQWMsQ0FBQ0MsS0FBSyxFQUNqRDtJQUVGLCtCQUErQjtJQUMvQixnREFBZ0Q7SUFDaERDLFFBQVFDLFFBQVEsQ0FBQyxJQUFJLENBQUNDLEdBQUcsQ0FBQ0MsSUFBSSxDQUFDLElBQUk7QUFDckM7QUFFQSxTQUFTZixRQUFTZ0IsRUFBRSxFQUFFQyxDQUFDO0lBQ3JCLElBQUssSUFBSUMsSUFBSSxHQUFHQyxJQUFJSCxHQUFHSSxNQUFNLEVBQUVGLElBQUlDLEdBQUdELElBQUs7UUFDekNELEVBQUVELEVBQUUsQ0FBQ0UsRUFBRSxFQUFFQTtJQUNYO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iaWdjb21tZXJjZS8uL25vZGVfbW9kdWxlcy9odG1sLXRva2VuaXplL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fZHVwbGV4LmpzPzYyMzgiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIGEgZHVwbGV4IHN0cmVhbSBpcyBqdXN0IGEgc3RyZWFtIHRoYXQgaXMgYm90aCByZWFkYWJsZSBhbmQgd3JpdGFibGUuXG4vLyBTaW5jZSBKUyBkb2Vzbid0IGhhdmUgbXVsdGlwbGUgcHJvdG90eXBhbCBpbmhlcml0YW5jZSwgdGhpcyBjbGFzc1xuLy8gcHJvdG90eXBhbGx5IGluaGVyaXRzIGZyb20gUmVhZGFibGUsIGFuZCB0aGVuIHBhcmFzaXRpY2FsbHkgZnJvbVxuLy8gV3JpdGFibGUuXG5cbm1vZHVsZS5leHBvcnRzID0gRHVwbGV4O1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIG9iamVjdEtleXMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiAob2JqKSB7XG4gIHZhciBrZXlzID0gW107XG4gIGZvciAodmFyIGtleSBpbiBvYmopIGtleXMucHVzaChrZXkpO1xuICByZXR1cm4ga2V5cztcbn1cbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgdXRpbCA9IHJlcXVpcmUoJ2NvcmUtdXRpbC1pcycpO1xudXRpbC5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudmFyIFJlYWRhYmxlID0gcmVxdWlyZSgnLi9fc3RyZWFtX3JlYWRhYmxlJyk7XG52YXIgV3JpdGFibGUgPSByZXF1aXJlKCcuL19zdHJlYW1fd3JpdGFibGUnKTtcblxudXRpbC5pbmhlcml0cyhEdXBsZXgsIFJlYWRhYmxlKTtcblxuZm9yRWFjaChvYmplY3RLZXlzKFdyaXRhYmxlLnByb3RvdHlwZSksIGZ1bmN0aW9uKG1ldGhvZCkge1xuICBpZiAoIUR1cGxleC5wcm90b3R5cGVbbWV0aG9kXSlcbiAgICBEdXBsZXgucHJvdG90eXBlW21ldGhvZF0gPSBXcml0YWJsZS5wcm90b3R5cGVbbWV0aG9kXTtcbn0pO1xuXG5mdW5jdGlvbiBEdXBsZXgob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgRHVwbGV4KSlcbiAgICByZXR1cm4gbmV3IER1cGxleChvcHRpb25zKTtcblxuICBSZWFkYWJsZS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuICBXcml0YWJsZS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuXG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMucmVhZGFibGUgPT09IGZhbHNlKVxuICAgIHRoaXMucmVhZGFibGUgPSBmYWxzZTtcblxuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLndyaXRhYmxlID09PSBmYWxzZSlcbiAgICB0aGlzLndyaXRhYmxlID0gZmFsc2U7XG5cbiAgdGhpcy5hbGxvd0hhbGZPcGVuID0gdHJ1ZTtcbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5hbGxvd0hhbGZPcGVuID09PSBmYWxzZSlcbiAgICB0aGlzLmFsbG93SGFsZk9wZW4gPSBmYWxzZTtcblxuICB0aGlzLm9uY2UoJ2VuZCcsIG9uZW5kKTtcbn1cblxuLy8gdGhlIG5vLWhhbGYtb3BlbiBlbmZvcmNlclxuZnVuY3Rpb24gb25lbmQoKSB7XG4gIC8vIGlmIHdlIGFsbG93IGhhbGYtb3BlbiBzdGF0ZSwgb3IgaWYgdGhlIHdyaXRhYmxlIHNpZGUgZW5kZWQsXG4gIC8vIHRoZW4gd2UncmUgb2suXG4gIGlmICh0aGlzLmFsbG93SGFsZk9wZW4gfHwgdGhpcy5fd3JpdGFibGVTdGF0ZS5lbmRlZClcbiAgICByZXR1cm47XG5cbiAgLy8gbm8gbW9yZSBkYXRhIGNhbiBiZSB3cml0dGVuLlxuICAvLyBCdXQgYWxsb3cgbW9yZSB3cml0ZXMgdG8gaGFwcGVuIGluIHRoaXMgdGljay5cbiAgcHJvY2Vzcy5uZXh0VGljayh0aGlzLmVuZC5iaW5kKHRoaXMpKTtcbn1cblxuZnVuY3Rpb24gZm9yRWFjaCAoeHMsIGYpIHtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSB4cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBmKHhzW2ldLCBpKTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJEdXBsZXgiLCJvYmplY3RLZXlzIiwiT2JqZWN0Iiwia2V5cyIsIm9iaiIsImtleSIsInB1c2giLCJ1dGlsIiwicmVxdWlyZSIsImluaGVyaXRzIiwiUmVhZGFibGUiLCJXcml0YWJsZSIsImZvckVhY2giLCJwcm90b3R5cGUiLCJtZXRob2QiLCJvcHRpb25zIiwiY2FsbCIsInJlYWRhYmxlIiwid3JpdGFibGUiLCJhbGxvd0hhbGZPcGVuIiwib25jZSIsIm9uZW5kIiwiX3dyaXRhYmxlU3RhdGUiLCJlbmRlZCIsInByb2Nlc3MiLCJuZXh0VGljayIsImVuZCIsImJpbmQiLCJ4cyIsImYiLCJpIiwibCIsImxlbmd0aCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/html-tokenize/node_modules/readable-stream/lib/_stream_duplex.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/html-tokenize/node_modules/readable-stream/lib/_stream_passthrough.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/html-tokenize/node_modules/readable-stream/lib/_stream_passthrough.js ***!
  \********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// a passthrough stream.\n// basically just the most minimal sort of Transform stream.\n// Every written chunk gets output as-is.\n\nmodule.exports = PassThrough;\nvar Transform = __webpack_require__(/*! ./_stream_transform */ \"(ssr)/./node_modules/html-tokenize/node_modules/readable-stream/lib/_stream_transform.js\");\n/*<replacement>*/ var util = __webpack_require__(/*! core-util-is */ \"(ssr)/./node_modules/core-util-is/lib/util.js\");\nutil.inherits = __webpack_require__(/*! inherits */ \"(ssr)/./node_modules/inherits/inherits.js\");\n/*</replacement>*/ util.inherits(PassThrough, Transform);\nfunction PassThrough(options) {\n    if (!(this instanceof PassThrough)) return new PassThrough(options);\n    Transform.call(this, options);\n}\nPassThrough.prototype._transform = function(chunk, encoding, cb) {\n    cb(null, chunk);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaHRtbC10b2tlbml6ZS9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3Bhc3N0aHJvdWdoLmpzIiwibWFwcGluZ3MiOiJBQUFBLHNEQUFzRDtBQUN0RCxFQUFFO0FBQ0YsMEVBQTBFO0FBQzFFLGdFQUFnRTtBQUNoRSxzRUFBc0U7QUFDdEUsc0VBQXNFO0FBQ3RFLDRFQUE0RTtBQUM1RSxxRUFBcUU7QUFDckUsd0JBQXdCO0FBQ3hCLEVBQUU7QUFDRiwwRUFBMEU7QUFDMUUseURBQXlEO0FBQ3pELEVBQUU7QUFDRiwwRUFBMEU7QUFDMUUsNkRBQTZEO0FBQzdELDRFQUE0RTtBQUM1RSwyRUFBMkU7QUFDM0Usd0VBQXdFO0FBQ3hFLDRFQUE0RTtBQUM1RSx5Q0FBeUM7QUFFekMsd0JBQXdCO0FBQ3hCLDREQUE0RDtBQUM1RCx5Q0FBeUM7O0FBRXpDQSxPQUFPQyxPQUFPLEdBQUdDO0FBRWpCLElBQUlDLFlBQVlDLG1CQUFPQSxDQUFDO0FBRXhCLGVBQWUsR0FDZixJQUFJQyxPQUFPRCxtQkFBT0EsQ0FBQztBQUNuQkMsS0FBS0MsUUFBUSxHQUFHRixtQkFBT0EsQ0FBQztBQUN4QixnQkFBZ0IsR0FFaEJDLEtBQUtDLFFBQVEsQ0FBQ0osYUFBYUM7QUFFM0IsU0FBU0QsWUFBWUssT0FBTztJQUMxQixJQUFJLENBQUUsS0FBSSxZQUFZTCxXQUFVLEdBQzlCLE9BQU8sSUFBSUEsWUFBWUs7SUFFekJKLFVBQVVLLElBQUksQ0FBQyxJQUFJLEVBQUVEO0FBQ3ZCO0FBRUFMLFlBQVlPLFNBQVMsQ0FBQ0MsVUFBVSxHQUFHLFNBQVNDLEtBQUssRUFBRUMsUUFBUSxFQUFFQyxFQUFFO0lBQzdEQSxHQUFHLE1BQU1GO0FBQ1giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iaWdjb21tZXJjZS8uL25vZGVfbW9kdWxlcy9odG1sLXRva2VuaXplL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fcGFzc3Rocm91Z2guanM/NTFkZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuLy8gYSBwYXNzdGhyb3VnaCBzdHJlYW0uXG4vLyBiYXNpY2FsbHkganVzdCB0aGUgbW9zdCBtaW5pbWFsIHNvcnQgb2YgVHJhbnNmb3JtIHN0cmVhbS5cbi8vIEV2ZXJ5IHdyaXR0ZW4gY2h1bmsgZ2V0cyBvdXRwdXQgYXMtaXMuXG5cbm1vZHVsZS5leHBvcnRzID0gUGFzc1Rocm91Z2g7XG5cbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCcuL19zdHJlYW1fdHJhbnNmb3JtJyk7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgdXRpbCA9IHJlcXVpcmUoJ2NvcmUtdXRpbC1pcycpO1xudXRpbC5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudXRpbC5pbmhlcml0cyhQYXNzVGhyb3VnaCwgVHJhbnNmb3JtKTtcblxuZnVuY3Rpb24gUGFzc1Rocm91Z2gob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUGFzc1Rocm91Z2gpKVxuICAgIHJldHVybiBuZXcgUGFzc1Rocm91Z2gob3B0aW9ucyk7XG5cbiAgVHJhbnNmb3JtLmNhbGwodGhpcywgb3B0aW9ucyk7XG59XG5cblBhc3NUaHJvdWdoLnByb3RvdHlwZS5fdHJhbnNmb3JtID0gZnVuY3Rpb24oY2h1bmssIGVuY29kaW5nLCBjYikge1xuICBjYihudWxsLCBjaHVuayk7XG59O1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJQYXNzVGhyb3VnaCIsIlRyYW5zZm9ybSIsInJlcXVpcmUiLCJ1dGlsIiwiaW5oZXJpdHMiLCJvcHRpb25zIiwiY2FsbCIsInByb3RvdHlwZSIsIl90cmFuc2Zvcm0iLCJjaHVuayIsImVuY29kaW5nIiwiY2IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/html-tokenize/node_modules/readable-stream/lib/_stream_passthrough.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/html-tokenize/node_modules/readable-stream/lib/_stream_readable.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/html-tokenize/node_modules/readable-stream/lib/_stream_readable.js ***!
  \*****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nmodule.exports = Readable;\n/*<replacement>*/ var isArray = __webpack_require__(/*! isarray */ \"(ssr)/./node_modules/html-tokenize/node_modules/isarray/index.js\");\n/*</replacement>*/ /*<replacement>*/ var Buffer = (__webpack_require__(/*! buffer */ \"buffer\").Buffer);\n/*</replacement>*/ Readable.ReadableState = ReadableState;\nvar EE = (__webpack_require__(/*! events */ \"events\").EventEmitter);\n/*<replacement>*/ if (!EE.listenerCount) EE.listenerCount = function(emitter, type) {\n    return emitter.listeners(type).length;\n};\n/*</replacement>*/ var Stream = __webpack_require__(/*! stream */ \"stream\");\n/*<replacement>*/ var util = __webpack_require__(/*! core-util-is */ \"(ssr)/./node_modules/core-util-is/lib/util.js\");\nutil.inherits = __webpack_require__(/*! inherits */ \"(ssr)/./node_modules/inherits/inherits.js\");\n/*</replacement>*/ var StringDecoder;\nutil.inherits(Readable, Stream);\nfunction ReadableState(options, stream) {\n    options = options || {};\n    // the point at which it stops calling _read() to fill the buffer\n    // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n    var hwm = options.highWaterMark;\n    this.highWaterMark = hwm || hwm === 0 ? hwm : 16 * 1024;\n    // cast to ints.\n    this.highWaterMark = ~~this.highWaterMark;\n    this.buffer = [];\n    this.length = 0;\n    this.pipes = null;\n    this.pipesCount = 0;\n    this.flowing = false;\n    this.ended = false;\n    this.endEmitted = false;\n    this.reading = false;\n    // In streams that never have any data, and do push(null) right away,\n    // the consumer can miss the 'end' event if they do some I/O before\n    // consuming the stream.  So, we don't emit('end') until some reading\n    // happens.\n    this.calledRead = false;\n    // a flag to be able to tell if the onwrite cb is called immediately,\n    // or on a later tick.  We set this to true at first, becuase any\n    // actions that shouldn't happen until \"later\" should generally also\n    // not happen before the first write call.\n    this.sync = true;\n    // whenever we return null, then we set a flag to say\n    // that we're awaiting a 'readable' event emission.\n    this.needReadable = false;\n    this.emittedReadable = false;\n    this.readableListening = false;\n    // object stream flag. Used to make read(n) ignore n and to\n    // make all the buffer merging and length checks go away\n    this.objectMode = !!options.objectMode;\n    // Crypto is kind of old and crusty.  Historically, its default string\n    // encoding is 'binary' so we have to make this configurable.\n    // Everything else in the universe uses 'utf8', though.\n    this.defaultEncoding = options.defaultEncoding || \"utf8\";\n    // when piping, we only care about 'readable' events that happen\n    // after read()ing all the bytes and not getting any pushback.\n    this.ranOut = false;\n    // the number of writers that are awaiting a drain event in .pipe()s\n    this.awaitDrain = 0;\n    // if true, a maybeReadMore has been scheduled\n    this.readingMore = false;\n    this.decoder = null;\n    this.encoding = null;\n    if (options.encoding) {\n        if (!StringDecoder) StringDecoder = (__webpack_require__(/*! string_decoder/ */ \"(ssr)/./node_modules/html-tokenize/node_modules/string_decoder/index.js\").StringDecoder);\n        this.decoder = new StringDecoder(options.encoding);\n        this.encoding = options.encoding;\n    }\n}\nfunction Readable(options) {\n    if (!(this instanceof Readable)) return new Readable(options);\n    this._readableState = new ReadableState(options, this);\n    // legacy\n    this.readable = true;\n    Stream.call(this);\n}\n// Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\nReadable.prototype.push = function(chunk, encoding) {\n    var state = this._readableState;\n    if (typeof chunk === \"string\" && !state.objectMode) {\n        encoding = encoding || state.defaultEncoding;\n        if (encoding !== state.encoding) {\n            chunk = new Buffer(chunk, encoding);\n            encoding = \"\";\n        }\n    }\n    return readableAddChunk(this, state, chunk, encoding, false);\n};\n// Unshift should *always* be something directly out of read()\nReadable.prototype.unshift = function(chunk) {\n    var state = this._readableState;\n    return readableAddChunk(this, state, chunk, \"\", true);\n};\nfunction readableAddChunk(stream, state, chunk, encoding, addToFront) {\n    var er = chunkInvalid(state, chunk);\n    if (er) {\n        stream.emit(\"error\", er);\n    } else if (chunk === null || chunk === undefined) {\n        state.reading = false;\n        if (!state.ended) onEofChunk(stream, state);\n    } else if (state.objectMode || chunk && chunk.length > 0) {\n        if (state.ended && !addToFront) {\n            var e = new Error(\"stream.push() after EOF\");\n            stream.emit(\"error\", e);\n        } else if (state.endEmitted && addToFront) {\n            var e = new Error(\"stream.unshift() after end event\");\n            stream.emit(\"error\", e);\n        } else {\n            if (state.decoder && !addToFront && !encoding) chunk = state.decoder.write(chunk);\n            // update the buffer info.\n            state.length += state.objectMode ? 1 : chunk.length;\n            if (addToFront) {\n                state.buffer.unshift(chunk);\n            } else {\n                state.reading = false;\n                state.buffer.push(chunk);\n            }\n            if (state.needReadable) emitReadable(stream);\n            maybeReadMore(stream, state);\n        }\n    } else if (!addToFront) {\n        state.reading = false;\n    }\n    return needMoreData(state);\n}\n// if it's past the high water mark, we can push in some more.\n// Also, if we have no data yet, we can stand some\n// more bytes.  This is to work around cases where hwm=0,\n// such as the repl.  Also, if the push() triggered a\n// readable event, and the user called read(largeNumber) such that\n// needReadable was set, then we ought to push more, so that another\n// 'readable' event will be triggered.\nfunction needMoreData(state) {\n    return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);\n}\n// backwards compatibility.\nReadable.prototype.setEncoding = function(enc) {\n    if (!StringDecoder) StringDecoder = (__webpack_require__(/*! string_decoder/ */ \"(ssr)/./node_modules/html-tokenize/node_modules/string_decoder/index.js\").StringDecoder);\n    this._readableState.decoder = new StringDecoder(enc);\n    this._readableState.encoding = enc;\n};\n// Don't raise the hwm > 128MB\nvar MAX_HWM = 0x800000;\nfunction roundUpToNextPowerOf2(n) {\n    if (n >= MAX_HWM) {\n        n = MAX_HWM;\n    } else {\n        // Get the next highest power of 2\n        n--;\n        for(var p = 1; p < 32; p <<= 1)n |= n >> p;\n        n++;\n    }\n    return n;\n}\nfunction howMuchToRead(n, state) {\n    if (state.length === 0 && state.ended) return 0;\n    if (state.objectMode) return n === 0 ? 0 : 1;\n    if (n === null || isNaN(n)) {\n        // only flow one buffer at a time\n        if (state.flowing && state.buffer.length) return state.buffer[0].length;\n        else return state.length;\n    }\n    if (n <= 0) return 0;\n    // If we're asking for more than the target buffer level,\n    // then raise the water mark.  Bump up to the next highest\n    // power of 2, to prevent increasing it excessively in tiny\n    // amounts.\n    if (n > state.highWaterMark) state.highWaterMark = roundUpToNextPowerOf2(n);\n    // don't have that much.  return null, unless we've ended.\n    if (n > state.length) {\n        if (!state.ended) {\n            state.needReadable = true;\n            return 0;\n        } else return state.length;\n    }\n    return n;\n}\n// you can override either this method, or the async _read(n) below.\nReadable.prototype.read = function(n) {\n    var state = this._readableState;\n    state.calledRead = true;\n    var nOrig = n;\n    var ret;\n    if (typeof n !== \"number\" || n > 0) state.emittedReadable = false;\n    // if we're doing read(0) to trigger a readable event, but we\n    // already have a bunch of data in the buffer, then just trigger\n    // the 'readable' event and move on.\n    if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {\n        emitReadable(this);\n        return null;\n    }\n    n = howMuchToRead(n, state);\n    // if we've ended, and we're now clear, then finish it up.\n    if (n === 0 && state.ended) {\n        ret = null;\n        // In cases where the decoder did not receive enough data\n        // to produce a full chunk, then immediately received an\n        // EOF, state.buffer will contain [<Buffer >, <Buffer 00 ...>].\n        // howMuchToRead will see this and coerce the amount to\n        // read to zero (because it's looking at the length of the\n        // first <Buffer > in state.buffer), and we'll end up here.\n        //\n        // This can only happen via state.decoder -- no other venue\n        // exists for pushing a zero-length chunk into state.buffer\n        // and triggering this behavior. In this case, we return our\n        // remaining data and end the stream, if appropriate.\n        if (state.length > 0 && state.decoder) {\n            ret = fromList(n, state);\n            state.length -= ret.length;\n        }\n        if (state.length === 0) endReadable(this);\n        return ret;\n    }\n    // All the actual chunk generation logic needs to be\n    // *below* the call to _read.  The reason is that in certain\n    // synthetic stream cases, such as passthrough streams, _read\n    // may be a completely synchronous operation which may change\n    // the state of the read buffer, providing enough data when\n    // before there was *not* enough.\n    //\n    // So, the steps are:\n    // 1. Figure out what the state of things will be after we do\n    // a read from the buffer.\n    //\n    // 2. If that resulting state will trigger a _read, then call _read.\n    // Note that this may be asynchronous, or synchronous.  Yes, it is\n    // deeply ugly to write APIs this way, but that still doesn't mean\n    // that the Readable class should behave improperly, as streams are\n    // designed to be sync/async agnostic.\n    // Take note if the _read call is sync or async (ie, if the read call\n    // has returned yet), so that we know whether or not it's safe to emit\n    // 'readable' etc.\n    //\n    // 3. Actually pull the requested chunks out of the buffer and return.\n    // if we need a readable event, then we need to do some reading.\n    var doRead = state.needReadable;\n    // if we currently have less than the highWaterMark, then also read some\n    if (state.length - n <= state.highWaterMark) doRead = true;\n    // however, if we've ended, then there's no point, and if we're already\n    // reading, then it's unnecessary.\n    if (state.ended || state.reading) doRead = false;\n    if (doRead) {\n        state.reading = true;\n        state.sync = true;\n        // if the length is currently zero, then we *need* a readable event.\n        if (state.length === 0) state.needReadable = true;\n        // call internal read method\n        this._read(state.highWaterMark);\n        state.sync = false;\n    }\n    // If _read called its callback synchronously, then `reading`\n    // will be false, and we need to re-evaluate how much data we\n    // can return to the user.\n    if (doRead && !state.reading) n = howMuchToRead(nOrig, state);\n    if (n > 0) ret = fromList(n, state);\n    else ret = null;\n    if (ret === null) {\n        state.needReadable = true;\n        n = 0;\n    }\n    state.length -= n;\n    // If we have nothing in the buffer, then we want to know\n    // as soon as we *do* get something into the buffer.\n    if (state.length === 0 && !state.ended) state.needReadable = true;\n    // If we happened to read() exactly the remaining amount in the\n    // buffer, and the EOF has been seen at this point, then make sure\n    // that we emit 'end' on the very next tick.\n    if (state.ended && !state.endEmitted && state.length === 0) endReadable(this);\n    return ret;\n};\nfunction chunkInvalid(state, chunk) {\n    var er = null;\n    if (!Buffer.isBuffer(chunk) && \"string\" !== typeof chunk && chunk !== null && chunk !== undefined && !state.objectMode) {\n        er = new TypeError(\"Invalid non-string/buffer chunk\");\n    }\n    return er;\n}\nfunction onEofChunk(stream, state) {\n    if (state.decoder && !state.ended) {\n        var chunk = state.decoder.end();\n        if (chunk && chunk.length) {\n            state.buffer.push(chunk);\n            state.length += state.objectMode ? 1 : chunk.length;\n        }\n    }\n    state.ended = true;\n    // if we've ended and we have some data left, then emit\n    // 'readable' now to make sure it gets picked up.\n    if (state.length > 0) emitReadable(stream);\n    else endReadable(stream);\n}\n// Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\nfunction emitReadable(stream) {\n    var state = stream._readableState;\n    state.needReadable = false;\n    if (state.emittedReadable) return;\n    state.emittedReadable = true;\n    if (state.sync) process.nextTick(function() {\n        emitReadable_(stream);\n    });\n    else emitReadable_(stream);\n}\nfunction emitReadable_(stream) {\n    stream.emit(\"readable\");\n}\n// at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\nfunction maybeReadMore(stream, state) {\n    if (!state.readingMore) {\n        state.readingMore = true;\n        process.nextTick(function() {\n            maybeReadMore_(stream, state);\n        });\n    }\n}\nfunction maybeReadMore_(stream, state) {\n    var len = state.length;\n    while(!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark){\n        stream.read(0);\n        if (len === state.length) break;\n        else len = state.length;\n    }\n    state.readingMore = false;\n}\n// abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\nReadable.prototype._read = function(n) {\n    this.emit(\"error\", new Error(\"not implemented\"));\n};\nReadable.prototype.pipe = function(dest, pipeOpts) {\n    var src = this;\n    var state = this._readableState;\n    switch(state.pipesCount){\n        case 0:\n            state.pipes = dest;\n            break;\n        case 1:\n            state.pipes = [\n                state.pipes,\n                dest\n            ];\n            break;\n        default:\n            state.pipes.push(dest);\n            break;\n    }\n    state.pipesCount += 1;\n    var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;\n    var endFn = doEnd ? onend : cleanup;\n    if (state.endEmitted) process.nextTick(endFn);\n    else src.once(\"end\", endFn);\n    dest.on(\"unpipe\", onunpipe);\n    function onunpipe(readable) {\n        if (readable !== src) return;\n        cleanup();\n    }\n    function onend() {\n        dest.end();\n    }\n    // when the dest drains, it reduces the awaitDrain counter\n    // on the source.  This would be more elegant with a .once()\n    // handler in flow(), but adding and removing repeatedly is\n    // too slow.\n    var ondrain = pipeOnDrain(src);\n    dest.on(\"drain\", ondrain);\n    function cleanup() {\n        // cleanup event handlers once the pipe is broken\n        dest.removeListener(\"close\", onclose);\n        dest.removeListener(\"finish\", onfinish);\n        dest.removeListener(\"drain\", ondrain);\n        dest.removeListener(\"error\", onerror);\n        dest.removeListener(\"unpipe\", onunpipe);\n        src.removeListener(\"end\", onend);\n        src.removeListener(\"end\", cleanup);\n        // if the reader is waiting for a drain event from this\n        // specific writer, then it would cause it to never start\n        // flowing again.\n        // So, if this is awaiting a drain, then we just call it now.\n        // If we don't know, then assume that we are waiting for one.\n        if (!dest._writableState || dest._writableState.needDrain) ondrain();\n    }\n    // if the dest has an error, then stop piping into it.\n    // however, don't suppress the throwing behavior for this.\n    function onerror(er) {\n        unpipe();\n        dest.removeListener(\"error\", onerror);\n        if (EE.listenerCount(dest, \"error\") === 0) dest.emit(\"error\", er);\n    }\n    // This is a brutally ugly hack to make sure that our error handler\n    // is attached before any userland ones.  NEVER DO THIS.\n    if (!dest._events || !dest._events.error) dest.on(\"error\", onerror);\n    else if (isArray(dest._events.error)) dest._events.error.unshift(onerror);\n    else dest._events.error = [\n        onerror,\n        dest._events.error\n    ];\n    // Both close and finish should trigger unpipe, but only once.\n    function onclose() {\n        dest.removeListener(\"finish\", onfinish);\n        unpipe();\n    }\n    dest.once(\"close\", onclose);\n    function onfinish() {\n        dest.removeListener(\"close\", onclose);\n        unpipe();\n    }\n    dest.once(\"finish\", onfinish);\n    function unpipe() {\n        src.unpipe(dest);\n    }\n    // tell the dest that it's being piped to\n    dest.emit(\"pipe\", src);\n    // start the flow if it hasn't been started already.\n    if (!state.flowing) {\n        // the handler that waits for readable events after all\n        // the data gets sucked out in flow.\n        // This would be easier to follow with a .once() handler\n        // in flow(), but that is too slow.\n        this.on(\"readable\", pipeOnReadable);\n        state.flowing = true;\n        process.nextTick(function() {\n            flow(src);\n        });\n    }\n    return dest;\n};\nfunction pipeOnDrain(src) {\n    return function() {\n        var dest = this;\n        var state = src._readableState;\n        state.awaitDrain--;\n        if (state.awaitDrain === 0) flow(src);\n    };\n}\nfunction flow(src) {\n    var state = src._readableState;\n    var chunk;\n    state.awaitDrain = 0;\n    function write(dest, i, list) {\n        var written = dest.write(chunk);\n        if (false === written) {\n            state.awaitDrain++;\n        }\n    }\n    while(state.pipesCount && null !== (chunk = src.read())){\n        if (state.pipesCount === 1) write(state.pipes, 0, null);\n        else forEach(state.pipes, write);\n        src.emit(\"data\", chunk);\n        // if anyone needs a drain, then we have to wait for that.\n        if (state.awaitDrain > 0) return;\n    }\n    // if every destination was unpiped, either before entering this\n    // function, or in the while loop, then stop flowing.\n    //\n    // NB: This is a pretty rare edge case.\n    if (state.pipesCount === 0) {\n        state.flowing = false;\n        // if there were data event listeners added, then switch to old mode.\n        if (EE.listenerCount(src, \"data\") > 0) emitDataEvents(src);\n        return;\n    }\n    // at this point, no one needed a drain, so we just ran out of data\n    // on the next readable event, start it over again.\n    state.ranOut = true;\n}\nfunction pipeOnReadable() {\n    if (this._readableState.ranOut) {\n        this._readableState.ranOut = false;\n        flow(this);\n    }\n}\nReadable.prototype.unpipe = function(dest) {\n    var state = this._readableState;\n    // if we're not piping anywhere, then do nothing.\n    if (state.pipesCount === 0) return this;\n    // just one destination.  most common case.\n    if (state.pipesCount === 1) {\n        // passed in one, but it's not the right one.\n        if (dest && dest !== state.pipes) return this;\n        if (!dest) dest = state.pipes;\n        // got a match.\n        state.pipes = null;\n        state.pipesCount = 0;\n        this.removeListener(\"readable\", pipeOnReadable);\n        state.flowing = false;\n        if (dest) dest.emit(\"unpipe\", this);\n        return this;\n    }\n    // slow case. multiple pipe destinations.\n    if (!dest) {\n        // remove all.\n        var dests = state.pipes;\n        var len = state.pipesCount;\n        state.pipes = null;\n        state.pipesCount = 0;\n        this.removeListener(\"readable\", pipeOnReadable);\n        state.flowing = false;\n        for(var i = 0; i < len; i++)dests[i].emit(\"unpipe\", this);\n        return this;\n    }\n    // try to find the right one.\n    var i = indexOf(state.pipes, dest);\n    if (i === -1) return this;\n    state.pipes.splice(i, 1);\n    state.pipesCount -= 1;\n    if (state.pipesCount === 1) state.pipes = state.pipes[0];\n    dest.emit(\"unpipe\", this);\n    return this;\n};\n// set up data events if they are asked for\n// Ensure readable listeners eventually get something\nReadable.prototype.on = function(ev, fn) {\n    var res = Stream.prototype.on.call(this, ev, fn);\n    if (ev === \"data\" && !this._readableState.flowing) emitDataEvents(this);\n    if (ev === \"readable\" && this.readable) {\n        var state = this._readableState;\n        if (!state.readableListening) {\n            state.readableListening = true;\n            state.emittedReadable = false;\n            state.needReadable = true;\n            if (!state.reading) {\n                this.read(0);\n            } else if (state.length) {\n                emitReadable(this, state);\n            }\n        }\n    }\n    return res;\n};\nReadable.prototype.addListener = Readable.prototype.on;\n// pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\nReadable.prototype.resume = function() {\n    emitDataEvents(this);\n    this.read(0);\n    this.emit(\"resume\");\n};\nReadable.prototype.pause = function() {\n    emitDataEvents(this, true);\n    this.emit(\"pause\");\n};\nfunction emitDataEvents(stream, startPaused) {\n    var state = stream._readableState;\n    if (state.flowing) {\n        // https://github.com/isaacs/readable-stream/issues/16\n        throw new Error(\"Cannot switch to old mode now.\");\n    }\n    var paused = startPaused || false;\n    var readable = false;\n    // convert to an old-style stream.\n    stream.readable = true;\n    stream.pipe = Stream.prototype.pipe;\n    stream.on = stream.addListener = Stream.prototype.on;\n    stream.on(\"readable\", function() {\n        readable = true;\n        var c;\n        while(!paused && null !== (c = stream.read()))stream.emit(\"data\", c);\n        if (c === null) {\n            readable = false;\n            stream._readableState.needReadable = true;\n        }\n    });\n    stream.pause = function() {\n        paused = true;\n        this.emit(\"pause\");\n    };\n    stream.resume = function() {\n        paused = false;\n        if (readable) process.nextTick(function() {\n            stream.emit(\"readable\");\n        });\n        else this.read(0);\n        this.emit(\"resume\");\n    };\n    // now make it start, just in case it hadn't already.\n    stream.emit(\"readable\");\n}\n// wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\nReadable.prototype.wrap = function(stream) {\n    var state = this._readableState;\n    var paused = false;\n    var self = this;\n    stream.on(\"end\", function() {\n        if (state.decoder && !state.ended) {\n            var chunk = state.decoder.end();\n            if (chunk && chunk.length) self.push(chunk);\n        }\n        self.push(null);\n    });\n    stream.on(\"data\", function(chunk) {\n        if (state.decoder) chunk = state.decoder.write(chunk);\n        // don't skip over falsy values in objectMode\n        //if (state.objectMode && util.isNullOrUndefined(chunk))\n        if (state.objectMode && (chunk === null || chunk === undefined)) return;\n        else if (!state.objectMode && (!chunk || !chunk.length)) return;\n        var ret = self.push(chunk);\n        if (!ret) {\n            paused = true;\n            stream.pause();\n        }\n    });\n    // proxy all the other methods.\n    // important when wrapping filters and duplexes.\n    for(var i in stream){\n        if (typeof stream[i] === \"function\" && typeof this[i] === \"undefined\") {\n            this[i] = function(method) {\n                return function() {\n                    return stream[method].apply(stream, arguments);\n                };\n            }(i);\n        }\n    }\n    // proxy certain important events.\n    var events = [\n        \"error\",\n        \"close\",\n        \"destroy\",\n        \"pause\",\n        \"resume\"\n    ];\n    forEach(events, function(ev) {\n        stream.on(ev, self.emit.bind(self, ev));\n    });\n    // when we try to consume some more bytes, simply unpause the\n    // underlying stream.\n    self._read = function(n) {\n        if (paused) {\n            paused = false;\n            stream.resume();\n        }\n    };\n    return self;\n};\n// exposed for testing purposes only.\nReadable._fromList = fromList;\n// Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\nfunction fromList(n, state) {\n    var list = state.buffer;\n    var length = state.length;\n    var stringMode = !!state.decoder;\n    var objectMode = !!state.objectMode;\n    var ret;\n    // nothing in the list, definitely empty.\n    if (list.length === 0) return null;\n    if (length === 0) ret = null;\n    else if (objectMode) ret = list.shift();\n    else if (!n || n >= length) {\n        // read it all, truncate the array.\n        if (stringMode) ret = list.join(\"\");\n        else ret = Buffer.concat(list, length);\n        list.length = 0;\n    } else {\n        // read just some of it.\n        if (n < list[0].length) {\n            // just take a part of the first list item.\n            // slice is the same for buffers and strings.\n            var buf = list[0];\n            ret = buf.slice(0, n);\n            list[0] = buf.slice(n);\n        } else if (n === list[0].length) {\n            // first list is a perfect match\n            ret = list.shift();\n        } else {\n            // complex case.\n            // we have enough to cover it, but it spans past the first buffer.\n            if (stringMode) ret = \"\";\n            else ret = new Buffer(n);\n            var c = 0;\n            for(var i = 0, l = list.length; i < l && c < n; i++){\n                var buf = list[0];\n                var cpy = Math.min(n - c, buf.length);\n                if (stringMode) ret += buf.slice(0, cpy);\n                else buf.copy(ret, c, 0, cpy);\n                if (cpy < buf.length) list[0] = buf.slice(cpy);\n                else list.shift();\n                c += cpy;\n            }\n        }\n    }\n    return ret;\n}\nfunction endReadable(stream) {\n    var state = stream._readableState;\n    // If we get here before consuming all the bytes, then that is a\n    // bug in node.  Should never happen.\n    if (state.length > 0) throw new Error(\"endReadable called on non-empty stream\");\n    if (!state.endEmitted && state.calledRead) {\n        state.ended = true;\n        process.nextTick(function() {\n            // Check that we didn't get one last unshift.\n            if (!state.endEmitted && state.length === 0) {\n                state.endEmitted = true;\n                stream.readable = false;\n                stream.emit(\"end\");\n            }\n        });\n    }\n}\nfunction forEach(xs, f) {\n    for(var i = 0, l = xs.length; i < l; i++){\n        f(xs[i], i);\n    }\n}\nfunction indexOf(xs, x) {\n    for(var i = 0, l = xs.length; i < l; i++){\n        if (xs[i] === x) return i;\n    }\n    return -1;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/html-tokenize/node_modules/readable-stream/lib/_stream_readable.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/html-tokenize/node_modules/readable-stream/lib/_stream_transform.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/html-tokenize/node_modules/readable-stream/lib/_stream_transform.js ***!
  \******************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n// _read(n) is called, it transforms the queued up data, calling the\n// buffered _write cb's as it consumes chunks.  If consuming a single\n// written chunk would result in multiple output chunks, then the first\n// outputted bit calls the readcb, and subsequent chunks just go into\n// the read buffer, and will cause it to emit 'readable' if necessary.\n//\n// This way, back-pressure is actually determined by the reading side,\n// since _read has to be called to start processing a new chunk.  However,\n// a pathological inflate type of transform can cause excessive buffering\n// here.  For example, imagine a stream where every byte of input is\n// interpreted as an integer from 0-255, and then results in that many\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n// 1kb of data being output.  In this case, you could write a very small\n// amount of input, and end up with a very large amount of output.  In\n// such a pathological inflating mechanism, there'd be no way to tell\n// the system to stop doing the transform.  A single 4MB write could\n// cause the system to run out of memory.\n//\n// However, even in such a pathological case, only a single written chunk\n// would be consumed, and then the rest would wait (un-transformed) until\n// the results of the previous transformed chunk were consumed.\n\nmodule.exports = Transform;\nvar Duplex = __webpack_require__(/*! ./_stream_duplex */ \"(ssr)/./node_modules/html-tokenize/node_modules/readable-stream/lib/_stream_duplex.js\");\n/*<replacement>*/ var util = __webpack_require__(/*! core-util-is */ \"(ssr)/./node_modules/core-util-is/lib/util.js\");\nutil.inherits = __webpack_require__(/*! inherits */ \"(ssr)/./node_modules/inherits/inherits.js\");\n/*</replacement>*/ util.inherits(Transform, Duplex);\nfunction TransformState(options, stream) {\n    this.afterTransform = function(er, data) {\n        return afterTransform(stream, er, data);\n    };\n    this.needTransform = false;\n    this.transforming = false;\n    this.writecb = null;\n    this.writechunk = null;\n}\nfunction afterTransform(stream, er, data) {\n    var ts = stream._transformState;\n    ts.transforming = false;\n    var cb = ts.writecb;\n    if (!cb) return stream.emit(\"error\", new Error(\"no writecb in Transform class\"));\n    ts.writechunk = null;\n    ts.writecb = null;\n    if (data !== null && data !== undefined) stream.push(data);\n    if (cb) cb(er);\n    var rs = stream._readableState;\n    rs.reading = false;\n    if (rs.needReadable || rs.length < rs.highWaterMark) {\n        stream._read(rs.highWaterMark);\n    }\n}\nfunction Transform(options) {\n    if (!(this instanceof Transform)) return new Transform(options);\n    Duplex.call(this, options);\n    var ts = this._transformState = new TransformState(options, this);\n    // when the writable side finishes, then flush out anything remaining.\n    var stream = this;\n    // start out asking for a readable event once data is transformed.\n    this._readableState.needReadable = true;\n    // we have implemented the _read method, and done the other things\n    // that Readable wants before the first _read call, so unset the\n    // sync guard flag.\n    this._readableState.sync = false;\n    this.once(\"finish\", function() {\n        if (\"function\" === typeof this._flush) this._flush(function(er) {\n            done(stream, er);\n        });\n        else done(stream);\n    });\n}\nTransform.prototype.push = function(chunk, encoding) {\n    this._transformState.needTransform = false;\n    return Duplex.prototype.push.call(this, chunk, encoding);\n};\n// This is the part where you do stuff!\n// override this function in implementation classes.\n// 'chunk' is an input chunk.\n//\n// Call `push(newChunk)` to pass along transformed output\n// to the readable side.  You may call 'push' zero or more times.\n//\n// Call `cb(err)` when you are done with this chunk.  If you pass\n// an error, then that'll put the hurt on the whole operation.  If you\n// never call cb(), then you'll never get another chunk.\nTransform.prototype._transform = function(chunk, encoding, cb) {\n    throw new Error(\"not implemented\");\n};\nTransform.prototype._write = function(chunk, encoding, cb) {\n    var ts = this._transformState;\n    ts.writecb = cb;\n    ts.writechunk = chunk;\n    ts.writeencoding = encoding;\n    if (!ts.transforming) {\n        var rs = this._readableState;\n        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);\n    }\n};\n// Doesn't matter what the args are here.\n// _transform does all the work.\n// That we got here means that the readable side wants more data.\nTransform.prototype._read = function(n) {\n    var ts = this._transformState;\n    if (ts.writechunk !== null && ts.writecb && !ts.transforming) {\n        ts.transforming = true;\n        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n    } else {\n        // mark that we need a transform, so that any data that comes in\n        // will get processed, now that we've asked for it.\n        ts.needTransform = true;\n    }\n};\nfunction done(stream, er) {\n    if (er) return stream.emit(\"error\", er);\n    // if there's nothing in the write buffer, then that means\n    // that nothing more will ever be provided\n    var ws = stream._writableState;\n    var rs = stream._readableState;\n    var ts = stream._transformState;\n    if (ws.length) throw new Error(\"calling transform done when ws.length != 0\");\n    if (ts.transforming) throw new Error(\"calling transform done when still transforming\");\n    return stream.push(null);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/html-tokenize/node_modules/readable-stream/lib/_stream_transform.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/html-tokenize/node_modules/readable-stream/lib/_stream_writable.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/html-tokenize/node_modules/readable-stream/lib/_stream_writable.js ***!
  \*****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A bit simpler than readable streams.\n// Implement an async ._write(chunk, cb), and it'll handle all\n// the drain event emission and buffering.\n\nmodule.exports = Writable;\n/*<replacement>*/ var Buffer = (__webpack_require__(/*! buffer */ \"buffer\").Buffer);\n/*</replacement>*/ Writable.WritableState = WritableState;\n/*<replacement>*/ var util = __webpack_require__(/*! core-util-is */ \"(ssr)/./node_modules/core-util-is/lib/util.js\");\nutil.inherits = __webpack_require__(/*! inherits */ \"(ssr)/./node_modules/inherits/inherits.js\");\n/*</replacement>*/ var Stream = __webpack_require__(/*! stream */ \"stream\");\nutil.inherits(Writable, Stream);\nfunction WriteReq(chunk, encoding, cb) {\n    this.chunk = chunk;\n    this.encoding = encoding;\n    this.callback = cb;\n}\nfunction WritableState(options, stream) {\n    options = options || {};\n    // the point at which write() starts returning false\n    // Note: 0 is a valid value, means that we always return false if\n    // the entire buffer is not flushed immediately on write()\n    var hwm = options.highWaterMark;\n    this.highWaterMark = hwm || hwm === 0 ? hwm : 16 * 1024;\n    // object stream flag to indicate whether or not this stream\n    // contains buffers or objects.\n    this.objectMode = !!options.objectMode;\n    // cast to ints.\n    this.highWaterMark = ~~this.highWaterMark;\n    this.needDrain = false;\n    // at the start of calling end()\n    this.ending = false;\n    // when end() has been called, and returned\n    this.ended = false;\n    // when 'finish' is emitted\n    this.finished = false;\n    // should we decode strings into buffers before passing to _write?\n    // this is here so that some node-core streams can optimize string\n    // handling at a lower level.\n    var noDecode = options.decodeStrings === false;\n    this.decodeStrings = !noDecode;\n    // Crypto is kind of old and crusty.  Historically, its default string\n    // encoding is 'binary' so we have to make this configurable.\n    // Everything else in the universe uses 'utf8', though.\n    this.defaultEncoding = options.defaultEncoding || \"utf8\";\n    // not an actual buffer we keep track of, but a measurement\n    // of how much we're waiting to get pushed to some underlying\n    // socket or file.\n    this.length = 0;\n    // a flag to see when we're in the middle of a write.\n    this.writing = false;\n    // a flag to be able to tell if the onwrite cb is called immediately,\n    // or on a later tick.  We set this to true at first, becuase any\n    // actions that shouldn't happen until \"later\" should generally also\n    // not happen before the first write call.\n    this.sync = true;\n    // a flag to know if we're processing previously buffered items, which\n    // may call the _write() callback in the same tick, so that we don't\n    // end up in an overlapped onwrite situation.\n    this.bufferProcessing = false;\n    // the callback that's passed to _write(chunk,cb)\n    this.onwrite = function(er) {\n        onwrite(stream, er);\n    };\n    // the callback that the user supplies to write(chunk,encoding,cb)\n    this.writecb = null;\n    // the amount that is being written when _write is called.\n    this.writelen = 0;\n    this.buffer = [];\n    // True if the error was already emitted and should not be thrown again\n    this.errorEmitted = false;\n}\nfunction Writable(options) {\n    var Duplex = __webpack_require__(/*! ./_stream_duplex */ \"(ssr)/./node_modules/html-tokenize/node_modules/readable-stream/lib/_stream_duplex.js\");\n    // Writable ctor is applied to Duplexes, though they're not\n    // instanceof Writable, they're instanceof Readable.\n    if (!(this instanceof Writable) && !(this instanceof Duplex)) return new Writable(options);\n    this._writableState = new WritableState(options, this);\n    // legacy.\n    this.writable = true;\n    Stream.call(this);\n}\n// Otherwise people can pipe Writable streams, which is just wrong.\nWritable.prototype.pipe = function() {\n    this.emit(\"error\", new Error(\"Cannot pipe. Not readable.\"));\n};\nfunction writeAfterEnd(stream, state, cb) {\n    var er = new Error(\"write after end\");\n    // TODO: defer error events consistently everywhere, not just the cb\n    stream.emit(\"error\", er);\n    process.nextTick(function() {\n        cb(er);\n    });\n}\n// If we get something that is not a buffer, string, null, or undefined,\n// and we're not in objectMode, then that's an error.\n// Otherwise stream chunks are all considered to be of length=1, and the\n// watermarks determine how many objects to keep in the buffer, rather than\n// how many bytes or characters.\nfunction validChunk(stream, state, chunk, cb) {\n    var valid = true;\n    if (!Buffer.isBuffer(chunk) && \"string\" !== typeof chunk && chunk !== null && chunk !== undefined && !state.objectMode) {\n        var er = new TypeError(\"Invalid non-string/buffer chunk\");\n        stream.emit(\"error\", er);\n        process.nextTick(function() {\n            cb(er);\n        });\n        valid = false;\n    }\n    return valid;\n}\nWritable.prototype.write = function(chunk, encoding, cb) {\n    var state = this._writableState;\n    var ret = false;\n    if (typeof encoding === \"function\") {\n        cb = encoding;\n        encoding = null;\n    }\n    if (Buffer.isBuffer(chunk)) encoding = \"buffer\";\n    else if (!encoding) encoding = state.defaultEncoding;\n    if (typeof cb !== \"function\") cb = function() {};\n    if (state.ended) writeAfterEnd(this, state, cb);\n    else if (validChunk(this, state, chunk, cb)) ret = writeOrBuffer(this, state, chunk, encoding, cb);\n    return ret;\n};\nfunction decodeChunk(state, chunk, encoding) {\n    if (!state.objectMode && state.decodeStrings !== false && typeof chunk === \"string\") {\n        chunk = new Buffer(chunk, encoding);\n    }\n    return chunk;\n}\n// if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\nfunction writeOrBuffer(stream, state, chunk, encoding, cb) {\n    chunk = decodeChunk(state, chunk, encoding);\n    if (Buffer.isBuffer(chunk)) encoding = \"buffer\";\n    var len = state.objectMode ? 1 : chunk.length;\n    state.length += len;\n    var ret = state.length < state.highWaterMark;\n    // we must ensure that previous needDrain will not be reset to false.\n    if (!ret) state.needDrain = true;\n    if (state.writing) state.buffer.push(new WriteReq(chunk, encoding, cb));\n    else doWrite(stream, state, len, chunk, encoding, cb);\n    return ret;\n}\nfunction doWrite(stream, state, len, chunk, encoding, cb) {\n    state.writelen = len;\n    state.writecb = cb;\n    state.writing = true;\n    state.sync = true;\n    stream._write(chunk, encoding, state.onwrite);\n    state.sync = false;\n}\nfunction onwriteError(stream, state, sync, er, cb) {\n    if (sync) process.nextTick(function() {\n        cb(er);\n    });\n    else cb(er);\n    stream._writableState.errorEmitted = true;\n    stream.emit(\"error\", er);\n}\nfunction onwriteStateUpdate(state) {\n    state.writing = false;\n    state.writecb = null;\n    state.length -= state.writelen;\n    state.writelen = 0;\n}\nfunction onwrite(stream, er) {\n    var state = stream._writableState;\n    var sync = state.sync;\n    var cb = state.writecb;\n    onwriteStateUpdate(state);\n    if (er) onwriteError(stream, state, sync, er, cb);\n    else {\n        // Check if we're actually ready to finish, but don't emit yet\n        var finished = needFinish(stream, state);\n        if (!finished && !state.bufferProcessing && state.buffer.length) clearBuffer(stream, state);\n        if (sync) {\n            process.nextTick(function() {\n                afterWrite(stream, state, finished, cb);\n            });\n        } else {\n            afterWrite(stream, state, finished, cb);\n        }\n    }\n}\nfunction afterWrite(stream, state, finished, cb) {\n    if (!finished) onwriteDrain(stream, state);\n    cb();\n    if (finished) finishMaybe(stream, state);\n}\n// Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\nfunction onwriteDrain(stream, state) {\n    if (state.length === 0 && state.needDrain) {\n        state.needDrain = false;\n        stream.emit(\"drain\");\n    }\n}\n// if there's something in the buffer waiting, then process it\nfunction clearBuffer(stream, state) {\n    state.bufferProcessing = true;\n    for(var c = 0; c < state.buffer.length; c++){\n        var entry = state.buffer[c];\n        var chunk = entry.chunk;\n        var encoding = entry.encoding;\n        var cb = entry.callback;\n        var len = state.objectMode ? 1 : chunk.length;\n        doWrite(stream, state, len, chunk, encoding, cb);\n        // if we didn't call the onwrite immediately, then\n        // it means that we need to wait until it does.\n        // also, that means that the chunk and cb are currently\n        // being processed, so move the buffer counter past them.\n        if (state.writing) {\n            c++;\n            break;\n        }\n    }\n    state.bufferProcessing = false;\n    if (c < state.buffer.length) state.buffer = state.buffer.slice(c);\n    else state.buffer.length = 0;\n}\nWritable.prototype._write = function(chunk, encoding, cb) {\n    cb(new Error(\"not implemented\"));\n};\nWritable.prototype.end = function(chunk, encoding, cb) {\n    var state = this._writableState;\n    if (typeof chunk === \"function\") {\n        cb = chunk;\n        chunk = null;\n        encoding = null;\n    } else if (typeof encoding === \"function\") {\n        cb = encoding;\n        encoding = null;\n    }\n    if (typeof chunk !== \"undefined\" && chunk !== null) this.write(chunk, encoding);\n    // ignore unnecessary end() calls.\n    if (!state.ending && !state.finished) endWritable(this, state, cb);\n};\nfunction needFinish(stream, state) {\n    return state.ending && state.length === 0 && !state.finished && !state.writing;\n}\nfunction finishMaybe(stream, state) {\n    var need = needFinish(stream, state);\n    if (need) {\n        state.finished = true;\n        stream.emit(\"finish\");\n    }\n    return need;\n}\nfunction endWritable(stream, state, cb) {\n    state.ending = true;\n    finishMaybe(stream, state);\n    if (cb) {\n        if (state.finished) process.nextTick(cb);\n        else stream.once(\"finish\", cb);\n    }\n    state.ended = true;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/html-tokenize/node_modules/readable-stream/lib/_stream_writable.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/html-tokenize/node_modules/readable-stream/readable.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/html-tokenize/node_modules/readable-stream/readable.js ***!
  \*****************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\nvar Stream = __webpack_require__(/*! stream */ \"stream\"); // hack to fix a circular dependency issue when used with browserify\nexports = module.exports = __webpack_require__(/*! ./lib/_stream_readable.js */ \"(ssr)/./node_modules/html-tokenize/node_modules/readable-stream/lib/_stream_readable.js\");\nexports.Stream = Stream;\nexports.Readable = exports;\nexports.Writable = __webpack_require__(/*! ./lib/_stream_writable.js */ \"(ssr)/./node_modules/html-tokenize/node_modules/readable-stream/lib/_stream_writable.js\");\nexports.Duplex = __webpack_require__(/*! ./lib/_stream_duplex.js */ \"(ssr)/./node_modules/html-tokenize/node_modules/readable-stream/lib/_stream_duplex.js\");\nexports.Transform = __webpack_require__(/*! ./lib/_stream_transform.js */ \"(ssr)/./node_modules/html-tokenize/node_modules/readable-stream/lib/_stream_transform.js\");\nexports.PassThrough = __webpack_require__(/*! ./lib/_stream_passthrough.js */ \"(ssr)/./node_modules/html-tokenize/node_modules/readable-stream/lib/_stream_passthrough.js\");\nif ( true && process.env.READABLE_STREAM === \"disable\") {\n    module.exports = __webpack_require__(/*! stream */ \"stream\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaHRtbC10b2tlbml6ZS9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL3JlYWRhYmxlLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxJQUFJQSxTQUFTQyxtQkFBT0EsQ0FBQyx5QkFBVyxvRUFBb0U7QUFDcEdDLFVBQVVDLGdLQUF5QjtBQUNuQ0QsY0FBYyxHQUFHRjtBQUNqQkUsZ0JBQWdCLEdBQUdBO0FBQ25CQSxrS0FBMkI7QUFDM0JBLDRKQUF5QjtBQUN6QkEscUtBQTRCO0FBQzVCQSwyS0FBOEI7QUFDOUIsSUFBSSxLQUFnQixJQUFJTyxRQUFRRSxHQUFHLENBQUNDLGVBQWUsS0FBSyxXQUFXO0lBQ2pFVCw0REFBeUI7QUFDM0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iaWdjb21tZXJjZS8uL25vZGVfbW9kdWxlcy9odG1sLXRva2VuaXplL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vcmVhZGFibGUuanM/OTQ3NCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgU3RyZWFtID0gcmVxdWlyZSgnc3RyZWFtJyk7IC8vIGhhY2sgdG8gZml4IGEgY2lyY3VsYXIgZGVwZW5kZW5jeSBpc3N1ZSB3aGVuIHVzZWQgd2l0aCBicm93c2VyaWZ5XG5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3JlYWRhYmxlLmpzJyk7XG5leHBvcnRzLlN0cmVhbSA9IFN0cmVhbTtcbmV4cG9ydHMuUmVhZGFibGUgPSBleHBvcnRzO1xuZXhwb3J0cy5Xcml0YWJsZSA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fd3JpdGFibGUuanMnKTtcbmV4cG9ydHMuRHVwbGV4ID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV9kdXBsZXguanMnKTtcbmV4cG9ydHMuVHJhbnNmb3JtID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV90cmFuc2Zvcm0uanMnKTtcbmV4cG9ydHMuUGFzc1Rocm91Z2ggPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3Bhc3N0aHJvdWdoLmpzJyk7XG5pZiAoIXByb2Nlc3MuYnJvd3NlciAmJiBwcm9jZXNzLmVudi5SRUFEQUJMRV9TVFJFQU0gPT09ICdkaXNhYmxlJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJ3N0cmVhbScpO1xufVxuIl0sIm5hbWVzIjpbIlN0cmVhbSIsInJlcXVpcmUiLCJleHBvcnRzIiwibW9kdWxlIiwiUmVhZGFibGUiLCJXcml0YWJsZSIsIkR1cGxleCIsIlRyYW5zZm9ybSIsIlBhc3NUaHJvdWdoIiwicHJvY2VzcyIsImJyb3dzZXIiLCJlbnYiLCJSRUFEQUJMRV9TVFJFQU0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/html-tokenize/node_modules/readable-stream/readable.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/html-tokenize/node_modules/string_decoder/index.js":
/*!*************************************************************************!*\
  !*** ./node_modules/html-tokenize/node_modules/string_decoder/index.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\nvar Buffer = (__webpack_require__(/*! buffer */ \"buffer\").Buffer);\nvar isBufferEncoding = Buffer.isEncoding || function(encoding) {\n    switch(encoding && encoding.toLowerCase()){\n        case \"hex\":\n        case \"utf8\":\n        case \"utf-8\":\n        case \"ascii\":\n        case \"binary\":\n        case \"base64\":\n        case \"ucs2\":\n        case \"ucs-2\":\n        case \"utf16le\":\n        case \"utf-16le\":\n        case \"raw\":\n            return true;\n        default:\n            return false;\n    }\n};\nfunction assertEncoding(encoding) {\n    if (encoding && !isBufferEncoding(encoding)) {\n        throw new Error(\"Unknown encoding: \" + encoding);\n    }\n}\n// StringDecoder provides an interface for efficiently splitting a series of\n// buffers into a series of JS strings without breaking apart multi-byte\n// characters. CESU-8 is handled as part of the UTF-8 encoding.\n//\n// @TODO Handling all encodings inside a single object makes it very difficult\n// to reason about this code, so it should be split up in the future.\n// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code\n// points as used by CESU-8.\nvar StringDecoder = exports.StringDecoder = function(encoding) {\n    this.encoding = (encoding || \"utf8\").toLowerCase().replace(/[-_]/, \"\");\n    assertEncoding(encoding);\n    switch(this.encoding){\n        case \"utf8\":\n            // CESU-8 represents each of Surrogate Pair by 3-bytes\n            this.surrogateSize = 3;\n            break;\n        case \"ucs2\":\n        case \"utf16le\":\n            // UTF-16 represents each of Surrogate Pair by 2-bytes\n            this.surrogateSize = 2;\n            this.detectIncompleteChar = utf16DetectIncompleteChar;\n            break;\n        case \"base64\":\n            // Base-64 stores 3 bytes in 4 chars, and pads the remainder.\n            this.surrogateSize = 3;\n            this.detectIncompleteChar = base64DetectIncompleteChar;\n            break;\n        default:\n            this.write = passThroughWrite;\n            return;\n    }\n    // Enough space to store all bytes of a single character. UTF-8 needs 4\n    // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).\n    this.charBuffer = new Buffer(6);\n    // Number of bytes received for the current incomplete multi-byte character.\n    this.charReceived = 0;\n    // Number of bytes expected for the current incomplete multi-byte character.\n    this.charLength = 0;\n};\n// write decodes the given buffer and returns it as JS string that is\n// guaranteed to not contain any partial multi-byte characters. Any partial\n// character found at the end of the buffer is buffered up, and will be\n// returned when calling write again with the remaining bytes.\n//\n// Note: Converting a Buffer containing an orphan surrogate to a String\n// currently works, but converting a String to a Buffer (via `new Buffer`, or\n// Buffer#write) will replace incomplete surrogates with the unicode\n// replacement character. See https://codereview.chromium.org/121173009/ .\nStringDecoder.prototype.write = function(buffer) {\n    var charStr = \"\";\n    // if our last write ended with an incomplete multibyte character\n    while(this.charLength){\n        // determine how many remaining bytes this buffer has to offer for this char\n        var available = buffer.length >= this.charLength - this.charReceived ? this.charLength - this.charReceived : buffer.length;\n        // add the new bytes to the char buffer\n        buffer.copy(this.charBuffer, this.charReceived, 0, available);\n        this.charReceived += available;\n        if (this.charReceived < this.charLength) {\n            // still not enough chars in this buffer? wait for more ...\n            return \"\";\n        }\n        // remove bytes belonging to the current character from the buffer\n        buffer = buffer.slice(available, buffer.length);\n        // get the character that was split\n        charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);\n        // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character\n        var charCode = charStr.charCodeAt(charStr.length - 1);\n        if (charCode >= 0xD800 && charCode <= 0xDBFF) {\n            this.charLength += this.surrogateSize;\n            charStr = \"\";\n            continue;\n        }\n        this.charReceived = this.charLength = 0;\n        // if there are no more bytes in this buffer, just emit our char\n        if (buffer.length === 0) {\n            return charStr;\n        }\n        break;\n    }\n    // determine and set charLength / charReceived\n    this.detectIncompleteChar(buffer);\n    var end = buffer.length;\n    if (this.charLength) {\n        // buffer the incomplete character bytes we got\n        buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);\n        end -= this.charReceived;\n    }\n    charStr += buffer.toString(this.encoding, 0, end);\n    var end = charStr.length - 1;\n    var charCode = charStr.charCodeAt(end);\n    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character\n    if (charCode >= 0xD800 && charCode <= 0xDBFF) {\n        var size = this.surrogateSize;\n        this.charLength += size;\n        this.charReceived += size;\n        this.charBuffer.copy(this.charBuffer, size, 0, size);\n        buffer.copy(this.charBuffer, 0, 0, size);\n        return charStr.substring(0, end);\n    }\n    // or just emit the charStr\n    return charStr;\n};\n// detectIncompleteChar determines if there is an incomplete UTF-8 character at\n// the end of the given buffer. If so, it sets this.charLength to the byte\n// length that character, and sets this.charReceived to the number of bytes\n// that are available for this character.\nStringDecoder.prototype.detectIncompleteChar = function(buffer) {\n    // determine how many bytes we have to check at the end of this buffer\n    var i = buffer.length >= 3 ? 3 : buffer.length;\n    // Figure out if one of the last i bytes of our buffer announces an\n    // incomplete char.\n    for(; i > 0; i--){\n        var c = buffer[buffer.length - i];\n        // See http://en.wikipedia.org/wiki/UTF-8#Description\n        // 110XXXXX\n        if (i == 1 && c >> 5 == 0x06) {\n            this.charLength = 2;\n            break;\n        }\n        // 1110XXXX\n        if (i <= 2 && c >> 4 == 0x0E) {\n            this.charLength = 3;\n            break;\n        }\n        // 11110XXX\n        if (i <= 3 && c >> 3 == 0x1E) {\n            this.charLength = 4;\n            break;\n        }\n    }\n    this.charReceived = i;\n};\nStringDecoder.prototype.end = function(buffer) {\n    var res = \"\";\n    if (buffer && buffer.length) res = this.write(buffer);\n    if (this.charReceived) {\n        var cr = this.charReceived;\n        var buf = this.charBuffer;\n        var enc = this.encoding;\n        res += buf.slice(0, cr).toString(enc);\n    }\n    return res;\n};\nfunction passThroughWrite(buffer) {\n    return buffer.toString(this.encoding);\n}\nfunction utf16DetectIncompleteChar(buffer) {\n    this.charReceived = buffer.length % 2;\n    this.charLength = this.charReceived ? 2 : 0;\n}\nfunction base64DetectIncompleteChar(buffer) {\n    this.charReceived = buffer.length % 3;\n    this.charLength = this.charReceived ? 3 : 0;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/html-tokenize/node_modules/string_decoder/index.js\n");

/***/ })

};
;