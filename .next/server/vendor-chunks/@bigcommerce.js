"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@bigcommerce";
exports.ids = ["vendor-chunks/@bigcommerce"];
exports.modules = {

/***/ "(ssr)/./node_modules/@bigcommerce/catalyst-client/dist/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@bigcommerce/catalyst-client/dist/index.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all)=>{\n    for(var name2 in all)__defProp(target, name2, {\n        get: all[name2],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    BigCommerceAPIError: ()=>BigCommerceAPIError,\n    createClient: ()=>createClient,\n    removeEdgesAndNodes: ()=>removeEdgesAndNodes\n});\nmodule.exports = __toCommonJS(src_exports);\n// src/error.ts\nvar BigCommerceAPIError = class extends Error {\n    constructor(status, graphqlErrors = []){\n        const message = `\n    BigCommerce API returned ${status}\n    ${graphqlErrors.map((error)=>JSON.stringify(error, null, 2)).join(\"\\n\")}\n    `;\n        super(message);\n        this.status = status;\n        this.graphqlErrors = graphqlErrors;\n        this.name = \"BigCommerceAPIError\";\n    }\n    static async createFromResponse(response) {\n        try {\n            const errorResponse = await response.json();\n            assertIsErrorResponse(errorResponse);\n            return new BigCommerceAPIError(response.status, errorResponse.errors);\n        } catch (jsonParseError) {\n            return new BigCommerceAPIError(response.status);\n        }\n    }\n};\nfunction assertIsErrorResponse(value) {\n    if (typeof value !== \"object\" || value === null) {\n        throw new Error(\"Expected maybeError to be an object\");\n    }\n    if (!(\"errors\" in value)) {\n        throw new Error(\"Expected maybeError to have an errors property\");\n    }\n}\n// src/utils/getOperationName.ts\nvar import_graphql = __webpack_require__(/*! graphql */ \"(ssr)/./node_modules/graphql/index.mjs\");\nfunction isOperationDefinitionNode(node) {\n    return node.kind === \"OperationDefinition\";\n}\nvar getOperationInfo = (document)=>{\n    const documentNode = (0, import_graphql.parse)(document.toString());\n    const operationInfo = documentNode.definitions.filter(isOperationDefinitionNode).map((def)=>{\n        var _a;\n        return {\n            name: (_a = def.name) == null ? void 0 : _a.value,\n            type: def.operation\n        };\n    })[0];\n    return operationInfo;\n};\n// src/utils/userAgent.ts\nvar import_std_env = __webpack_require__(/*! std-env */ \"(ssr)/./node_modules/std-env/dist/index.cjs\");\n// package.json\nvar package_default = {\n    name: \"@bigcommerce/catalyst-client\",\n    description: \"BigCommerce API client for Catalyst.\",\n    version: \"0.1.0\",\n    main: \"dist/index.js\",\n    types: \"dist/index.d.ts\",\n    scripts: {\n        build: \"tsup\",\n        dev: \"tsup --watch\",\n        typecheck: \"tsc --noEmit\",\n        lint: \"eslint . --ext .ts,.js,.cjs --max-warnings 0\",\n        \"lint-fix\": \"eslint . --ext .ts,.js,.cjs --fix\",\n        \"gen-types\": \"dotenv -e .env.local -- node scripts/types.js\",\n        test: \"jest\"\n    },\n    files: [\n        \"dist\"\n    ],\n    dependencies: {\n        \"@graphql-typed-document-node/core\": \"^3.2.0\",\n        graphql: \"^16.8.1\",\n        \"std-env\": \"^3.7.0\"\n    },\n    devDependencies: {\n        \"@bigcommerce/eslint-config\": \"^2.7.0\",\n        \"@bigcommerce/eslint-config-catalyst\": \"workspace:^\",\n        \"@types/node\": \"^18.17.12\",\n        \"dotenv-cli\": \"^7.3.0\",\n        eslint: \"^8.55.0\",\n        jest: \"^29.7.0\",\n        prettier: \"^3.1.1\",\n        tsup: \"^6.7.0\",\n        typescript: \"^5.3.3\"\n    }\n};\n// src/utils/userAgent.ts\nvar { name, version } = package_default;\nvar getPlatform = ()=>{\n    const keysOfInterest = [\n        import_std_env.runtime,\n        import_std_env.provider,\n        import_std_env.nodeVersion,\n        import_std_env.process.env.NODE_ENV\n    ].filter(Boolean);\n    return keysOfInterest.join(\"; \");\n};\nvar detectedPlatform = getPlatform();\nvar getBackendUserAgent = (platform, extensions)=>{\n    const userAgentParts = [\n        `${name}/${version}`\n    ];\n    const platformValue = platform || detectedPlatform;\n    userAgentParts.push(`(${platformValue})`);\n    if (extensions) {\n        userAgentParts.push(extensions);\n    }\n    return userAgentParts.join(\" \");\n};\n// src/client.ts\nvar graphqlApiDomain = process.env.BIGCOMMERCE_GRAPHQL_API_DOMAIN ?? \"mybigcommerce.com\";\nvar adminApiHostname = process.env.BIGCOMMERCE_ADMIN_API_HOST ?? \"api.bigcommerce.com\";\nvar Client = class {\n    constructor(config){\n        this.config = config;\n        this.graphqlUrl = this.getEndpoint();\n        this.backendUserAgent = getBackendUserAgent(config.platform, config.backendUserAgentExtensions);\n    }\n    async fetch({ document, variables, customerId, fetchOptions = {} }) {\n        const { cache, headers = {}, ...rest } = fetchOptions;\n        const log = this.requestLogger(document);\n        const response = await fetch(this.graphqlUrl, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: `Bearer ${this.config.customerImpersonationToken}`,\n                \"User-Agent\": this.backendUserAgent,\n                ...customerId && {\n                    \"X-Bc-Customer-Id\": String(customerId)\n                },\n                ...headers\n            },\n            body: JSON.stringify({\n                query: document,\n                ...variables && {\n                    variables\n                }\n            }),\n            ...cache && {\n                cache\n            },\n            ...rest\n        });\n        if (!response.ok) {\n            throw await BigCommerceAPIError.createFromResponse(response);\n        }\n        log(response);\n        return response.json();\n    }\n    async fetchCartRedirectUrls(cartId) {\n        const response = await fetch(`https://${adminApiHostname}/stores/${this.config.storeHash}/v3/carts/${cartId}/redirect_urls`, {\n            method: \"POST\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n                \"X-Auth-Token\": this.config.xAuthToken,\n                \"User-Agent\": this.backendUserAgent\n            },\n            cache: \"no-store\",\n            body: JSON.stringify({\n                cart_id: cartId\n            })\n        });\n        if (!response.ok) {\n            throw new Error(`Unable to get checkout URL: ${response.statusText}`);\n        }\n        return response.json();\n    }\n    async fetchAvailableCountries() {\n        const response = await fetch(`https://api.bigcommerce.com/stores/${this.config.storeHash}/v2/countries?limit=250`, {\n            method: \"GET\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n                \"X-Auth-Token\": this.config.xAuthToken\n            }\n        });\n        if (!response.ok) {\n            throw new Error(`Unable to get available Countries List: ${response.statusText}`);\n        }\n        return response.json();\n    }\n    async fetchCountryStates(id) {\n        const response = await fetch(`https://api.bigcommerce.com/stores/${this.config.storeHash}/v2/countries/${id}/states?limit=60`, {\n            method: \"GET\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n                \"X-Auth-Token\": this.config.xAuthToken\n            }\n        });\n        if (!response.ok) {\n            throw new Error(`Unable to get available States or Provinces: ${response.statusText}`);\n        }\n        return response.json();\n    }\n    async fetchShippingZones() {\n        const response = await fetch(`https://api.bigcommerce.com/stores/${this.config.storeHash}/v2/shipping/zones`, {\n            method: \"GET\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n                \"X-Auth-Token\": this.config.xAuthToken\n            }\n        });\n        if (!response.ok) {\n            throw new Error(`Unable to get Shipping Zones: ${response.statusText}`);\n        }\n        return response.json();\n    }\n    getEndpoint() {\n        if (!this.config.channelId || this.config.channelId === \"1\") {\n            return `https://store-${this.config.storeHash}.${graphqlApiDomain}/graphql`;\n        }\n        return `https://store-${this.config.storeHash}-${this.config.channelId}.${graphqlApiDomain}/graphql`;\n    }\n    requestLogger(document) {\n        if (!this.config.logger) {\n            return ()=>{};\n        }\n        const { name: name2, type } = getOperationInfo(document);\n        const timeStart = Date.now();\n        return (response)=>{\n            const timeEnd = Date.now();\n            const duration = timeEnd - timeStart;\n            const complexity = response.headers.get(\"x-bc-graphql-complexity\");\n            console.log(`[BigCommerce] ${type} ${name2 ?? \"anonymous\"} - ${duration}ms - complexity ${complexity ?? \"unknown\"}`);\n        };\n    }\n};\nfunction createClient(config) {\n    return new Client(config);\n}\n// src/utils/removeEdgesAndNodes.ts\nvar removeEdgesAndNodes = (array)=>{\n    if (!array.edges) {\n        return [];\n    }\n    return array.edges.filter((edge)=>edge !== null).map((edge)=>edge.node);\n};\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@bigcommerce/catalyst-client/dist/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@bigcommerce/catalyst-client/dist/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@bigcommerce/catalyst-client/dist/index.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all)=>{\n    for(var name2 in all)__defProp(target, name2, {\n        get: all[name2],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    BigCommerceAPIError: ()=>BigCommerceAPIError,\n    createClient: ()=>createClient,\n    removeEdgesAndNodes: ()=>removeEdgesAndNodes\n});\nmodule.exports = __toCommonJS(src_exports);\n// src/error.ts\nvar BigCommerceAPIError = class extends Error {\n    constructor(status, graphqlErrors = []){\n        const message = `\n    BigCommerce API returned ${status}\n    ${graphqlErrors.map((error)=>JSON.stringify(error, null, 2)).join(\"\\n\")}\n    `;\n        super(message);\n        this.status = status;\n        this.graphqlErrors = graphqlErrors;\n        this.name = \"BigCommerceAPIError\";\n    }\n    static async createFromResponse(response) {\n        try {\n            const errorResponse = await response.json();\n            assertIsErrorResponse(errorResponse);\n            return new BigCommerceAPIError(response.status, errorResponse.errors);\n        } catch (jsonParseError) {\n            return new BigCommerceAPIError(response.status);\n        }\n    }\n};\nfunction assertIsErrorResponse(value) {\n    if (typeof value !== \"object\" || value === null) {\n        throw new Error(\"Expected maybeError to be an object\");\n    }\n    if (!(\"errors\" in value)) {\n        throw new Error(\"Expected maybeError to have an errors property\");\n    }\n}\n// src/utils/getOperationName.ts\nvar import_graphql = __webpack_require__(/*! graphql */ \"(action-browser)/./node_modules/graphql/index.mjs\");\nfunction isOperationDefinitionNode(node) {\n    return node.kind === \"OperationDefinition\";\n}\nvar getOperationInfo = (document)=>{\n    const documentNode = (0, import_graphql.parse)(document.toString());\n    const operationInfo = documentNode.definitions.filter(isOperationDefinitionNode).map((def)=>{\n        var _a;\n        return {\n            name: (_a = def.name) == null ? void 0 : _a.value,\n            type: def.operation\n        };\n    })[0];\n    return operationInfo;\n};\n// src/utils/userAgent.ts\nvar import_std_env = __webpack_require__(/*! std-env */ \"(action-browser)/./node_modules/std-env/dist/index.cjs\");\n// package.json\nvar package_default = {\n    name: \"@bigcommerce/catalyst-client\",\n    description: \"BigCommerce API client for Catalyst.\",\n    version: \"0.1.0\",\n    main: \"dist/index.js\",\n    types: \"dist/index.d.ts\",\n    scripts: {\n        build: \"tsup\",\n        dev: \"tsup --watch\",\n        typecheck: \"tsc --noEmit\",\n        lint: \"eslint . --ext .ts,.js,.cjs --max-warnings 0\",\n        \"lint-fix\": \"eslint . --ext .ts,.js,.cjs --fix\",\n        \"gen-types\": \"dotenv -e .env.local -- node scripts/types.js\",\n        test: \"jest\"\n    },\n    files: [\n        \"dist\"\n    ],\n    dependencies: {\n        \"@graphql-typed-document-node/core\": \"^3.2.0\",\n        graphql: \"^16.8.1\",\n        \"std-env\": \"^3.7.0\"\n    },\n    devDependencies: {\n        \"@bigcommerce/eslint-config\": \"^2.7.0\",\n        \"@bigcommerce/eslint-config-catalyst\": \"workspace:^\",\n        \"@types/node\": \"^18.17.12\",\n        \"dotenv-cli\": \"^7.3.0\",\n        eslint: \"^8.55.0\",\n        jest: \"^29.7.0\",\n        prettier: \"^3.1.1\",\n        tsup: \"^6.7.0\",\n        typescript: \"^5.3.3\"\n    }\n};\n// src/utils/userAgent.ts\nvar { name, version } = package_default;\nvar getPlatform = ()=>{\n    const keysOfInterest = [\n        import_std_env.runtime,\n        import_std_env.provider,\n        import_std_env.nodeVersion,\n        import_std_env.process.env.NODE_ENV\n    ].filter(Boolean);\n    return keysOfInterest.join(\"; \");\n};\nvar detectedPlatform = getPlatform();\nvar getBackendUserAgent = (platform, extensions)=>{\n    const userAgentParts = [\n        `${name}/${version}`\n    ];\n    const platformValue = platform || detectedPlatform;\n    userAgentParts.push(`(${platformValue})`);\n    if (extensions) {\n        userAgentParts.push(extensions);\n    }\n    return userAgentParts.join(\" \");\n};\n// src/client.ts\nvar graphqlApiDomain = process.env.BIGCOMMERCE_GRAPHQL_API_DOMAIN ?? \"mybigcommerce.com\";\nvar adminApiHostname = process.env.BIGCOMMERCE_ADMIN_API_HOST ?? \"api.bigcommerce.com\";\nvar Client = class {\n    constructor(config){\n        this.config = config;\n        this.graphqlUrl = this.getEndpoint();\n        this.backendUserAgent = getBackendUserAgent(config.platform, config.backendUserAgentExtensions);\n    }\n    async fetch({ document, variables, customerId, fetchOptions = {} }) {\n        const { cache, headers = {}, ...rest } = fetchOptions;\n        const log = this.requestLogger(document);\n        const response = await fetch(this.graphqlUrl, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: `Bearer ${this.config.customerImpersonationToken}`,\n                \"User-Agent\": this.backendUserAgent,\n                ...customerId && {\n                    \"X-Bc-Customer-Id\": String(customerId)\n                },\n                ...headers\n            },\n            body: JSON.stringify({\n                query: document,\n                ...variables && {\n                    variables\n                }\n            }),\n            ...cache && {\n                cache\n            },\n            ...rest\n        });\n        if (!response.ok) {\n            throw await BigCommerceAPIError.createFromResponse(response);\n        }\n        log(response);\n        return response.json();\n    }\n    async fetchCartRedirectUrls(cartId) {\n        const response = await fetch(`https://${adminApiHostname}/stores/${this.config.storeHash}/v3/carts/${cartId}/redirect_urls`, {\n            method: \"POST\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n                \"X-Auth-Token\": this.config.xAuthToken,\n                \"User-Agent\": this.backendUserAgent\n            },\n            cache: \"no-store\",\n            body: JSON.stringify({\n                cart_id: cartId\n            })\n        });\n        if (!response.ok) {\n            throw new Error(`Unable to get checkout URL: ${response.statusText}`);\n        }\n        return response.json();\n    }\n    async fetchAvailableCountries() {\n        const response = await fetch(`https://api.bigcommerce.com/stores/${this.config.storeHash}/v2/countries?limit=250`, {\n            method: \"GET\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n                \"X-Auth-Token\": this.config.xAuthToken\n            }\n        });\n        if (!response.ok) {\n            throw new Error(`Unable to get available Countries List: ${response.statusText}`);\n        }\n        return response.json();\n    }\n    async fetchCountryStates(id) {\n        const response = await fetch(`https://api.bigcommerce.com/stores/${this.config.storeHash}/v2/countries/${id}/states?limit=60`, {\n            method: \"GET\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n                \"X-Auth-Token\": this.config.xAuthToken\n            }\n        });\n        if (!response.ok) {\n            throw new Error(`Unable to get available States or Provinces: ${response.statusText}`);\n        }\n        return response.json();\n    }\n    async fetchShippingZones() {\n        const response = await fetch(`https://api.bigcommerce.com/stores/${this.config.storeHash}/v2/shipping/zones`, {\n            method: \"GET\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n                \"X-Auth-Token\": this.config.xAuthToken\n            }\n        });\n        if (!response.ok) {\n            throw new Error(`Unable to get Shipping Zones: ${response.statusText}`);\n        }\n        return response.json();\n    }\n    getEndpoint() {\n        if (!this.config.channelId || this.config.channelId === \"1\") {\n            return `https://store-${this.config.storeHash}.${graphqlApiDomain}/graphql`;\n        }\n        return `https://store-${this.config.storeHash}-${this.config.channelId}.${graphqlApiDomain}/graphql`;\n    }\n    requestLogger(document) {\n        if (!this.config.logger) {\n            return ()=>{};\n        }\n        const { name: name2, type } = getOperationInfo(document);\n        const timeStart = Date.now();\n        return (response)=>{\n            const timeEnd = Date.now();\n            const duration = timeEnd - timeStart;\n            const complexity = response.headers.get(\"x-bc-graphql-complexity\");\n            console.log(`[BigCommerce] ${type} ${name2 ?? \"anonymous\"} - ${duration}ms - complexity ${complexity ?? \"unknown\"}`);\n        };\n    }\n};\nfunction createClient(config) {\n    return new Client(config);\n}\n// src/utils/removeEdgesAndNodes.ts\nvar removeEdgesAndNodes = (array)=>{\n    if (!array.edges) {\n        return [];\n    }\n    return array.edges.filter((edge)=>edge !== null).map((edge)=>edge.node);\n};\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AYmlnY29tbWVyY2UvY2F0YWx5c3QtY2xpZW50L2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixJQUFJQSxZQUFZQyxPQUFPQyxjQUFjO0FBQ3JDLElBQUlDLG1CQUFtQkYsT0FBT0csd0JBQXdCO0FBQ3RELElBQUlDLG9CQUFvQkosT0FBT0ssbUJBQW1CO0FBQ2xELElBQUlDLGVBQWVOLE9BQU9PLFNBQVMsQ0FBQ0MsY0FBYztBQUNsRCxJQUFJQyxXQUFXLENBQUNDLFFBQVFDO0lBQ3RCLElBQUssSUFBSUMsU0FBU0QsSUFDaEJaLFVBQVVXLFFBQVFFLE9BQU87UUFBRUMsS0FBS0YsR0FBRyxDQUFDQyxNQUFNO1FBQUVFLFlBQVk7SUFBSztBQUNqRTtBQUNBLElBQUlDLGNBQWMsQ0FBQ0MsSUFBSUMsTUFBTUMsUUFBUUM7SUFDbkMsSUFBSUYsUUFBUSxPQUFPQSxTQUFTLFlBQVksT0FBT0EsU0FBUyxZQUFZO1FBQ2xFLEtBQUssSUFBSUcsT0FBT2hCLGtCQUFrQmEsTUFDaEMsSUFBSSxDQUFDWCxhQUFhZSxJQUFJLENBQUNMLElBQUlJLFFBQVFBLFFBQVFGLFFBQ3pDbkIsVUFBVWlCLElBQUlJLEtBQUs7WUFBRVAsS0FBSyxJQUFNSSxJQUFJLENBQUNHLElBQUk7WUFBRU4sWUFBWSxDQUFFSyxDQUFBQSxPQUFPakIsaUJBQWlCZSxNQUFNRyxJQUFHLEtBQU1ELEtBQUtMLFVBQVU7UUFBQztJQUN0SDtJQUNBLE9BQU9FO0FBQ1Q7QUFDQSxJQUFJTSxlQUFlLENBQUNDLE1BQVFSLFlBQVloQixVQUFVLENBQUMsR0FBRyxjQUFjO1FBQUV5QixPQUFPO0lBQUssSUFBSUQ7QUFFdEYsZUFBZTtBQUNmLElBQUlFLGNBQWMsQ0FBQztBQUNuQmhCLFNBQVNnQixhQUFhO0lBQ3BCQyxxQkFBcUIsSUFBTUE7SUFDM0JDLGNBQWMsSUFBTUE7SUFDcEJDLHFCQUFxQixJQUFNQTtBQUM3QjtBQUNBQyxP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YyxVQUFVLENBQUM7UUFFM0c7SUFDRjtBQUNGO0FBQ0EsU0FBU3hILGFBQWFpRixNQUFNO0lBQzFCLE9BQU8sSUFBSUQsT0FBT0M7QUFDcEI7QUFFQSxtQ0FBbUM7QUFDbkMsSUFBSWhGLHNCQUFzQixDQUFDeUg7SUFDekIsSUFBSSxDQUFDQSxNQUFNQyxLQUFLLEVBQUU7UUFDaEIsT0FBTyxFQUFFO0lBQ1g7SUFDQSxPQUFPRCxNQUFNQyxLQUFLLENBQUN6RixNQUFNLENBQUMsQ0FBQzBGLE9BQVNBLFNBQVMsTUFBTW5ILEdBQUcsQ0FBQyxDQUFDbUgsT0FBU0EsS0FBS25HLElBQUk7QUFDNUU7QUFDQSw2REFBNkQ7QUFDN0QsS0FBTXZCLENBQUFBLENBSU4iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iaWdjb21tZXJjZS8uL25vZGVfbW9kdWxlcy9AYmlnY29tbWVyY2UvY2F0YWx5c3QtY2xpZW50L2Rpc3QvaW5kZXguanM/N2JmOCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgX19nZXRPd25Qcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUyIGluIGFsbClcbiAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lMiwgeyBnZXQ6IGFsbFtuYW1lMl0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xudmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgaWYgKGZyb20gJiYgdHlwZW9mIGZyb20gPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZyb20gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgIF9fZGVmUHJvcCh0bywga2V5LCB7IGdldDogKCkgPT4gZnJvbVtrZXldLCBlbnVtZXJhYmxlOiAhKGRlc2MgPSBfX2dldE93blByb3BEZXNjKGZyb20sIGtleSkpIHx8IGRlc2MuZW51bWVyYWJsZSB9KTtcbiAgfVxuICByZXR1cm4gdG87XG59O1xudmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG5cbi8vIHNyYy9pbmRleC50c1xudmFyIHNyY19leHBvcnRzID0ge307XG5fX2V4cG9ydChzcmNfZXhwb3J0cywge1xuICBCaWdDb21tZXJjZUFQSUVycm9yOiAoKSA9PiBCaWdDb21tZXJjZUFQSUVycm9yLFxuICBjcmVhdGVDbGllbnQ6ICgpID0+IGNyZWF0ZUNsaWVudCxcbiAgcmVtb3ZlRWRnZXNBbmROb2RlczogKCkgPT4gcmVtb3ZlRWRnZXNBbmROb2Rlc1xufSk7XG5tb2R1bGUuZXhwb3J0cyA9IF9fdG9Db21tb25KUyhzcmNfZXhwb3J0cyk7XG5cbi8vIHNyYy9lcnJvci50c1xudmFyIEJpZ0NvbW1lcmNlQVBJRXJyb3IgPSBjbGFzcyBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3Ioc3RhdHVzLCBncmFwaHFsRXJyb3JzID0gW10pIHtcbiAgICBjb25zdCBtZXNzYWdlID0gYFxuICAgIEJpZ0NvbW1lcmNlIEFQSSByZXR1cm5lZCAke3N0YXR1c31cbiAgICAke2dyYXBocWxFcnJvcnMubWFwKChlcnJvcikgPT4gSlNPTi5zdHJpbmdpZnkoZXJyb3IsIG51bGwsIDIpKS5qb2luKFwiXFxuXCIpfVxuICAgIGA7XG4gICAgc3VwZXIobWVzc2FnZSk7XG4gICAgdGhpcy5zdGF0dXMgPSBzdGF0dXM7XG4gICAgdGhpcy5ncmFwaHFsRXJyb3JzID0gZ3JhcGhxbEVycm9ycztcbiAgICB0aGlzLm5hbWUgPSBcIkJpZ0NvbW1lcmNlQVBJRXJyb3JcIjtcbiAgfVxuICBzdGF0aWMgYXN5bmMgY3JlYXRlRnJvbVJlc3BvbnNlKHJlc3BvbnNlKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGVycm9yUmVzcG9uc2UgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICBhc3NlcnRJc0Vycm9yUmVzcG9uc2UoZXJyb3JSZXNwb25zZSk7XG4gICAgICByZXR1cm4gbmV3IEJpZ0NvbW1lcmNlQVBJRXJyb3IocmVzcG9uc2Uuc3RhdHVzLCBlcnJvclJlc3BvbnNlLmVycm9ycyk7XG4gICAgfSBjYXRjaCAoanNvblBhcnNlRXJyb3IpIHtcbiAgICAgIHJldHVybiBuZXcgQmlnQ29tbWVyY2VBUElFcnJvcihyZXNwb25zZS5zdGF0dXMpO1xuICAgIH1cbiAgfVxufTtcbmZ1bmN0aW9uIGFzc2VydElzRXJyb3JSZXNwb25zZSh2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcIm9iamVjdFwiIHx8IHZhbHVlID09PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRXhwZWN0ZWQgbWF5YmVFcnJvciB0byBiZSBhbiBvYmplY3RcIik7XG4gIH1cbiAgaWYgKCEoXCJlcnJvcnNcIiBpbiB2YWx1ZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJFeHBlY3RlZCBtYXliZUVycm9yIHRvIGhhdmUgYW4gZXJyb3JzIHByb3BlcnR5XCIpO1xuICB9XG59XG5cbi8vIHNyYy91dGlscy9nZXRPcGVyYXRpb25OYW1lLnRzXG52YXIgaW1wb3J0X2dyYXBocWwgPSByZXF1aXJlKFwiZ3JhcGhxbFwiKTtcbmZ1bmN0aW9uIGlzT3BlcmF0aW9uRGVmaW5pdGlvbk5vZGUobm9kZSkge1xuICByZXR1cm4gbm9kZS5raW5kID09PSBcIk9wZXJhdGlvbkRlZmluaXRpb25cIjtcbn1cbnZhciBnZXRPcGVyYXRpb25JbmZvID0gKGRvY3VtZW50KSA9PiB7XG4gIGNvbnN0IGRvY3VtZW50Tm9kZSA9ICgwLCBpbXBvcnRfZ3JhcGhxbC5wYXJzZSkoZG9jdW1lbnQudG9TdHJpbmcoKSk7XG4gIGNvbnN0IG9wZXJhdGlvbkluZm8gPSBkb2N1bWVudE5vZGUuZGVmaW5pdGlvbnMuZmlsdGVyKGlzT3BlcmF0aW9uRGVmaW5pdGlvbk5vZGUpLm1hcCgoZGVmKSA9PiB7XG4gICAgdmFyIF9hO1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiAoX2EgPSBkZWYubmFtZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLnZhbHVlLFxuICAgICAgdHlwZTogZGVmLm9wZXJhdGlvblxuICAgIH07XG4gIH0pWzBdO1xuICByZXR1cm4gb3BlcmF0aW9uSW5mbztcbn07XG5cbi8vIHNyYy91dGlscy91c2VyQWdlbnQudHNcbnZhciBpbXBvcnRfc3RkX2VudiA9IHJlcXVpcmUoXCJzdGQtZW52XCIpO1xuXG4vLyBwYWNrYWdlLmpzb25cbnZhciBwYWNrYWdlX2RlZmF1bHQgPSB7XG4gIG5hbWU6IFwiQGJpZ2NvbW1lcmNlL2NhdGFseXN0LWNsaWVudFwiLFxuICBkZXNjcmlwdGlvbjogXCJCaWdDb21tZXJjZSBBUEkgY2xpZW50IGZvciBDYXRhbHlzdC5cIixcbiAgdmVyc2lvbjogXCIwLjEuMFwiLFxuICBtYWluOiBcImRpc3QvaW5kZXguanNcIixcbiAgdHlwZXM6IFwiZGlzdC9pbmRleC5kLnRzXCIsXG4gIHNjcmlwdHM6IHtcbiAgICBidWlsZDogXCJ0c3VwXCIsXG4gICAgZGV2OiBcInRzdXAgLS13YXRjaFwiLFxuICAgIHR5cGVjaGVjazogXCJ0c2MgLS1ub0VtaXRcIixcbiAgICBsaW50OiBcImVzbGludCAuIC0tZXh0IC50cywuanMsLmNqcyAtLW1heC13YXJuaW5ncyAwXCIsXG4gICAgXCJsaW50LWZpeFwiOiBcImVzbGludCAuIC0tZXh0IC50cywuanMsLmNqcyAtLWZpeFwiLFxuICAgIFwiZ2VuLXR5cGVzXCI6IFwiZG90ZW52IC1lIC5lbnYubG9jYWwgLS0gbm9kZSBzY3JpcHRzL3R5cGVzLmpzXCIsXG4gICAgdGVzdDogXCJqZXN0XCJcbiAgfSxcbiAgZmlsZXM6IFtcbiAgICBcImRpc3RcIlxuICBdLFxuICBkZXBlbmRlbmNpZXM6IHtcbiAgICBcIkBncmFwaHFsLXR5cGVkLWRvY3VtZW50LW5vZGUvY29yZVwiOiBcIl4zLjIuMFwiLFxuICAgIGdyYXBocWw6IFwiXjE2LjguMVwiLFxuICAgIFwic3RkLWVudlwiOiBcIl4zLjcuMFwiXG4gIH0sXG4gIGRldkRlcGVuZGVuY2llczoge1xuICAgIFwiQGJpZ2NvbW1lcmNlL2VzbGludC1jb25maWdcIjogXCJeMi43LjBcIixcbiAgICBcIkBiaWdjb21tZXJjZS9lc2xpbnQtY29uZmlnLWNhdGFseXN0XCI6IFwid29ya3NwYWNlOl5cIixcbiAgICBcIkB0eXBlcy9ub2RlXCI6IFwiXjE4LjE3LjEyXCIsXG4gICAgXCJkb3RlbnYtY2xpXCI6IFwiXjcuMy4wXCIsXG4gICAgZXNsaW50OiBcIl44LjU1LjBcIixcbiAgICBqZXN0OiBcIl4yOS43LjBcIixcbiAgICBwcmV0dGllcjogXCJeMy4xLjFcIixcbiAgICB0c3VwOiBcIl42LjcuMFwiLFxuICAgIHR5cGVzY3JpcHQ6IFwiXjUuMy4zXCJcbiAgfVxufTtcblxuLy8gc3JjL3V0aWxzL3VzZXJBZ2VudC50c1xudmFyIHsgbmFtZSwgdmVyc2lvbiB9ID0gcGFja2FnZV9kZWZhdWx0O1xudmFyIGdldFBsYXRmb3JtID0gKCkgPT4ge1xuICBjb25zdCBrZXlzT2ZJbnRlcmVzdCA9IFtpbXBvcnRfc3RkX2Vudi5ydW50aW1lLCBpbXBvcnRfc3RkX2Vudi5wcm92aWRlciwgaW1wb3J0X3N0ZF9lbnYubm9kZVZlcnNpb24sIGltcG9ydF9zdGRfZW52LnByb2Nlc3MuZW52Lk5PREVfRU5WXS5maWx0ZXIoQm9vbGVhbik7XG4gIHJldHVybiBrZXlzT2ZJbnRlcmVzdC5qb2luKFwiOyBcIik7XG59O1xudmFyIGRldGVjdGVkUGxhdGZvcm0gPSBnZXRQbGF0Zm9ybSgpO1xudmFyIGdldEJhY2tlbmRVc2VyQWdlbnQgPSAocGxhdGZvcm0sIGV4dGVuc2lvbnMpID0+IHtcbiAgY29uc3QgdXNlckFnZW50UGFydHMgPSBbYCR7bmFtZX0vJHt2ZXJzaW9ufWBdO1xuICBjb25zdCBwbGF0Zm9ybVZhbHVlID0gcGxhdGZvcm0gfHwgZGV0ZWN0ZWRQbGF0Zm9ybTtcbiAgdXNlckFnZW50UGFydHMucHVzaChgKCR7cGxhdGZvcm1WYWx1ZX0pYCk7XG4gIGlmIChleHRlbnNpb25zKSB7XG4gICAgdXNlckFnZW50UGFydHMucHVzaChleHRlbnNpb25zKTtcbiAgfVxuICByZXR1cm4gdXNlckFnZW50UGFydHMuam9pbihcIiBcIik7XG59O1xuXG4vLyBzcmMvY2xpZW50LnRzXG52YXIgZ3JhcGhxbEFwaURvbWFpbiA9IHByb2Nlc3MuZW52LkJJR0NPTU1FUkNFX0dSQVBIUUxfQVBJX0RPTUFJTiA/PyBcIm15YmlnY29tbWVyY2UuY29tXCI7XG52YXIgYWRtaW5BcGlIb3N0bmFtZSA9IHByb2Nlc3MuZW52LkJJR0NPTU1FUkNFX0FETUlOX0FQSV9IT1NUID8/IFwiYXBpLmJpZ2NvbW1lcmNlLmNvbVwiO1xudmFyIENsaWVudCA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoY29uZmlnKSB7XG4gICAgdGhpcy5jb25maWcgPSBjb25maWc7XG4gICAgdGhpcy5ncmFwaHFsVXJsID0gdGhpcy5nZXRFbmRwb2ludCgpO1xuICAgIHRoaXMuYmFja2VuZFVzZXJBZ2VudCA9IGdldEJhY2tlbmRVc2VyQWdlbnQoY29uZmlnLnBsYXRmb3JtLCBjb25maWcuYmFja2VuZFVzZXJBZ2VudEV4dGVuc2lvbnMpO1xuICB9XG4gIGFzeW5jIGZldGNoKHtcbiAgICBkb2N1bWVudCxcbiAgICB2YXJpYWJsZXMsXG4gICAgY3VzdG9tZXJJZCxcbiAgICBmZXRjaE9wdGlvbnMgPSB7fVxuICB9KSB7XG4gICAgY29uc3QgeyBjYWNoZSwgaGVhZGVycyA9IHt9LCAuLi5yZXN0IH0gPSBmZXRjaE9wdGlvbnM7XG4gICAgY29uc3QgbG9nID0gdGhpcy5yZXF1ZXN0TG9nZ2VyKGRvY3VtZW50KTtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHRoaXMuZ3JhcGhxbFVybCwge1xuICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICAgIEF1dGhvcml6YXRpb246IGBCZWFyZXIgJHt0aGlzLmNvbmZpZy5jdXN0b21lckltcGVyc29uYXRpb25Ub2tlbn1gLFxuICAgICAgICBcIlVzZXItQWdlbnRcIjogdGhpcy5iYWNrZW5kVXNlckFnZW50LFxuICAgICAgICAuLi5jdXN0b21lcklkICYmIHsgXCJYLUJjLUN1c3RvbWVyLUlkXCI6IFN0cmluZyhjdXN0b21lcklkKSB9LFxuICAgICAgICAuLi5oZWFkZXJzXG4gICAgICB9LFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBxdWVyeTogZG9jdW1lbnQsXG4gICAgICAgIC4uLnZhcmlhYmxlcyAmJiB7IHZhcmlhYmxlcyB9XG4gICAgICB9KSxcbiAgICAgIC4uLmNhY2hlICYmIHsgY2FjaGUgfSxcbiAgICAgIC4uLnJlc3RcbiAgICB9KTtcbiAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICB0aHJvdyBhd2FpdCBCaWdDb21tZXJjZUFQSUVycm9yLmNyZWF0ZUZyb21SZXNwb25zZShyZXNwb25zZSk7XG4gICAgfVxuICAgIGxvZyhyZXNwb25zZSk7XG4gICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbiAgfVxuICBhc3luYyBmZXRjaENhcnRSZWRpcmVjdFVybHMoY2FydElkKSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChcbiAgICAgIGBodHRwczovLyR7YWRtaW5BcGlIb3N0bmFtZX0vc3RvcmVzLyR7dGhpcy5jb25maWcuc3RvcmVIYXNofS92My9jYXJ0cy8ke2NhcnRJZH0vcmVkaXJlY3RfdXJsc2AsXG4gICAgICB7XG4gICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICBBY2NlcHQ6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgICAgIFwiWC1BdXRoLVRva2VuXCI6IHRoaXMuY29uZmlnLnhBdXRoVG9rZW4sXG4gICAgICAgICAgXCJVc2VyLUFnZW50XCI6IHRoaXMuYmFja2VuZFVzZXJBZ2VudFxuICAgICAgICB9LFxuICAgICAgICBjYWNoZTogXCJuby1zdG9yZVwiLFxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgY2FydF9pZDogY2FydElkXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgKTtcbiAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuYWJsZSB0byBnZXQgY2hlY2tvdXQgVVJMOiAke3Jlc3BvbnNlLnN0YXR1c1RleHR9YCk7XG4gICAgfVxuICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XG4gIH1cbiAgYXN5bmMgZmV0Y2hBdmFpbGFibGVDb3VudHJpZXMoKSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChcbiAgICAgIGBodHRwczovL2FwaS5iaWdjb21tZXJjZS5jb20vc3RvcmVzLyR7dGhpcy5jb25maWcuc3RvcmVIYXNofS92Mi9jb3VudHJpZXM/bGltaXQ9MjUwYCxcbiAgICAgIHtcbiAgICAgICAgbWV0aG9kOiBcIkdFVFwiLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgQWNjZXB0OiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgICAgICBcIlgtQXV0aC1Ub2tlblwiOiB0aGlzLmNvbmZpZy54QXV0aFRva2VuXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICApO1xuICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVW5hYmxlIHRvIGdldCBhdmFpbGFibGUgQ291bnRyaWVzIExpc3Q6ICR7cmVzcG9uc2Uuc3RhdHVzVGV4dH1gKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbiAgfVxuICBhc3luYyBmZXRjaENvdW50cnlTdGF0ZXMoaWQpIHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKFxuICAgICAgYGh0dHBzOi8vYXBpLmJpZ2NvbW1lcmNlLmNvbS9zdG9yZXMvJHt0aGlzLmNvbmZpZy5zdG9yZUhhc2h9L3YyL2NvdW50cmllcy8ke2lkfS9zdGF0ZXM/bGltaXQ9NjBgLFxuICAgICAge1xuICAgICAgICBtZXRob2Q6IFwiR0VUXCIsXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICBBY2NlcHQ6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgICAgIFwiWC1BdXRoLVRva2VuXCI6IHRoaXMuY29uZmlnLnhBdXRoVG9rZW5cbiAgICAgICAgfVxuICAgICAgfVxuICAgICk7XG4gICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmFibGUgdG8gZ2V0IGF2YWlsYWJsZSBTdGF0ZXMgb3IgUHJvdmluY2VzOiAke3Jlc3BvbnNlLnN0YXR1c1RleHR9YCk7XG4gICAgfVxuICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XG4gIH1cbiAgYXN5bmMgZmV0Y2hTaGlwcGluZ1pvbmVzKCkge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goXG4gICAgICBgaHR0cHM6Ly9hcGkuYmlnY29tbWVyY2UuY29tL3N0b3Jlcy8ke3RoaXMuY29uZmlnLnN0b3JlSGFzaH0vdjIvc2hpcHBpbmcvem9uZXNgLFxuICAgICAge1xuICAgICAgICBtZXRob2Q6IFwiR0VUXCIsXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICBBY2NlcHQ6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgICAgIFwiWC1BdXRoLVRva2VuXCI6IHRoaXMuY29uZmlnLnhBdXRoVG9rZW5cbiAgICAgICAgfVxuICAgICAgfVxuICAgICk7XG4gICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmFibGUgdG8gZ2V0IFNoaXBwaW5nIFpvbmVzOiAke3Jlc3BvbnNlLnN0YXR1c1RleHR9YCk7XG4gICAgfVxuICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XG4gIH1cbiAgZ2V0RW5kcG9pbnQoKSB7XG4gICAgaWYgKCF0aGlzLmNvbmZpZy5jaGFubmVsSWQgfHwgdGhpcy5jb25maWcuY2hhbm5lbElkID09PSBcIjFcIikge1xuICAgICAgcmV0dXJuIGBodHRwczovL3N0b3JlLSR7dGhpcy5jb25maWcuc3RvcmVIYXNofS4ke2dyYXBocWxBcGlEb21haW59L2dyYXBocWxgO1xuICAgIH1cbiAgICByZXR1cm4gYGh0dHBzOi8vc3RvcmUtJHt0aGlzLmNvbmZpZy5zdG9yZUhhc2h9LSR7dGhpcy5jb25maWcuY2hhbm5lbElkfS4ke2dyYXBocWxBcGlEb21haW59L2dyYXBocWxgO1xuICB9XG4gIHJlcXVlc3RMb2dnZXIoZG9jdW1lbnQpIHtcbiAgICBpZiAoIXRoaXMuY29uZmlnLmxvZ2dlcikge1xuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IHsgbmFtZTogbmFtZTIsIHR5cGUgfSA9IGdldE9wZXJhdGlvbkluZm8oZG9jdW1lbnQpO1xuICAgIGNvbnN0IHRpbWVTdGFydCA9IERhdGUubm93KCk7XG4gICAgcmV0dXJuIChyZXNwb25zZSkgPT4ge1xuICAgICAgY29uc3QgdGltZUVuZCA9IERhdGUubm93KCk7XG4gICAgICBjb25zdCBkdXJhdGlvbiA9IHRpbWVFbmQgLSB0aW1lU3RhcnQ7XG4gICAgICBjb25zdCBjb21wbGV4aXR5ID0gcmVzcG9uc2UuaGVhZGVycy5nZXQoXCJ4LWJjLWdyYXBocWwtY29tcGxleGl0eVwiKTtcbiAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICBgW0JpZ0NvbW1lcmNlXSAke3R5cGV9ICR7bmFtZTIgPz8gXCJhbm9ueW1vdXNcIn0gLSAke2R1cmF0aW9ufW1zIC0gY29tcGxleGl0eSAke2NvbXBsZXhpdHkgPz8gXCJ1bmtub3duXCJ9YFxuICAgICAgKTtcbiAgICB9O1xuICB9XG59O1xuZnVuY3Rpb24gY3JlYXRlQ2xpZW50KGNvbmZpZykge1xuICByZXR1cm4gbmV3IENsaWVudChjb25maWcpO1xufVxuXG4vLyBzcmMvdXRpbHMvcmVtb3ZlRWRnZXNBbmROb2Rlcy50c1xudmFyIHJlbW92ZUVkZ2VzQW5kTm9kZXMgPSAoYXJyYXkpID0+IHtcbiAgaWYgKCFhcnJheS5lZGdlcykge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICByZXR1cm4gYXJyYXkuZWRnZXMuZmlsdGVyKChlZGdlKSA9PiBlZGdlICE9PSBudWxsKS5tYXAoKGVkZ2UpID0+IGVkZ2Uubm9kZSk7XG59O1xuLy8gQW5ub3RhdGUgdGhlIENvbW1vbkpTIGV4cG9ydCBuYW1lcyBmb3IgRVNNIGltcG9ydCBpbiBub2RlOlxuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gIEJpZ0NvbW1lcmNlQVBJRXJyb3IsXG4gIGNyZWF0ZUNsaWVudCxcbiAgcmVtb3ZlRWRnZXNBbmROb2Rlc1xufSk7XG4iXSwibmFtZXMiOlsiX19kZWZQcm9wIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJfX2dldE93blByb3BEZXNjIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX19nZXRPd25Qcm9wTmFtZXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiX19oYXNPd25Qcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJfX2V4cG9ydCIsInRhcmdldCIsImFsbCIsIm5hbWUyIiwiZ2V0IiwiZW51bWVyYWJsZSIsIl9fY29weVByb3BzIiwidG8iLCJmcm9tIiwiZXhjZXB0IiwiZGVzYyIsImtleSIsImNhbGwiLCJfX3RvQ29tbW9uSlMiLCJtb2QiLCJ2YWx1ZSIsInNyY19leHBvcnRzIiwiQmlnQ29tbWVyY2VBUElFcnJvciIsImNyZWF0ZUNsaWVudCIsInJlbW92ZUVkZ2VzQW5kTm9kZXMiLCJtb2R1bGUiLCJleHBvcnRzIiwiRXJyb3IiLCJjb25zdHJ1Y3RvciIsInN0YXR1cyIsImdyYXBocWxFcnJvcnMiLCJtZXNzYWdlIiwibWFwIiwiZXJyb3IiLCJKU09OIiwic3RyaW5naWZ5Iiwiam9pbiIsIm5hbWUiLCJjcmVhdGVGcm9tUmVzcG9uc2UiLCJyZXNwb25zZSIsImVycm9yUmVzcG9uc2UiLCJqc29uIiwiYXNzZXJ0SXNFcnJvclJlc3BvbnNlIiwiZXJyb3JzIiwianNvblBhcnNlRXJyb3IiLCJpbXBvcnRfZ3JhcGhxbCIsInJlcXVpcmUiLCJpc09wZXJhdGlvbkRlZmluaXRpb25Ob2RlIiwibm9kZSIsImtpbmQiLCJnZXRPcGVyYXRpb25JbmZvIiwiZG9jdW1lbnQiLCJkb2N1bWVudE5vZGUiLCJwYXJzZSIsInRvU3RyaW5nIiwib3BlcmF0aW9uSW5mbyIsImRlZmluaXRpb25zIiwiZmlsdGVyIiwiZGVmIiwiX2EiLCJ0eXBlIiwib3BlcmF0aW9uIiwiaW1wb3J0X3N0ZF9lbnYiLCJwYWNrYWdlX2RlZmF1bHQiLCJkZXNjcmlwdGlvbiIsInZlcnNpb24iLCJtYWluIiwidHlwZXMiLCJzY3JpcHRzIiwiYnVpbGQiLCJkZXYiLCJ0eXBlY2hlY2siLCJsaW50IiwidGVzdCIsImZpbGVzIiwiZGVwZW5kZW5jaWVzIiwiZ3JhcGhxbCIsImRldkRlcGVuZGVuY2llcyIsImVzbGludCIsImplc3QiLCJwcmV0dGllciIsInRzdXAiLCJ0eXBlc2NyaXB0IiwiZ2V0UGxhdGZvcm0iLCJrZXlzT2ZJbnRlcmVzdCIsInJ1bnRpbWUiLCJwcm92aWRlciIsIm5vZGVWZXJzaW9uIiwicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwiQm9vbGVhbiIsImRldGVjdGVkUGxhdGZvcm0iLCJnZXRCYWNrZW5kVXNlckFnZW50IiwicGxhdGZvcm0iLCJleHRlbnNpb25zIiwidXNlckFnZW50UGFydHMiLCJwbGF0Zm9ybVZhbHVlIiwicHVzaCIsImdyYXBocWxBcGlEb21haW4iLCJCSUdDT01NRVJDRV9HUkFQSFFMX0FQSV9ET01BSU4iLCJhZG1pbkFwaUhvc3RuYW1lIiwiQklHQ09NTUVSQ0VfQURNSU5fQVBJX0hPU1QiLCJDbGllbnQiLCJjb25maWciLCJncmFwaHFsVXJsIiwiZ2V0RW5kcG9pbnQiLCJiYWNrZW5kVXNlckFnZW50IiwiYmFja2VuZFVzZXJBZ2VudEV4dGVuc2lvbnMiLCJmZXRjaCIsInZhcmlhYmxlcyIsImN1c3RvbWVySWQiLCJmZXRjaE9wdGlvbnMiLCJjYWNoZSIsImhlYWRlcnMiLCJyZXN0IiwibG9nIiwicmVxdWVzdExvZ2dlciIsIm1ldGhvZCIsIkF1dGhvcml6YXRpb24iLCJjdXN0b21lckltcGVyc29uYXRpb25Ub2tlbiIsIlN0cmluZyIsImJvZHkiLCJxdWVyeSIsIm9rIiwiZmV0Y2hDYXJ0UmVkaXJlY3RVcmxzIiwiY2FydElkIiwic3RvcmVIYXNoIiwiQWNjZXB0IiwieEF1dGhUb2tlbiIsImNhcnRfaWQiLCJzdGF0dXNUZXh0IiwiZmV0Y2hBdmFpbGFibGVDb3VudHJpZXMiLCJmZXRjaENvdW50cnlTdGF0ZXMiLCJpZCIsImZldGNoU2hpcHBpbmdab25lcyIsImNoYW5uZWxJZCIsImxvZ2dlciIsInRpbWVTdGFydCIsIkRhdGUiLCJub3ciLCJ0aW1lRW5kIiwiZHVyYXRpb24iLCJjb21wbGV4aXR5IiwiY29uc29sZSIsImFycmF5IiwiZWRnZXMiLCJlZGdlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@bigcommerce/catalyst-client/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@bigcommerce/catalyst-client/dist/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@bigcommerce/catalyst-client/dist/index.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all)=>{\n    for(var name2 in all)__defProp(target, name2, {\n        get: all[name2],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    BigCommerceAPIError: ()=>BigCommerceAPIError,\n    createClient: ()=>createClient,\n    removeEdgesAndNodes: ()=>removeEdgesAndNodes\n});\nmodule.exports = __toCommonJS(src_exports);\n// src/error.ts\nvar BigCommerceAPIError = class extends Error {\n    constructor(status, graphqlErrors = []){\n        const message = `\n    BigCommerce API returned ${status}\n    ${graphqlErrors.map((error)=>JSON.stringify(error, null, 2)).join(\"\\n\")}\n    `;\n        super(message);\n        this.status = status;\n        this.graphqlErrors = graphqlErrors;\n        this.name = \"BigCommerceAPIError\";\n    }\n    static async createFromResponse(response) {\n        try {\n            const errorResponse = await response.json();\n            assertIsErrorResponse(errorResponse);\n            return new BigCommerceAPIError(response.status, errorResponse.errors);\n        } catch (jsonParseError) {\n            return new BigCommerceAPIError(response.status);\n        }\n    }\n};\nfunction assertIsErrorResponse(value) {\n    if (typeof value !== \"object\" || value === null) {\n        throw new Error(\"Expected maybeError to be an object\");\n    }\n    if (!(\"errors\" in value)) {\n        throw new Error(\"Expected maybeError to have an errors property\");\n    }\n}\n// src/utils/getOperationName.ts\nvar import_graphql = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/index.mjs\");\nfunction isOperationDefinitionNode(node) {\n    return node.kind === \"OperationDefinition\";\n}\nvar getOperationInfo = (document)=>{\n    const documentNode = (0, import_graphql.parse)(document.toString());\n    const operationInfo = documentNode.definitions.filter(isOperationDefinitionNode).map((def)=>{\n        var _a;\n        return {\n            name: (_a = def.name) == null ? void 0 : _a.value,\n            type: def.operation\n        };\n    })[0];\n    return operationInfo;\n};\n// src/utils/userAgent.ts\nvar import_std_env = __webpack_require__(/*! std-env */ \"(rsc)/./node_modules/std-env/dist/index.cjs\");\n// package.json\nvar package_default = {\n    name: \"@bigcommerce/catalyst-client\",\n    description: \"BigCommerce API client for Catalyst.\",\n    version: \"0.1.0\",\n    main: \"dist/index.js\",\n    types: \"dist/index.d.ts\",\n    scripts: {\n        build: \"tsup\",\n        dev: \"tsup --watch\",\n        typecheck: \"tsc --noEmit\",\n        lint: \"eslint . --ext .ts,.js,.cjs --max-warnings 0\",\n        \"lint-fix\": \"eslint . --ext .ts,.js,.cjs --fix\",\n        \"gen-types\": \"dotenv -e .env.local -- node scripts/types.js\",\n        test: \"jest\"\n    },\n    files: [\n        \"dist\"\n    ],\n    dependencies: {\n        \"@graphql-typed-document-node/core\": \"^3.2.0\",\n        graphql: \"^16.8.1\",\n        \"std-env\": \"^3.7.0\"\n    },\n    devDependencies: {\n        \"@bigcommerce/eslint-config\": \"^2.7.0\",\n        \"@bigcommerce/eslint-config-catalyst\": \"workspace:^\",\n        \"@types/node\": \"^18.17.12\",\n        \"dotenv-cli\": \"^7.3.0\",\n        eslint: \"^8.55.0\",\n        jest: \"^29.7.0\",\n        prettier: \"^3.1.1\",\n        tsup: \"^6.7.0\",\n        typescript: \"^5.3.3\"\n    }\n};\n// src/utils/userAgent.ts\nvar { name, version } = package_default;\nvar getPlatform = ()=>{\n    const keysOfInterest = [\n        import_std_env.runtime,\n        import_std_env.provider,\n        import_std_env.nodeVersion,\n        import_std_env.process.env.NODE_ENV\n    ].filter(Boolean);\n    return keysOfInterest.join(\"; \");\n};\nvar detectedPlatform = getPlatform();\nvar getBackendUserAgent = (platform, extensions)=>{\n    const userAgentParts = [\n        `${name}/${version}`\n    ];\n    const platformValue = platform || detectedPlatform;\n    userAgentParts.push(`(${platformValue})`);\n    if (extensions) {\n        userAgentParts.push(extensions);\n    }\n    return userAgentParts.join(\" \");\n};\n// src/client.ts\nvar graphqlApiDomain = process.env.BIGCOMMERCE_GRAPHQL_API_DOMAIN ?? \"mybigcommerce.com\";\nvar adminApiHostname = process.env.BIGCOMMERCE_ADMIN_API_HOST ?? \"api.bigcommerce.com\";\nvar Client = class {\n    constructor(config){\n        this.config = config;\n        this.graphqlUrl = this.getEndpoint();\n        this.backendUserAgent = getBackendUserAgent(config.platform, config.backendUserAgentExtensions);\n    }\n    async fetch({ document, variables, customerId, fetchOptions = {} }) {\n        const { cache, headers = {}, ...rest } = fetchOptions;\n        const log = this.requestLogger(document);\n        const response = await fetch(this.graphqlUrl, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: `Bearer ${this.config.customerImpersonationToken}`,\n                \"User-Agent\": this.backendUserAgent,\n                ...customerId && {\n                    \"X-Bc-Customer-Id\": String(customerId)\n                },\n                ...headers\n            },\n            body: JSON.stringify({\n                query: document,\n                ...variables && {\n                    variables\n                }\n            }),\n            ...cache && {\n                cache\n            },\n            ...rest\n        });\n        if (!response.ok) {\n            throw await BigCommerceAPIError.createFromResponse(response);\n        }\n        log(response);\n        return response.json();\n    }\n    async fetchCartRedirectUrls(cartId) {\n        const response = await fetch(`https://${adminApiHostname}/stores/${this.config.storeHash}/v3/carts/${cartId}/redirect_urls`, {\n            method: \"POST\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n                \"X-Auth-Token\": this.config.xAuthToken,\n                \"User-Agent\": this.backendUserAgent\n            },\n            cache: \"no-store\",\n            body: JSON.stringify({\n                cart_id: cartId\n            })\n        });\n        if (!response.ok) {\n            throw new Error(`Unable to get checkout URL: ${response.statusText}`);\n        }\n        return response.json();\n    }\n    async fetchAvailableCountries() {\n        const response = await fetch(`https://api.bigcommerce.com/stores/${this.config.storeHash}/v2/countries?limit=250`, {\n            method: \"GET\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n                \"X-Auth-Token\": this.config.xAuthToken\n            }\n        });\n        if (!response.ok) {\n            throw new Error(`Unable to get available Countries List: ${response.statusText}`);\n        }\n        return response.json();\n    }\n    async fetchCountryStates(id) {\n        const response = await fetch(`https://api.bigcommerce.com/stores/${this.config.storeHash}/v2/countries/${id}/states?limit=60`, {\n            method: \"GET\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n                \"X-Auth-Token\": this.config.xAuthToken\n            }\n        });\n        if (!response.ok) {\n            throw new Error(`Unable to get available States or Provinces: ${response.statusText}`);\n        }\n        return response.json();\n    }\n    async fetchShippingZones() {\n        const response = await fetch(`https://api.bigcommerce.com/stores/${this.config.storeHash}/v2/shipping/zones`, {\n            method: \"GET\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n                \"X-Auth-Token\": this.config.xAuthToken\n            }\n        });\n        if (!response.ok) {\n            throw new Error(`Unable to get Shipping Zones: ${response.statusText}`);\n        }\n        return response.json();\n    }\n    getEndpoint() {\n        if (!this.config.channelId || this.config.channelId === \"1\") {\n            return `https://store-${this.config.storeHash}.${graphqlApiDomain}/graphql`;\n        }\n        return `https://store-${this.config.storeHash}-${this.config.channelId}.${graphqlApiDomain}/graphql`;\n    }\n    requestLogger(document) {\n        if (!this.config.logger) {\n            return ()=>{};\n        }\n        const { name: name2, type } = getOperationInfo(document);\n        const timeStart = Date.now();\n        return (response)=>{\n            const timeEnd = Date.now();\n            const duration = timeEnd - timeStart;\n            const complexity = response.headers.get(\"x-bc-graphql-complexity\");\n            console.log(`[BigCommerce] ${type} ${name2 ?? \"anonymous\"} - ${duration}ms - complexity ${complexity ?? \"unknown\"}`);\n        };\n    }\n};\nfunction createClient(config) {\n    return new Client(config);\n}\n// src/utils/removeEdgesAndNodes.ts\nvar removeEdgesAndNodes = (array)=>{\n    if (!array.edges) {\n        return [];\n    }\n    return array.edges.filter((edge)=>edge !== null).map((edge)=>edge.node);\n};\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@bigcommerce/catalyst-client/dist/index.js\n");

/***/ })

};
;