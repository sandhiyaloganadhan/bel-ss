"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/ts-pattern";
exports.ids = ["vendor-chunks/ts-pattern"];
exports.modules = {

/***/ "(ssr)/./node_modules/ts-pattern/dist/index.cjs":
/*!************************************************!*\
  !*** ./node_modules/ts-pattern/dist/index.cjs ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nfunction n(n, t) {\n    (null == t || t > n.length) && (t = n.length);\n    for(var r = 0, e = new Array(t); r < t; r++)e[r] = n[r];\n    return e;\n}\nfunction t(t, r) {\n    var e = \"undefined\" != typeof Symbol && t[Symbol.iterator] || t[\"@@iterator\"];\n    if (e) return (e = e.call(t)).next.bind(e);\n    if (Array.isArray(t) || (e = function(t, r) {\n        if (t) {\n            if (\"string\" == typeof t) return n(t, r);\n            var e = Object.prototype.toString.call(t).slice(8, -1);\n            return \"Object\" === e && t.constructor && (e = t.constructor.name), \"Map\" === e || \"Set\" === e ? Array.from(t) : \"Arguments\" === e || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e) ? n(t, r) : void 0;\n        }\n    }(t)) || r && t && \"number\" == typeof t.length) {\n        e && (t = e);\n        var u = 0;\n        return function() {\n            return u >= t.length ? {\n                done: !0\n            } : {\n                done: !1,\n                value: t[u++]\n            };\n        };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nvar r = Symbol.for(\"@ts-pattern/matcher\"), e = Symbol.for(\"@ts-pattern/isVariadic\"), u = \"@ts-pattern/anonymous-select-key\", i = function(n) {\n    return Boolean(n && \"object\" == typeof n);\n}, o = function(n) {\n    return n && !!n[r];\n}, c = function n(u, c, a) {\n    if (o(u)) {\n        var f = u[r]().match(c), s = f.matched, l = f.selections;\n        return s && l && Object.keys(l).forEach(function(n) {\n            return a(n, l[n]);\n        }), s;\n    }\n    if (i(u)) {\n        if (!i(c)) return !1;\n        if (Array.isArray(u)) {\n            if (!Array.isArray(c)) return !1;\n            for(var h, v = [], g = [], m = [], d = t(u.keys()); !(h = d()).done;){\n                var y = u[h.value];\n                o(y) && y[e] ? m.push(y) : m.length ? g.push(y) : v.push(y);\n            }\n            if (m.length) {\n                if (m.length > 1) throw new Error(\"Pattern error: Using `...P.array(...)` several times in a single pattern is not allowed.\");\n                if (c.length < v.length + g.length) return !1;\n                var p = c.slice(0, v.length), b = 0 === g.length ? [] : c.slice(-g.length), w = c.slice(v.length, 0 === g.length ? Infinity : -g.length);\n                return v.every(function(t, r) {\n                    return n(t, p[r], a);\n                }) && g.every(function(t, r) {\n                    return n(t, b[r], a);\n                }) && (0 === m.length || n(m[0], w, a));\n            }\n            return u.length === c.length && u.every(function(t, r) {\n                return n(t, c[r], a);\n            });\n        }\n        return Object.keys(u).every(function(t) {\n            var e, i = u[t];\n            return (t in c || o(e = i) && \"optional\" === e[r]().matcherType) && n(i, c[t], a);\n        });\n    }\n    return Object.is(c, u);\n}, a = function n(t) {\n    var e, u, c;\n    return i(t) ? o(t) ? null != (e = null == (u = (c = t[r]()).getSelectionKeys) ? void 0 : u.call(c)) ? e : [] : Array.isArray(t) ? f(t, n) : f(Object.values(t), n) : [];\n}, f = function(n, t) {\n    return n.reduce(function(n, r) {\n        return n.concat(t(r));\n    }, []);\n};\nfunction s() {\n    var n = [].slice.call(arguments);\n    if (1 === n.length) {\n        var t = n[0];\n        return function(n) {\n            return c(t, n, function() {});\n        };\n    }\n    if (2 === n.length) return c(n[0], n[1], function() {});\n    throw new Error(\"isMatching wasn't given the right number of arguments: expected 1 or 2, received \" + n.length + \".\");\n}\nfunction l(n) {\n    return Object.assign(n, {\n        optional: function() {\n            return v(n);\n        },\n        and: function(t) {\n            return d(n, t);\n        },\n        or: function(t) {\n            return y(n, t);\n        },\n        select: function(t) {\n            return void 0 === t ? b(n) : b(t, n);\n        }\n    });\n}\nfunction h(n) {\n    return Object.assign(function(n) {\n        var t;\n        return Object.assign(n, ((t = {})[Symbol.iterator] = function() {\n            var t, r = 0, u = [\n                {\n                    value: Object.assign(n, ((t = {})[e] = !0, t)),\n                    done: !1\n                },\n                {\n                    done: !0,\n                    value: void 0\n                }\n            ];\n            return {\n                next: function() {\n                    var n;\n                    return null != (n = u[r++]) ? n : u.at(-1);\n                }\n            };\n        }, t));\n    }(n), {\n        optional: function() {\n            return h(v(n));\n        },\n        select: function(t) {\n            return h(void 0 === t ? b(n) : b(t, n));\n        }\n    });\n}\nfunction v(n) {\n    var t;\n    return l(((t = {})[r] = function() {\n        return {\n            match: function(t) {\n                var r = {}, e = function(n, t) {\n                    r[n] = t;\n                };\n                return void 0 === t ? (a(n).forEach(function(n) {\n                    return e(n, void 0);\n                }), {\n                    matched: !0,\n                    selections: r\n                }) : {\n                    matched: c(n, t, e),\n                    selections: r\n                };\n            },\n            getSelectionKeys: function() {\n                return a(n);\n            },\n            matcherType: \"optional\"\n        };\n    }, t));\n}\nvar g = function(n, r) {\n    for(var e, u = t(n); !(e = u()).done;)if (!r(e.value)) return !1;\n    return !0;\n}, m = function(n, r) {\n    for(var e, u = t(n.entries()); !(e = u()).done;){\n        var i = e.value;\n        if (!r(i[1], i[0])) return !1;\n    }\n    return !0;\n};\nfunction d() {\n    var n, t = [].slice.call(arguments);\n    return l(((n = {})[r] = function() {\n        return {\n            match: function(n) {\n                var r = {}, e = function(n, t) {\n                    r[n] = t;\n                };\n                return {\n                    matched: t.every(function(t) {\n                        return c(t, n, e);\n                    }),\n                    selections: r\n                };\n            },\n            getSelectionKeys: function() {\n                return f(t, a);\n            },\n            matcherType: \"and\"\n        };\n    }, n));\n}\nfunction y() {\n    var n, t = [].slice.call(arguments);\n    return l(((n = {})[r] = function() {\n        return {\n            match: function(n) {\n                var r = {}, e = function(n, t) {\n                    r[n] = t;\n                };\n                return f(t, a).forEach(function(n) {\n                    return e(n, void 0);\n                }), {\n                    matched: t.some(function(t) {\n                        return c(t, n, e);\n                    }),\n                    selections: r\n                };\n            },\n            getSelectionKeys: function() {\n                return f(t, a);\n            },\n            matcherType: \"or\"\n        };\n    }, n));\n}\nfunction p(n) {\n    var t;\n    return (t = {})[r] = function() {\n        return {\n            match: function(t) {\n                return {\n                    matched: Boolean(n(t))\n                };\n            }\n        };\n    }, t;\n}\nfunction b() {\n    var n, t = [].slice.call(arguments), e = \"string\" == typeof t[0] ? t[0] : void 0, i = 2 === t.length ? t[1] : \"string\" == typeof t[0] ? void 0 : t[0];\n    return l(((n = {})[r] = function() {\n        return {\n            match: function(n) {\n                var t, r = ((t = {})[null != e ? e : u] = n, t);\n                return {\n                    matched: void 0 === i || c(i, n, function(n, t) {\n                        r[n] = t;\n                    }),\n                    selections: r\n                };\n            },\n            getSelectionKeys: function() {\n                return [\n                    null != e ? e : u\n                ].concat(void 0 === i ? [] : a(i));\n            }\n        };\n    }, n));\n}\nfunction w(n) {\n    return \"number\" == typeof n;\n}\nfunction S(n) {\n    return \"string\" == typeof n;\n}\nfunction j(n) {\n    return \"bigint\" == typeof n;\n}\nvar O = l(p(function(n) {\n    return !0;\n})), A = O, x = function n(t) {\n    return Object.assign(l(t), {\n        startsWith: function(r) {\n            return n(d(t, (e = r, p(function(n) {\n                return S(n) && n.startsWith(e);\n            }))));\n            var e;\n        },\n        endsWith: function(r) {\n            return n(d(t, (e = r, p(function(n) {\n                return S(n) && n.endsWith(e);\n            }))));\n            var e;\n        },\n        minLength: function(r) {\n            return n(d(t, function(n) {\n                return p(function(t) {\n                    return S(t) && t.length >= n;\n                });\n            }(r)));\n        },\n        maxLength: function(r) {\n            return n(d(t, function(n) {\n                return p(function(t) {\n                    return S(t) && t.length <= n;\n                });\n            }(r)));\n        },\n        includes: function(r) {\n            return n(d(t, (e = r, p(function(n) {\n                return S(n) && n.includes(e);\n            }))));\n            var e;\n        },\n        regex: function(r) {\n            return n(d(t, (e = r, p(function(n) {\n                return S(n) && Boolean(n.match(e));\n            }))));\n            var e;\n        }\n    });\n}(p(S)), E = function n(t) {\n    return Object.assign(l(t), {\n        between: function(r, e) {\n            return n(d(t, function(n, t) {\n                return p(function(r) {\n                    return w(r) && n <= r && t >= r;\n                });\n            }(r, e)));\n        },\n        lt: function(r) {\n            return n(d(t, function(n) {\n                return p(function(t) {\n                    return w(t) && t < n;\n                });\n            }(r)));\n        },\n        gt: function(r) {\n            return n(d(t, function(n) {\n                return p(function(t) {\n                    return w(t) && t > n;\n                });\n            }(r)));\n        },\n        lte: function(r) {\n            return n(d(t, function(n) {\n                return p(function(t) {\n                    return w(t) && t <= n;\n                });\n            }(r)));\n        },\n        gte: function(r) {\n            return n(d(t, function(n) {\n                return p(function(t) {\n                    return w(t) && t >= n;\n                });\n            }(r)));\n        },\n        int: function() {\n            return n(d(t, p(function(n) {\n                return w(n) && Number.isInteger(n);\n            })));\n        },\n        finite: function() {\n            return n(d(t, p(function(n) {\n                return w(n) && Number.isFinite(n);\n            })));\n        },\n        positive: function() {\n            return n(d(t, p(function(n) {\n                return w(n) && n > 0;\n            })));\n        },\n        negative: function() {\n            return n(d(t, p(function(n) {\n                return w(n) && n < 0;\n            })));\n        }\n    });\n}(p(w)), K = function n(t) {\n    return Object.assign(l(t), {\n        between: function(r, e) {\n            return n(d(t, function(n, t) {\n                return p(function(r) {\n                    return j(r) && n <= r && t >= r;\n                });\n            }(r, e)));\n        },\n        lt: function(r) {\n            return n(d(t, function(n) {\n                return p(function(t) {\n                    return j(t) && t < n;\n                });\n            }(r)));\n        },\n        gt: function(r) {\n            return n(d(t, function(n) {\n                return p(function(t) {\n                    return j(t) && t > n;\n                });\n            }(r)));\n        },\n        lte: function(r) {\n            return n(d(t, function(n) {\n                return p(function(t) {\n                    return j(t) && t <= n;\n                });\n            }(r)));\n        },\n        gte: function(r) {\n            return n(d(t, function(n) {\n                return p(function(t) {\n                    return j(t) && t >= n;\n                });\n            }(r)));\n        },\n        positive: function() {\n            return n(d(t, p(function(n) {\n                return j(n) && n > 0;\n            })));\n        },\n        negative: function() {\n            return n(d(t, p(function(n) {\n                return j(n) && n < 0;\n            })));\n        }\n    });\n}(p(j)), T = l(p(function(n) {\n    return \"boolean\" == typeof n;\n})), P = l(p(function(n) {\n    return \"symbol\" == typeof n;\n})), k = l(p(function(n) {\n    return null == n;\n})), B = l(p(function(n) {\n    return null != n;\n})), I = {\n    __proto__: null,\n    matcher: r,\n    optional: v,\n    array: function() {\n        var n, t = [].slice.call(arguments);\n        return h(((n = {})[r] = function() {\n            return {\n                match: function(n) {\n                    if (!Array.isArray(n)) return {\n                        matched: !1\n                    };\n                    if (0 === t.length) return {\n                        matched: !0\n                    };\n                    var r = t[0], e = {};\n                    if (0 === n.length) return a(r).forEach(function(n) {\n                        e[n] = [];\n                    }), {\n                        matched: !0,\n                        selections: e\n                    };\n                    var u = function(n, t) {\n                        e[n] = (e[n] || []).concat([\n                            t\n                        ]);\n                    };\n                    return {\n                        matched: n.every(function(n) {\n                            return c(r, n, u);\n                        }),\n                        selections: e\n                    };\n                },\n                getSelectionKeys: function() {\n                    return 0 === t.length ? [] : a(t[0]);\n                }\n            };\n        }, n));\n    },\n    set: function() {\n        var n, t = [].slice.call(arguments);\n        return l(((n = {})[r] = function() {\n            return {\n                match: function(n) {\n                    if (!(n instanceof Set)) return {\n                        matched: !1\n                    };\n                    var r = {};\n                    if (0 === n.size) return {\n                        matched: !0,\n                        selections: r\n                    };\n                    if (0 === t.length) return {\n                        matched: !0\n                    };\n                    var e = function(n, t) {\n                        r[n] = (r[n] || []).concat([\n                            t\n                        ]);\n                    }, u = t[0];\n                    return {\n                        matched: g(n, function(n) {\n                            return c(u, n, e);\n                        }),\n                        selections: r\n                    };\n                },\n                getSelectionKeys: function() {\n                    return 0 === t.length ? [] : a(t[0]);\n                }\n            };\n        }, n));\n    },\n    map: function() {\n        var n, t = [].slice.call(arguments);\n        return l(((n = {})[r] = function() {\n            return {\n                match: function(n) {\n                    if (!(n instanceof Map)) return {\n                        matched: !1\n                    };\n                    var r = {};\n                    if (0 === n.size) return {\n                        matched: !0,\n                        selections: r\n                    };\n                    var e, u = function(n, t) {\n                        r[n] = (r[n] || []).concat([\n                            t\n                        ]);\n                    };\n                    if (0 === t.length) return {\n                        matched: !0\n                    };\n                    if (1 === t.length) throw new Error(\"`P.map` wasn't given enough arguments. Expected (key, value), received \" + (null == (e = t[0]) ? void 0 : e.toString()));\n                    var i = t[0], o = t[1];\n                    return {\n                        matched: m(n, function(n, t) {\n                            var r = c(i, t, u), e = c(o, n, u);\n                            return r && e;\n                        }),\n                        selections: r\n                    };\n                },\n                getSelectionKeys: function() {\n                    return 0 === t.length ? [] : [].concat(a(t[0]), a(t[1]));\n                }\n            };\n        }, n));\n    },\n    intersection: d,\n    union: y,\n    not: function(n) {\n        var t;\n        return l(((t = {})[r] = function() {\n            return {\n                match: function(t) {\n                    return {\n                        matched: !c(n, t, function() {})\n                    };\n                },\n                getSelectionKeys: function() {\n                    return [];\n                },\n                matcherType: \"not\"\n            };\n        }, t));\n    },\n    when: p,\n    select: b,\n    any: O,\n    _: A,\n    string: x,\n    number: E,\n    bigint: K,\n    boolean: T,\n    symbol: P,\n    nullish: k,\n    nonNullable: B,\n    instanceOf: function(n) {\n        return l(p(function(n) {\n            return function(t) {\n                return t instanceof n;\n            };\n        }(n)));\n    },\n    shape: function(n) {\n        return l(p(s(n)));\n    }\n}, _ = {\n    matched: !1,\n    value: void 0\n}, M = /*#__PURE__*/ function() {\n    function n(n, t) {\n        this.input = void 0, this.state = void 0, this.input = n, this.state = t;\n    }\n    var t = n.prototype;\n    return t.with = function() {\n        var t = this, r = [].slice.call(arguments);\n        if (this.state.matched) return this;\n        var e = r[r.length - 1], i = [\n            r[0]\n        ], o = void 0;\n        3 === r.length && \"function\" == typeof r[1] ? o = r[1] : r.length > 2 && i.push.apply(i, r.slice(1, r.length - 1));\n        var a = !1, f = {}, s = function(n, t) {\n            a = !0, f[n] = t;\n        }, l = !i.some(function(n) {\n            return c(n, t.input, s);\n        }) || o && !Boolean(o(this.input)) ? _ : {\n            matched: !0,\n            value: e(a ? u in f ? f[u] : f : this.input, this.input)\n        };\n        return new n(this.input, l);\n    }, t.when = function(t, r) {\n        if (this.state.matched) return this;\n        var e = Boolean(t(this.input));\n        return new n(this.input, e ? {\n            matched: !0,\n            value: r(this.input, this.input)\n        } : _);\n    }, t.otherwise = function(n) {\n        return this.state.matched ? this.state.value : n(this.input);\n    }, t.exhaustive = function() {\n        if (this.state.matched) return this.state.value;\n        var n;\n        try {\n            n = JSON.stringify(this.input);\n        } catch (t) {\n            n = this.input;\n        }\n        throw new Error(\"Pattern matching error: no pattern matches value \" + n);\n    }, t.run = function() {\n        return this.exhaustive();\n    }, t.returnType = function() {\n        return this;\n    }, n;\n}();\nexports.P = I, exports.Pattern = I, exports.isMatching = s, exports.match = function(n) {\n    return new M(n, _);\n}; //# sourceMappingURL=index.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ts-pattern/dist/index.cjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/ts-pattern/dist/index.cjs":
/*!************************************************!*\
  !*** ./node_modules/ts-pattern/dist/index.cjs ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nfunction n(n, t) {\n    (null == t || t > n.length) && (t = n.length);\n    for(var r = 0, e = new Array(t); r < t; r++)e[r] = n[r];\n    return e;\n}\nfunction t(t, r) {\n    var e = \"undefined\" != typeof Symbol && t[Symbol.iterator] || t[\"@@iterator\"];\n    if (e) return (e = e.call(t)).next.bind(e);\n    if (Array.isArray(t) || (e = function(t, r) {\n        if (t) {\n            if (\"string\" == typeof t) return n(t, r);\n            var e = Object.prototype.toString.call(t).slice(8, -1);\n            return \"Object\" === e && t.constructor && (e = t.constructor.name), \"Map\" === e || \"Set\" === e ? Array.from(t) : \"Arguments\" === e || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e) ? n(t, r) : void 0;\n        }\n    }(t)) || r && t && \"number\" == typeof t.length) {\n        e && (t = e);\n        var u = 0;\n        return function() {\n            return u >= t.length ? {\n                done: !0\n            } : {\n                done: !1,\n                value: t[u++]\n            };\n        };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nvar r = Symbol.for(\"@ts-pattern/matcher\"), e = Symbol.for(\"@ts-pattern/isVariadic\"), u = \"@ts-pattern/anonymous-select-key\", i = function(n) {\n    return Boolean(n && \"object\" == typeof n);\n}, o = function(n) {\n    return n && !!n[r];\n}, c = function n(u, c, a) {\n    if (o(u)) {\n        var f = u[r]().match(c), s = f.matched, l = f.selections;\n        return s && l && Object.keys(l).forEach(function(n) {\n            return a(n, l[n]);\n        }), s;\n    }\n    if (i(u)) {\n        if (!i(c)) return !1;\n        if (Array.isArray(u)) {\n            if (!Array.isArray(c)) return !1;\n            for(var h, v = [], g = [], m = [], d = t(u.keys()); !(h = d()).done;){\n                var y = u[h.value];\n                o(y) && y[e] ? m.push(y) : m.length ? g.push(y) : v.push(y);\n            }\n            if (m.length) {\n                if (m.length > 1) throw new Error(\"Pattern error: Using `...P.array(...)` several times in a single pattern is not allowed.\");\n                if (c.length < v.length + g.length) return !1;\n                var p = c.slice(0, v.length), b = 0 === g.length ? [] : c.slice(-g.length), w = c.slice(v.length, 0 === g.length ? Infinity : -g.length);\n                return v.every(function(t, r) {\n                    return n(t, p[r], a);\n                }) && g.every(function(t, r) {\n                    return n(t, b[r], a);\n                }) && (0 === m.length || n(m[0], w, a));\n            }\n            return u.length === c.length && u.every(function(t, r) {\n                return n(t, c[r], a);\n            });\n        }\n        return Object.keys(u).every(function(t) {\n            var e, i = u[t];\n            return (t in c || o(e = i) && \"optional\" === e[r]().matcherType) && n(i, c[t], a);\n        });\n    }\n    return Object.is(c, u);\n}, a = function n(t) {\n    var e, u, c;\n    return i(t) ? o(t) ? null != (e = null == (u = (c = t[r]()).getSelectionKeys) ? void 0 : u.call(c)) ? e : [] : Array.isArray(t) ? f(t, n) : f(Object.values(t), n) : [];\n}, f = function(n, t) {\n    return n.reduce(function(n, r) {\n        return n.concat(t(r));\n    }, []);\n};\nfunction s() {\n    var n = [].slice.call(arguments);\n    if (1 === n.length) {\n        var t = n[0];\n        return function(n) {\n            return c(t, n, function() {});\n        };\n    }\n    if (2 === n.length) return c(n[0], n[1], function() {});\n    throw new Error(\"isMatching wasn't given the right number of arguments: expected 1 or 2, received \" + n.length + \".\");\n}\nfunction l(n) {\n    return Object.assign(n, {\n        optional: function() {\n            return v(n);\n        },\n        and: function(t) {\n            return d(n, t);\n        },\n        or: function(t) {\n            return y(n, t);\n        },\n        select: function(t) {\n            return void 0 === t ? b(n) : b(t, n);\n        }\n    });\n}\nfunction h(n) {\n    return Object.assign(function(n) {\n        var t;\n        return Object.assign(n, ((t = {})[Symbol.iterator] = function() {\n            var t, r = 0, u = [\n                {\n                    value: Object.assign(n, ((t = {})[e] = !0, t)),\n                    done: !1\n                },\n                {\n                    done: !0,\n                    value: void 0\n                }\n            ];\n            return {\n                next: function() {\n                    var n;\n                    return null != (n = u[r++]) ? n : u.at(-1);\n                }\n            };\n        }, t));\n    }(n), {\n        optional: function() {\n            return h(v(n));\n        },\n        select: function(t) {\n            return h(void 0 === t ? b(n) : b(t, n));\n        }\n    });\n}\nfunction v(n) {\n    var t;\n    return l(((t = {})[r] = function() {\n        return {\n            match: function(t) {\n                var r = {}, e = function(n, t) {\n                    r[n] = t;\n                };\n                return void 0 === t ? (a(n).forEach(function(n) {\n                    return e(n, void 0);\n                }), {\n                    matched: !0,\n                    selections: r\n                }) : {\n                    matched: c(n, t, e),\n                    selections: r\n                };\n            },\n            getSelectionKeys: function() {\n                return a(n);\n            },\n            matcherType: \"optional\"\n        };\n    }, t));\n}\nvar g = function(n, r) {\n    for(var e, u = t(n); !(e = u()).done;)if (!r(e.value)) return !1;\n    return !0;\n}, m = function(n, r) {\n    for(var e, u = t(n.entries()); !(e = u()).done;){\n        var i = e.value;\n        if (!r(i[1], i[0])) return !1;\n    }\n    return !0;\n};\nfunction d() {\n    var n, t = [].slice.call(arguments);\n    return l(((n = {})[r] = function() {\n        return {\n            match: function(n) {\n                var r = {}, e = function(n, t) {\n                    r[n] = t;\n                };\n                return {\n                    matched: t.every(function(t) {\n                        return c(t, n, e);\n                    }),\n                    selections: r\n                };\n            },\n            getSelectionKeys: function() {\n                return f(t, a);\n            },\n            matcherType: \"and\"\n        };\n    }, n));\n}\nfunction y() {\n    var n, t = [].slice.call(arguments);\n    return l(((n = {})[r] = function() {\n        return {\n            match: function(n) {\n                var r = {}, e = function(n, t) {\n                    r[n] = t;\n                };\n                return f(t, a).forEach(function(n) {\n                    return e(n, void 0);\n                }), {\n                    matched: t.some(function(t) {\n                        return c(t, n, e);\n                    }),\n                    selections: r\n                };\n            },\n            getSelectionKeys: function() {\n                return f(t, a);\n            },\n            matcherType: \"or\"\n        };\n    }, n));\n}\nfunction p(n) {\n    var t;\n    return (t = {})[r] = function() {\n        return {\n            match: function(t) {\n                return {\n                    matched: Boolean(n(t))\n                };\n            }\n        };\n    }, t;\n}\nfunction b() {\n    var n, t = [].slice.call(arguments), e = \"string\" == typeof t[0] ? t[0] : void 0, i = 2 === t.length ? t[1] : \"string\" == typeof t[0] ? void 0 : t[0];\n    return l(((n = {})[r] = function() {\n        return {\n            match: function(n) {\n                var t, r = ((t = {})[null != e ? e : u] = n, t);\n                return {\n                    matched: void 0 === i || c(i, n, function(n, t) {\n                        r[n] = t;\n                    }),\n                    selections: r\n                };\n            },\n            getSelectionKeys: function() {\n                return [\n                    null != e ? e : u\n                ].concat(void 0 === i ? [] : a(i));\n            }\n        };\n    }, n));\n}\nfunction w(n) {\n    return \"number\" == typeof n;\n}\nfunction S(n) {\n    return \"string\" == typeof n;\n}\nfunction j(n) {\n    return \"bigint\" == typeof n;\n}\nvar O = l(p(function(n) {\n    return !0;\n})), A = O, x = function n(t) {\n    return Object.assign(l(t), {\n        startsWith: function(r) {\n            return n(d(t, (e = r, p(function(n) {\n                return S(n) && n.startsWith(e);\n            }))));\n            var e;\n        },\n        endsWith: function(r) {\n            return n(d(t, (e = r, p(function(n) {\n                return S(n) && n.endsWith(e);\n            }))));\n            var e;\n        },\n        minLength: function(r) {\n            return n(d(t, function(n) {\n                return p(function(t) {\n                    return S(t) && t.length >= n;\n                });\n            }(r)));\n        },\n        maxLength: function(r) {\n            return n(d(t, function(n) {\n                return p(function(t) {\n                    return S(t) && t.length <= n;\n                });\n            }(r)));\n        },\n        includes: function(r) {\n            return n(d(t, (e = r, p(function(n) {\n                return S(n) && n.includes(e);\n            }))));\n            var e;\n        },\n        regex: function(r) {\n            return n(d(t, (e = r, p(function(n) {\n                return S(n) && Boolean(n.match(e));\n            }))));\n            var e;\n        }\n    });\n}(p(S)), E = function n(t) {\n    return Object.assign(l(t), {\n        between: function(r, e) {\n            return n(d(t, function(n, t) {\n                return p(function(r) {\n                    return w(r) && n <= r && t >= r;\n                });\n            }(r, e)));\n        },\n        lt: function(r) {\n            return n(d(t, function(n) {\n                return p(function(t) {\n                    return w(t) && t < n;\n                });\n            }(r)));\n        },\n        gt: function(r) {\n            return n(d(t, function(n) {\n                return p(function(t) {\n                    return w(t) && t > n;\n                });\n            }(r)));\n        },\n        lte: function(r) {\n            return n(d(t, function(n) {\n                return p(function(t) {\n                    return w(t) && t <= n;\n                });\n            }(r)));\n        },\n        gte: function(r) {\n            return n(d(t, function(n) {\n                return p(function(t) {\n                    return w(t) && t >= n;\n                });\n            }(r)));\n        },\n        int: function() {\n            return n(d(t, p(function(n) {\n                return w(n) && Number.isInteger(n);\n            })));\n        },\n        finite: function() {\n            return n(d(t, p(function(n) {\n                return w(n) && Number.isFinite(n);\n            })));\n        },\n        positive: function() {\n            return n(d(t, p(function(n) {\n                return w(n) && n > 0;\n            })));\n        },\n        negative: function() {\n            return n(d(t, p(function(n) {\n                return w(n) && n < 0;\n            })));\n        }\n    });\n}(p(w)), K = function n(t) {\n    return Object.assign(l(t), {\n        between: function(r, e) {\n            return n(d(t, function(n, t) {\n                return p(function(r) {\n                    return j(r) && n <= r && t >= r;\n                });\n            }(r, e)));\n        },\n        lt: function(r) {\n            return n(d(t, function(n) {\n                return p(function(t) {\n                    return j(t) && t < n;\n                });\n            }(r)));\n        },\n        gt: function(r) {\n            return n(d(t, function(n) {\n                return p(function(t) {\n                    return j(t) && t > n;\n                });\n            }(r)));\n        },\n        lte: function(r) {\n            return n(d(t, function(n) {\n                return p(function(t) {\n                    return j(t) && t <= n;\n                });\n            }(r)));\n        },\n        gte: function(r) {\n            return n(d(t, function(n) {\n                return p(function(t) {\n                    return j(t) && t >= n;\n                });\n            }(r)));\n        },\n        positive: function() {\n            return n(d(t, p(function(n) {\n                return j(n) && n > 0;\n            })));\n        },\n        negative: function() {\n            return n(d(t, p(function(n) {\n                return j(n) && n < 0;\n            })));\n        }\n    });\n}(p(j)), T = l(p(function(n) {\n    return \"boolean\" == typeof n;\n})), P = l(p(function(n) {\n    return \"symbol\" == typeof n;\n})), k = l(p(function(n) {\n    return null == n;\n})), B = l(p(function(n) {\n    return null != n;\n})), I = {\n    __proto__: null,\n    matcher: r,\n    optional: v,\n    array: function() {\n        var n, t = [].slice.call(arguments);\n        return h(((n = {})[r] = function() {\n            return {\n                match: function(n) {\n                    if (!Array.isArray(n)) return {\n                        matched: !1\n                    };\n                    if (0 === t.length) return {\n                        matched: !0\n                    };\n                    var r = t[0], e = {};\n                    if (0 === n.length) return a(r).forEach(function(n) {\n                        e[n] = [];\n                    }), {\n                        matched: !0,\n                        selections: e\n                    };\n                    var u = function(n, t) {\n                        e[n] = (e[n] || []).concat([\n                            t\n                        ]);\n                    };\n                    return {\n                        matched: n.every(function(n) {\n                            return c(r, n, u);\n                        }),\n                        selections: e\n                    };\n                },\n                getSelectionKeys: function() {\n                    return 0 === t.length ? [] : a(t[0]);\n                }\n            };\n        }, n));\n    },\n    set: function() {\n        var n, t = [].slice.call(arguments);\n        return l(((n = {})[r] = function() {\n            return {\n                match: function(n) {\n                    if (!(n instanceof Set)) return {\n                        matched: !1\n                    };\n                    var r = {};\n                    if (0 === n.size) return {\n                        matched: !0,\n                        selections: r\n                    };\n                    if (0 === t.length) return {\n                        matched: !0\n                    };\n                    var e = function(n, t) {\n                        r[n] = (r[n] || []).concat([\n                            t\n                        ]);\n                    }, u = t[0];\n                    return {\n                        matched: g(n, function(n) {\n                            return c(u, n, e);\n                        }),\n                        selections: r\n                    };\n                },\n                getSelectionKeys: function() {\n                    return 0 === t.length ? [] : a(t[0]);\n                }\n            };\n        }, n));\n    },\n    map: function() {\n        var n, t = [].slice.call(arguments);\n        return l(((n = {})[r] = function() {\n            return {\n                match: function(n) {\n                    if (!(n instanceof Map)) return {\n                        matched: !1\n                    };\n                    var r = {};\n                    if (0 === n.size) return {\n                        matched: !0,\n                        selections: r\n                    };\n                    var e, u = function(n, t) {\n                        r[n] = (r[n] || []).concat([\n                            t\n                        ]);\n                    };\n                    if (0 === t.length) return {\n                        matched: !0\n                    };\n                    if (1 === t.length) throw new Error(\"`P.map` wasn't given enough arguments. Expected (key, value), received \" + (null == (e = t[0]) ? void 0 : e.toString()));\n                    var i = t[0], o = t[1];\n                    return {\n                        matched: m(n, function(n, t) {\n                            var r = c(i, t, u), e = c(o, n, u);\n                            return r && e;\n                        }),\n                        selections: r\n                    };\n                },\n                getSelectionKeys: function() {\n                    return 0 === t.length ? [] : [].concat(a(t[0]), a(t[1]));\n                }\n            };\n        }, n));\n    },\n    intersection: d,\n    union: y,\n    not: function(n) {\n        var t;\n        return l(((t = {})[r] = function() {\n            return {\n                match: function(t) {\n                    return {\n                        matched: !c(n, t, function() {})\n                    };\n                },\n                getSelectionKeys: function() {\n                    return [];\n                },\n                matcherType: \"not\"\n            };\n        }, t));\n    },\n    when: p,\n    select: b,\n    any: O,\n    _: A,\n    string: x,\n    number: E,\n    bigint: K,\n    boolean: T,\n    symbol: P,\n    nullish: k,\n    nonNullable: B,\n    instanceOf: function(n) {\n        return l(p(function(n) {\n            return function(t) {\n                return t instanceof n;\n            };\n        }(n)));\n    },\n    shape: function(n) {\n        return l(p(s(n)));\n    }\n}, _ = {\n    matched: !1,\n    value: void 0\n}, M = /*#__PURE__*/ function() {\n    function n(n, t) {\n        this.input = void 0, this.state = void 0, this.input = n, this.state = t;\n    }\n    var t = n.prototype;\n    return t.with = function() {\n        var t = this, r = [].slice.call(arguments);\n        if (this.state.matched) return this;\n        var e = r[r.length - 1], i = [\n            r[0]\n        ], o = void 0;\n        3 === r.length && \"function\" == typeof r[1] ? o = r[1] : r.length > 2 && i.push.apply(i, r.slice(1, r.length - 1));\n        var a = !1, f = {}, s = function(n, t) {\n            a = !0, f[n] = t;\n        }, l = !i.some(function(n) {\n            return c(n, t.input, s);\n        }) || o && !Boolean(o(this.input)) ? _ : {\n            matched: !0,\n            value: e(a ? u in f ? f[u] : f : this.input, this.input)\n        };\n        return new n(this.input, l);\n    }, t.when = function(t, r) {\n        if (this.state.matched) return this;\n        var e = Boolean(t(this.input));\n        return new n(this.input, e ? {\n            matched: !0,\n            value: r(this.input, this.input)\n        } : _);\n    }, t.otherwise = function(n) {\n        return this.state.matched ? this.state.value : n(this.input);\n    }, t.exhaustive = function() {\n        if (this.state.matched) return this.state.value;\n        var n;\n        try {\n            n = JSON.stringify(this.input);\n        } catch (t) {\n            n = this.input;\n        }\n        throw new Error(\"Pattern matching error: no pattern matches value \" + n);\n    }, t.run = function() {\n        return this.exhaustive();\n    }, t.returnType = function() {\n        return this;\n    }, n;\n}();\nexports.P = I, exports.Pattern = I, exports.isMatching = s, exports.match = function(n) {\n    return new M(n, _);\n}; //# sourceMappingURL=index.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ts-pattern/dist/index.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/ts-pattern/dist/index.js":
/*!***********************************************!*\
  !*** ./node_modules/ts-pattern/dist/index.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   P: () => (/* binding */ N),\n/* harmony export */   Pattern: () => (/* binding */ N),\n/* harmony export */   isMatching: () => (/* binding */ a),\n/* harmony export */   match: () => (/* binding */ $)\n/* harmony export */ });\nconst t = Symbol.for(\"@ts-pattern/matcher\"), e = Symbol.for(\"@ts-pattern/isVariadic\"), n = \"@ts-pattern/anonymous-select-key\", r = (t)=>Boolean(t && \"object\" == typeof t), i = (e)=>e && !!e[t], o = (n, s, c)=>{\n    if (i(n)) {\n        const e = n[t](), { matched: r, selections: i } = e.match(s);\n        return r && i && Object.keys(i).forEach((t)=>c(t, i[t])), r;\n    }\n    if (r(n)) {\n        if (!r(s)) return !1;\n        if (Array.isArray(n)) {\n            if (!Array.isArray(s)) return !1;\n            let t = [], r = [], a = [];\n            for (const o of n.keys()){\n                const s = n[o];\n                i(s) && s[e] ? a.push(s) : a.length ? r.push(s) : t.push(s);\n            }\n            if (a.length) {\n                if (a.length > 1) throw new Error(\"Pattern error: Using `...P.array(...)` several times in a single pattern is not allowed.\");\n                if (s.length < t.length + r.length) return !1;\n                const e = s.slice(0, t.length), n = 0 === r.length ? [] : s.slice(-r.length), i = s.slice(t.length, 0 === r.length ? Infinity : -r.length);\n                return t.every((t, n)=>o(t, e[n], c)) && r.every((t, e)=>o(t, n[e], c)) && (0 === a.length || o(a[0], i, c));\n            }\n            return n.length === s.length && n.every((t, e)=>o(t, s[e], c));\n        }\n        return Object.keys(n).every((e)=>{\n            const r = n[e];\n            return (e in s || i(a = r) && \"optional\" === a[t]().matcherType) && o(r, s[e], c);\n            var a;\n        });\n    }\n    return Object.is(s, n);\n}, s = (e)=>{\n    var n, o, a;\n    return r(e) ? i(e) ? null != (n = null == (o = (a = e[t]()).getSelectionKeys) ? void 0 : o.call(a)) ? n : [] : Array.isArray(e) ? c(e, s) : c(Object.values(e), s) : [];\n}, c = (t, e)=>t.reduce((t, n)=>t.concat(e(n)), []);\nfunction a(...t) {\n    if (1 === t.length) {\n        const [e] = t;\n        return (t)=>o(e, t, ()=>{});\n    }\n    if (2 === t.length) {\n        const [e, n] = t;\n        return o(e, n, ()=>{});\n    }\n    throw new Error(`isMatching wasn't given the right number of arguments: expected 1 or 2, received ${t.length}.`);\n}\nfunction u(t) {\n    return Object.assign(t, {\n        optional: ()=>l(t),\n        and: (e)=>m(t, e),\n        or: (e)=>d(t, e),\n        select: (e)=>void 0 === e ? p(t) : p(e, t)\n    });\n}\nfunction h(t) {\n    return Object.assign(((t)=>Object.assign(t, {\n            [Symbol.iterator] () {\n                let n = 0;\n                const r = [\n                    {\n                        value: Object.assign(t, {\n                            [e]: !0\n                        }),\n                        done: !1\n                    },\n                    {\n                        done: !0,\n                        value: void 0\n                    }\n                ];\n                return {\n                    next: ()=>{\n                        var t;\n                        return null != (t = r[n++]) ? t : r.at(-1);\n                    }\n                };\n            }\n        }))(t), {\n        optional: ()=>h(l(t)),\n        select: (e)=>h(void 0 === e ? p(t) : p(e, t))\n    });\n}\nfunction l(e) {\n    return u({\n        [t]: ()=>({\n                match: (t)=>{\n                    let n = {};\n                    const r = (t, e)=>{\n                        n[t] = e;\n                    };\n                    return void 0 === t ? (s(e).forEach((t)=>r(t, void 0)), {\n                        matched: !0,\n                        selections: n\n                    }) : {\n                        matched: o(e, t, r),\n                        selections: n\n                    };\n                },\n                getSelectionKeys: ()=>s(e),\n                matcherType: \"optional\"\n            })\n    });\n}\nconst f = (t, e)=>{\n    for (const n of t)if (!e(n)) return !1;\n    return !0;\n}, g = (t, e)=>{\n    for (const [n, r] of t.entries())if (!e(r, n)) return !1;\n    return !0;\n};\nfunction m(...e) {\n    return u({\n        [t]: ()=>({\n                match: (t)=>{\n                    let n = {};\n                    const r = (t, e)=>{\n                        n[t] = e;\n                    };\n                    return {\n                        matched: e.every((e)=>o(e, t, r)),\n                        selections: n\n                    };\n                },\n                getSelectionKeys: ()=>c(e, s),\n                matcherType: \"and\"\n            })\n    });\n}\nfunction d(...e) {\n    return u({\n        [t]: ()=>({\n                match: (t)=>{\n                    let n = {};\n                    const r = (t, e)=>{\n                        n[t] = e;\n                    };\n                    return c(e, s).forEach((t)=>r(t, void 0)), {\n                        matched: e.some((e)=>o(e, t, r)),\n                        selections: n\n                    };\n                },\n                getSelectionKeys: ()=>c(e, s),\n                matcherType: \"or\"\n            })\n    });\n}\nfunction y(e) {\n    return {\n        [t]: ()=>({\n                match: (t)=>({\n                        matched: Boolean(e(t))\n                    })\n            })\n    };\n}\nfunction p(...e) {\n    const r = \"string\" == typeof e[0] ? e[0] : void 0, i = 2 === e.length ? e[1] : \"string\" == typeof e[0] ? void 0 : e[0];\n    return u({\n        [t]: ()=>({\n                match: (t)=>{\n                    let e = {\n                        [null != r ? r : n]: t\n                    };\n                    return {\n                        matched: void 0 === i || o(i, t, (t, n)=>{\n                            e[t] = n;\n                        }),\n                        selections: e\n                    };\n                },\n                getSelectionKeys: ()=>[\n                        null != r ? r : n\n                    ].concat(void 0 === i ? [] : s(i))\n            })\n    });\n}\nfunction v(t) {\n    return \"number\" == typeof t;\n}\nfunction b(t) {\n    return \"string\" == typeof t;\n}\nfunction w(t) {\n    return \"bigint\" == typeof t;\n}\nconst S = u(y(function(t) {\n    return !0;\n})), O = S, j = (t)=>Object.assign(u(t), {\n        startsWith: (e)=>{\n            return j(m(t, (n = e, y((t)=>b(t) && t.startsWith(n)))));\n            var n;\n        },\n        endsWith: (e)=>{\n            return j(m(t, (n = e, y((t)=>b(t) && t.endsWith(n)))));\n            var n;\n        },\n        minLength: (e)=>j(m(t, ((t)=>y((e)=>b(e) && e.length >= t))(e))),\n        maxLength: (e)=>j(m(t, ((t)=>y((e)=>b(e) && e.length <= t))(e))),\n        includes: (e)=>{\n            return j(m(t, (n = e, y((t)=>b(t) && t.includes(n)))));\n            var n;\n        },\n        regex: (e)=>{\n            return j(m(t, (n = e, y((t)=>b(t) && Boolean(t.match(n))))));\n            var n;\n        }\n    }), E = j(y(b)), K = (t)=>Object.assign(u(t), {\n        between: (e, n)=>K(m(t, ((t, e)=>y((n)=>v(n) && t <= n && e >= n))(e, n))),\n        lt: (e)=>K(m(t, ((t)=>y((e)=>v(e) && e < t))(e))),\n        gt: (e)=>K(m(t, ((t)=>y((e)=>v(e) && e > t))(e))),\n        lte: (e)=>K(m(t, ((t)=>y((e)=>v(e) && e <= t))(e))),\n        gte: (e)=>K(m(t, ((t)=>y((e)=>v(e) && e >= t))(e))),\n        int: ()=>K(m(t, y((t)=>v(t) && Number.isInteger(t)))),\n        finite: ()=>K(m(t, y((t)=>v(t) && Number.isFinite(t)))),\n        positive: ()=>K(m(t, y((t)=>v(t) && t > 0))),\n        negative: ()=>K(m(t, y((t)=>v(t) && t < 0)))\n    }), x = K(y(v)), A = (t)=>Object.assign(u(t), {\n        between: (e, n)=>A(m(t, ((t, e)=>y((n)=>w(n) && t <= n && e >= n))(e, n))),\n        lt: (e)=>A(m(t, ((t)=>y((e)=>w(e) && e < t))(e))),\n        gt: (e)=>A(m(t, ((t)=>y((e)=>w(e) && e > t))(e))),\n        lte: (e)=>A(m(t, ((t)=>y((e)=>w(e) && e <= t))(e))),\n        gte: (e)=>A(m(t, ((t)=>y((e)=>w(e) && e >= t))(e))),\n        positive: ()=>A(m(t, y((t)=>w(t) && t > 0))),\n        negative: ()=>A(m(t, y((t)=>w(t) && t < 0)))\n    }), P = A(y(w)), T = u(y(function(t) {\n    return \"boolean\" == typeof t;\n})), k = u(y(function(t) {\n    return \"symbol\" == typeof t;\n})), B = u(y(function(t) {\n    return null == t;\n})), _ = u(y(function(t) {\n    return null != t;\n}));\nvar N = {\n    __proto__: null,\n    matcher: t,\n    optional: l,\n    array: function(...e) {\n        return h({\n            [t]: ()=>({\n                    match: (t)=>{\n                        if (!Array.isArray(t)) return {\n                            matched: !1\n                        };\n                        if (0 === e.length) return {\n                            matched: !0\n                        };\n                        const n = e[0];\n                        let r = {};\n                        if (0 === t.length) return s(n).forEach((t)=>{\n                            r[t] = [];\n                        }), {\n                            matched: !0,\n                            selections: r\n                        };\n                        const i = (t, e)=>{\n                            r[t] = (r[t] || []).concat([\n                                e\n                            ]);\n                        };\n                        return {\n                            matched: t.every((t)=>o(n, t, i)),\n                            selections: r\n                        };\n                    },\n                    getSelectionKeys: ()=>0 === e.length ? [] : s(e[0])\n                })\n        });\n    },\n    set: function(...e) {\n        return u({\n            [t]: ()=>({\n                    match: (t)=>{\n                        if (!(t instanceof Set)) return {\n                            matched: !1\n                        };\n                        let n = {};\n                        if (0 === t.size) return {\n                            matched: !0,\n                            selections: n\n                        };\n                        if (0 === e.length) return {\n                            matched: !0\n                        };\n                        const r = (t, e)=>{\n                            n[t] = (n[t] || []).concat([\n                                e\n                            ]);\n                        }, i = e[0];\n                        return {\n                            matched: f(t, (t)=>o(i, t, r)),\n                            selections: n\n                        };\n                    },\n                    getSelectionKeys: ()=>0 === e.length ? [] : s(e[0])\n                })\n        });\n    },\n    map: function(...e) {\n        return u({\n            [t]: ()=>({\n                    match: (t)=>{\n                        if (!(t instanceof Map)) return {\n                            matched: !1\n                        };\n                        let n = {};\n                        if (0 === t.size) return {\n                            matched: !0,\n                            selections: n\n                        };\n                        const r = (t, e)=>{\n                            n[t] = (n[t] || []).concat([\n                                e\n                            ]);\n                        };\n                        if (0 === e.length) return {\n                            matched: !0\n                        };\n                        var i;\n                        if (1 === e.length) throw new Error(`\\`P.map\\` wasn't given enough arguments. Expected (key, value), received ${null == (i = e[0]) ? void 0 : i.toString()}`);\n                        const [s, c] = e;\n                        return {\n                            matched: g(t, (t, e)=>{\n                                const n = o(s, e, r), i = o(c, t, r);\n                                return n && i;\n                            }),\n                            selections: n\n                        };\n                    },\n                    getSelectionKeys: ()=>0 === e.length ? [] : [\n                            ...s(e[0]),\n                            ...s(e[1])\n                        ]\n                })\n        });\n    },\n    intersection: m,\n    union: d,\n    not: function(e) {\n        return u({\n            [t]: ()=>({\n                    match: (t)=>({\n                            matched: !o(e, t, ()=>{})\n                        }),\n                    getSelectionKeys: ()=>[],\n                    matcherType: \"not\"\n                })\n        });\n    },\n    when: y,\n    select: p,\n    any: S,\n    _: O,\n    string: E,\n    number: x,\n    bigint: P,\n    boolean: T,\n    symbol: k,\n    nullish: B,\n    nonNullable: _,\n    instanceOf: function(t) {\n        return u(y(function(t) {\n            return (e)=>e instanceof t;\n        }(t)));\n    },\n    shape: function(t) {\n        return u(y(a(t)));\n    }\n};\nconst W = {\n    matched: !1,\n    value: void 0\n};\nfunction $(t) {\n    return new z(t, W);\n}\nclass z {\n    constructor(t, e){\n        this.input = void 0, this.state = void 0, this.input = t, this.state = e;\n    }\n    with(...t) {\n        if (this.state.matched) return this;\n        const e = t[t.length - 1], r = [\n            t[0]\n        ];\n        let i;\n        3 === t.length && \"function\" == typeof t[1] ? i = t[1] : t.length > 2 && r.push(...t.slice(1, t.length - 1));\n        let s = !1, c = {};\n        const a = (t, e)=>{\n            s = !0, c[t] = e;\n        }, u = !r.some((t)=>o(t, this.input, a)) || i && !Boolean(i(this.input)) ? W : {\n            matched: !0,\n            value: e(s ? n in c ? c[n] : c : this.input, this.input)\n        };\n        return new z(this.input, u);\n    }\n    when(t, e) {\n        if (this.state.matched) return this;\n        const n = Boolean(t(this.input));\n        return new z(this.input, n ? {\n            matched: !0,\n            value: e(this.input, this.input)\n        } : W);\n    }\n    otherwise(t) {\n        return this.state.matched ? this.state.value : t(this.input);\n    }\n    exhaustive() {\n        if (this.state.matched) return this.state.value;\n        let t;\n        try {\n            t = JSON.stringify(this.input);\n        } catch (e) {\n            t = this.input;\n        }\n        throw new Error(`Pattern matching error: no pattern matches value ${t}`);\n    }\n    run() {\n        return this.exhaustive();\n    }\n    returnType() {\n        return this;\n    }\n}\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ts-pattern/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ts-pattern/dist/index.js":
/*!***********************************************!*\
  !*** ./node_modules/ts-pattern/dist/index.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   P: () => (/* binding */ N),\n/* harmony export */   Pattern: () => (/* binding */ N),\n/* harmony export */   isMatching: () => (/* binding */ a),\n/* harmony export */   match: () => (/* binding */ $)\n/* harmony export */ });\nconst t = Symbol.for(\"@ts-pattern/matcher\"), e = Symbol.for(\"@ts-pattern/isVariadic\"), n = \"@ts-pattern/anonymous-select-key\", r = (t)=>Boolean(t && \"object\" == typeof t), i = (e)=>e && !!e[t], o = (n, s, c)=>{\n    if (i(n)) {\n        const e = n[t](), { matched: r, selections: i } = e.match(s);\n        return r && i && Object.keys(i).forEach((t)=>c(t, i[t])), r;\n    }\n    if (r(n)) {\n        if (!r(s)) return !1;\n        if (Array.isArray(n)) {\n            if (!Array.isArray(s)) return !1;\n            let t = [], r = [], a = [];\n            for (const o of n.keys()){\n                const s = n[o];\n                i(s) && s[e] ? a.push(s) : a.length ? r.push(s) : t.push(s);\n            }\n            if (a.length) {\n                if (a.length > 1) throw new Error(\"Pattern error: Using `...P.array(...)` several times in a single pattern is not allowed.\");\n                if (s.length < t.length + r.length) return !1;\n                const e = s.slice(0, t.length), n = 0 === r.length ? [] : s.slice(-r.length), i = s.slice(t.length, 0 === r.length ? Infinity : -r.length);\n                return t.every((t, n)=>o(t, e[n], c)) && r.every((t, e)=>o(t, n[e], c)) && (0 === a.length || o(a[0], i, c));\n            }\n            return n.length === s.length && n.every((t, e)=>o(t, s[e], c));\n        }\n        return Object.keys(n).every((e)=>{\n            const r = n[e];\n            return (e in s || i(a = r) && \"optional\" === a[t]().matcherType) && o(r, s[e], c);\n            var a;\n        });\n    }\n    return Object.is(s, n);\n}, s = (e)=>{\n    var n, o, a;\n    return r(e) ? i(e) ? null != (n = null == (o = (a = e[t]()).getSelectionKeys) ? void 0 : o.call(a)) ? n : [] : Array.isArray(e) ? c(e, s) : c(Object.values(e), s) : [];\n}, c = (t, e)=>t.reduce((t, n)=>t.concat(e(n)), []);\nfunction a(...t) {\n    if (1 === t.length) {\n        const [e] = t;\n        return (t)=>o(e, t, ()=>{});\n    }\n    if (2 === t.length) {\n        const [e, n] = t;\n        return o(e, n, ()=>{});\n    }\n    throw new Error(`isMatching wasn't given the right number of arguments: expected 1 or 2, received ${t.length}.`);\n}\nfunction u(t) {\n    return Object.assign(t, {\n        optional: ()=>l(t),\n        and: (e)=>m(t, e),\n        or: (e)=>d(t, e),\n        select: (e)=>void 0 === e ? p(t) : p(e, t)\n    });\n}\nfunction h(t) {\n    return Object.assign(((t)=>Object.assign(t, {\n            [Symbol.iterator] () {\n                let n = 0;\n                const r = [\n                    {\n                        value: Object.assign(t, {\n                            [e]: !0\n                        }),\n                        done: !1\n                    },\n                    {\n                        done: !0,\n                        value: void 0\n                    }\n                ];\n                return {\n                    next: ()=>{\n                        var t;\n                        return null != (t = r[n++]) ? t : r.at(-1);\n                    }\n                };\n            }\n        }))(t), {\n        optional: ()=>h(l(t)),\n        select: (e)=>h(void 0 === e ? p(t) : p(e, t))\n    });\n}\nfunction l(e) {\n    return u({\n        [t]: ()=>({\n                match: (t)=>{\n                    let n = {};\n                    const r = (t, e)=>{\n                        n[t] = e;\n                    };\n                    return void 0 === t ? (s(e).forEach((t)=>r(t, void 0)), {\n                        matched: !0,\n                        selections: n\n                    }) : {\n                        matched: o(e, t, r),\n                        selections: n\n                    };\n                },\n                getSelectionKeys: ()=>s(e),\n                matcherType: \"optional\"\n            })\n    });\n}\nconst f = (t, e)=>{\n    for (const n of t)if (!e(n)) return !1;\n    return !0;\n}, g = (t, e)=>{\n    for (const [n, r] of t.entries())if (!e(r, n)) return !1;\n    return !0;\n};\nfunction m(...e) {\n    return u({\n        [t]: ()=>({\n                match: (t)=>{\n                    let n = {};\n                    const r = (t, e)=>{\n                        n[t] = e;\n                    };\n                    return {\n                        matched: e.every((e)=>o(e, t, r)),\n                        selections: n\n                    };\n                },\n                getSelectionKeys: ()=>c(e, s),\n                matcherType: \"and\"\n            })\n    });\n}\nfunction d(...e) {\n    return u({\n        [t]: ()=>({\n                match: (t)=>{\n                    let n = {};\n                    const r = (t, e)=>{\n                        n[t] = e;\n                    };\n                    return c(e, s).forEach((t)=>r(t, void 0)), {\n                        matched: e.some((e)=>o(e, t, r)),\n                        selections: n\n                    };\n                },\n                getSelectionKeys: ()=>c(e, s),\n                matcherType: \"or\"\n            })\n    });\n}\nfunction y(e) {\n    return {\n        [t]: ()=>({\n                match: (t)=>({\n                        matched: Boolean(e(t))\n                    })\n            })\n    };\n}\nfunction p(...e) {\n    const r = \"string\" == typeof e[0] ? e[0] : void 0, i = 2 === e.length ? e[1] : \"string\" == typeof e[0] ? void 0 : e[0];\n    return u({\n        [t]: ()=>({\n                match: (t)=>{\n                    let e = {\n                        [null != r ? r : n]: t\n                    };\n                    return {\n                        matched: void 0 === i || o(i, t, (t, n)=>{\n                            e[t] = n;\n                        }),\n                        selections: e\n                    };\n                },\n                getSelectionKeys: ()=>[\n                        null != r ? r : n\n                    ].concat(void 0 === i ? [] : s(i))\n            })\n    });\n}\nfunction v(t) {\n    return \"number\" == typeof t;\n}\nfunction b(t) {\n    return \"string\" == typeof t;\n}\nfunction w(t) {\n    return \"bigint\" == typeof t;\n}\nconst S = u(y(function(t) {\n    return !0;\n})), O = S, j = (t)=>Object.assign(u(t), {\n        startsWith: (e)=>{\n            return j(m(t, (n = e, y((t)=>b(t) && t.startsWith(n)))));\n            var n;\n        },\n        endsWith: (e)=>{\n            return j(m(t, (n = e, y((t)=>b(t) && t.endsWith(n)))));\n            var n;\n        },\n        minLength: (e)=>j(m(t, ((t)=>y((e)=>b(e) && e.length >= t))(e))),\n        maxLength: (e)=>j(m(t, ((t)=>y((e)=>b(e) && e.length <= t))(e))),\n        includes: (e)=>{\n            return j(m(t, (n = e, y((t)=>b(t) && t.includes(n)))));\n            var n;\n        },\n        regex: (e)=>{\n            return j(m(t, (n = e, y((t)=>b(t) && Boolean(t.match(n))))));\n            var n;\n        }\n    }), E = j(y(b)), K = (t)=>Object.assign(u(t), {\n        between: (e, n)=>K(m(t, ((t, e)=>y((n)=>v(n) && t <= n && e >= n))(e, n))),\n        lt: (e)=>K(m(t, ((t)=>y((e)=>v(e) && e < t))(e))),\n        gt: (e)=>K(m(t, ((t)=>y((e)=>v(e) && e > t))(e))),\n        lte: (e)=>K(m(t, ((t)=>y((e)=>v(e) && e <= t))(e))),\n        gte: (e)=>K(m(t, ((t)=>y((e)=>v(e) && e >= t))(e))),\n        int: ()=>K(m(t, y((t)=>v(t) && Number.isInteger(t)))),\n        finite: ()=>K(m(t, y((t)=>v(t) && Number.isFinite(t)))),\n        positive: ()=>K(m(t, y((t)=>v(t) && t > 0))),\n        negative: ()=>K(m(t, y((t)=>v(t) && t < 0)))\n    }), x = K(y(v)), A = (t)=>Object.assign(u(t), {\n        between: (e, n)=>A(m(t, ((t, e)=>y((n)=>w(n) && t <= n && e >= n))(e, n))),\n        lt: (e)=>A(m(t, ((t)=>y((e)=>w(e) && e < t))(e))),\n        gt: (e)=>A(m(t, ((t)=>y((e)=>w(e) && e > t))(e))),\n        lte: (e)=>A(m(t, ((t)=>y((e)=>w(e) && e <= t))(e))),\n        gte: (e)=>A(m(t, ((t)=>y((e)=>w(e) && e >= t))(e))),\n        positive: ()=>A(m(t, y((t)=>w(t) && t > 0))),\n        negative: ()=>A(m(t, y((t)=>w(t) && t < 0)))\n    }), P = A(y(w)), T = u(y(function(t) {\n    return \"boolean\" == typeof t;\n})), k = u(y(function(t) {\n    return \"symbol\" == typeof t;\n})), B = u(y(function(t) {\n    return null == t;\n})), _ = u(y(function(t) {\n    return null != t;\n}));\nvar N = {\n    __proto__: null,\n    matcher: t,\n    optional: l,\n    array: function(...e) {\n        return h({\n            [t]: ()=>({\n                    match: (t)=>{\n                        if (!Array.isArray(t)) return {\n                            matched: !1\n                        };\n                        if (0 === e.length) return {\n                            matched: !0\n                        };\n                        const n = e[0];\n                        let r = {};\n                        if (0 === t.length) return s(n).forEach((t)=>{\n                            r[t] = [];\n                        }), {\n                            matched: !0,\n                            selections: r\n                        };\n                        const i = (t, e)=>{\n                            r[t] = (r[t] || []).concat([\n                                e\n                            ]);\n                        };\n                        return {\n                            matched: t.every((t)=>o(n, t, i)),\n                            selections: r\n                        };\n                    },\n                    getSelectionKeys: ()=>0 === e.length ? [] : s(e[0])\n                })\n        });\n    },\n    set: function(...e) {\n        return u({\n            [t]: ()=>({\n                    match: (t)=>{\n                        if (!(t instanceof Set)) return {\n                            matched: !1\n                        };\n                        let n = {};\n                        if (0 === t.size) return {\n                            matched: !0,\n                            selections: n\n                        };\n                        if (0 === e.length) return {\n                            matched: !0\n                        };\n                        const r = (t, e)=>{\n                            n[t] = (n[t] || []).concat([\n                                e\n                            ]);\n                        }, i = e[0];\n                        return {\n                            matched: f(t, (t)=>o(i, t, r)),\n                            selections: n\n                        };\n                    },\n                    getSelectionKeys: ()=>0 === e.length ? [] : s(e[0])\n                })\n        });\n    },\n    map: function(...e) {\n        return u({\n            [t]: ()=>({\n                    match: (t)=>{\n                        if (!(t instanceof Map)) return {\n                            matched: !1\n                        };\n                        let n = {};\n                        if (0 === t.size) return {\n                            matched: !0,\n                            selections: n\n                        };\n                        const r = (t, e)=>{\n                            n[t] = (n[t] || []).concat([\n                                e\n                            ]);\n                        };\n                        if (0 === e.length) return {\n                            matched: !0\n                        };\n                        var i;\n                        if (1 === e.length) throw new Error(`\\`P.map\\` wasn't given enough arguments. Expected (key, value), received ${null == (i = e[0]) ? void 0 : i.toString()}`);\n                        const [s, c] = e;\n                        return {\n                            matched: g(t, (t, e)=>{\n                                const n = o(s, e, r), i = o(c, t, r);\n                                return n && i;\n                            }),\n                            selections: n\n                        };\n                    },\n                    getSelectionKeys: ()=>0 === e.length ? [] : [\n                            ...s(e[0]),\n                            ...s(e[1])\n                        ]\n                })\n        });\n    },\n    intersection: m,\n    union: d,\n    not: function(e) {\n        return u({\n            [t]: ()=>({\n                    match: (t)=>({\n                            matched: !o(e, t, ()=>{})\n                        }),\n                    getSelectionKeys: ()=>[],\n                    matcherType: \"not\"\n                })\n        });\n    },\n    when: y,\n    select: p,\n    any: S,\n    _: O,\n    string: E,\n    number: x,\n    bigint: P,\n    boolean: T,\n    symbol: k,\n    nullish: B,\n    nonNullable: _,\n    instanceOf: function(t) {\n        return u(y(function(t) {\n            return (e)=>e instanceof t;\n        }(t)));\n    },\n    shape: function(t) {\n        return u(y(a(t)));\n    }\n};\nconst W = {\n    matched: !1,\n    value: void 0\n};\nfunction $(t) {\n    return new z(t, W);\n}\nclass z {\n    constructor(t, e){\n        this.input = void 0, this.state = void 0, this.input = t, this.state = e;\n    }\n    with(...t) {\n        if (this.state.matched) return this;\n        const e = t[t.length - 1], r = [\n            t[0]\n        ];\n        let i;\n        3 === t.length && \"function\" == typeof t[1] ? i = t[1] : t.length > 2 && r.push(...t.slice(1, t.length - 1));\n        let s = !1, c = {};\n        const a = (t, e)=>{\n            s = !0, c[t] = e;\n        }, u = !r.some((t)=>o(t, this.input, a)) || i && !Boolean(i(this.input)) ? W : {\n            matched: !0,\n            value: e(s ? n in c ? c[n] : c : this.input, this.input)\n        };\n        return new z(this.input, u);\n    }\n    when(t, e) {\n        if (this.state.matched) return this;\n        const n = Boolean(t(this.input));\n        return new z(this.input, n ? {\n            matched: !0,\n            value: e(this.input, this.input)\n        } : W);\n    }\n    otherwise(t) {\n        return this.state.matched ? this.state.value : t(this.input);\n    }\n    exhaustive() {\n        if (this.state.matched) return this.state.value;\n        let t;\n        try {\n            t = JSON.stringify(this.input);\n        } catch (e) {\n            t = this.input;\n        }\n        throw new Error(`Pattern matching error: no pattern matches value ${t}`);\n    }\n    run() {\n        return this.exhaustive();\n    }\n    returnType() {\n        return this;\n    }\n}\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ts-pattern/dist/index.js\n");

/***/ })

};
;