"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@popmotion";
exports.ids = ["vendor-chunks/@popmotion"];
exports.modules = {

/***/ "(ssr)/./node_modules/@popmotion/easing/dist/easing.es.js":
/*!**********************************************************!*\
  !*** ./node_modules/@popmotion/easing/dist/easing.es.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   anticipate: () => (/* binding */ anticipate),\n/* harmony export */   backIn: () => (/* binding */ backIn),\n/* harmony export */   backInOut: () => (/* binding */ backInOut),\n/* harmony export */   backOut: () => (/* binding */ backOut),\n/* harmony export */   bounceIn: () => (/* binding */ bounceIn),\n/* harmony export */   bounceInOut: () => (/* binding */ bounceInOut),\n/* harmony export */   bounceOut: () => (/* binding */ bounceOut),\n/* harmony export */   circIn: () => (/* binding */ circIn),\n/* harmony export */   circInOut: () => (/* binding */ circInOut),\n/* harmony export */   circOut: () => (/* binding */ circOut),\n/* harmony export */   createAnticipateEasing: () => (/* binding */ createAnticipateEasing),\n/* harmony export */   createBackIn: () => (/* binding */ createBackIn),\n/* harmony export */   createExpoIn: () => (/* binding */ createExpoIn),\n/* harmony export */   createMirroredEasing: () => (/* binding */ createMirroredEasing),\n/* harmony export */   createReversedEasing: () => (/* binding */ createReversedEasing),\n/* harmony export */   cubicBezier: () => (/* binding */ cubicBezier),\n/* harmony export */   easeIn: () => (/* binding */ easeIn),\n/* harmony export */   easeInOut: () => (/* binding */ easeInOut),\n/* harmony export */   easeOut: () => (/* binding */ easeOut),\n/* harmony export */   linear: () => (/* binding */ linear),\n/* harmony export */   mirrored: () => (/* binding */ mirrored),\n/* harmony export */   reversed: () => (/* binding */ reversed)\n/* harmony export */ });\nvar DEFAULT_OVERSHOOT_STRENGTH = 1.525;\nvar reversed = function(easing) {\n    return function(p) {\n        return 1 - easing(1 - p);\n    };\n};\nvar mirrored = function(easing) {\n    return function(p) {\n        return p <= 0.5 ? easing(2 * p) / 2 : (2 - easing(2 * (1 - p))) / 2;\n    };\n};\nvar createReversedEasing = reversed;\nvar createMirroredEasing = mirrored;\nvar createExpoIn = function(power) {\n    return function(p) {\n        return Math.pow(p, power);\n    };\n};\nvar createBackIn = function(power) {\n    return function(p) {\n        return p * p * ((power + 1) * p - power);\n    };\n};\nvar createAnticipateEasing = function(power) {\n    var backEasing = createBackIn(power);\n    return function(p) {\n        return (p *= 2) < 1 ? 0.5 * backEasing(p) : 0.5 * (2 - Math.pow(2, -10 * (p - 1)));\n    };\n};\nvar linear = function(p) {\n    return p;\n};\nvar easeIn = /*#__PURE__*/ createExpoIn(2);\nvar easeOut = /*#__PURE__*/ reversed(easeIn);\nvar easeInOut = /*#__PURE__*/ mirrored(easeIn);\nvar circIn = function(p) {\n    return 1 - Math.sin(Math.acos(p));\n};\nvar circOut = /*#__PURE__*/ reversed(circIn);\nvar circInOut = /*#__PURE__*/ mirrored(circOut);\nvar backIn = /*#__PURE__*/ createBackIn(DEFAULT_OVERSHOOT_STRENGTH);\nvar backOut = /*#__PURE__*/ reversed(backIn);\nvar backInOut = /*#__PURE__*/ mirrored(backIn);\nvar anticipate = /*#__PURE__*/ createAnticipateEasing(DEFAULT_OVERSHOOT_STRENGTH);\nvar BOUNCE_FIRST_THRESHOLD = 4.0 / 11.0;\nvar BOUNCE_SECOND_THRESHOLD = 8.0 / 11.0;\nvar BOUNCE_THIRD_THRESHOLD = 9.0 / 10.0;\nvar ca = 4356.0 / 361.0;\nvar cb = 35442.0 / 1805.0;\nvar cc = 16061.0 / 1805.0;\nvar bounceOut = function(p) {\n    var p2 = p * p;\n    return p < BOUNCE_FIRST_THRESHOLD ? 7.5625 * p2 : p < BOUNCE_SECOND_THRESHOLD ? 9.075 * p2 - 9.9 * p + 3.4 : p < BOUNCE_THIRD_THRESHOLD ? ca * p2 - cb * p + cc : 10.8 * p * p - 20.52 * p + 10.72;\n};\nvar bounceIn = function(p) {\n    return 1.0 - bounceOut(1.0 - p);\n};\nvar bounceInOut = function(p) {\n    return p < 0.5 ? 0.5 * (1.0 - bounceOut(1.0 - p * 2.0)) : 0.5 * bounceOut(p * 2.0 - 1.0) + 0.5;\n};\nvar NEWTON_ITERATIONS = 8;\nvar NEWTON_MIN_SLOPE = 0.001;\nvar SUBDIVISION_PRECISION = 0.0000001;\nvar SUBDIVISION_MAX_ITERATIONS = 10;\nvar K_SPLINE_TABLE_SIZE = 11;\nvar K_SAMPLE_STEP_SIZE = 1.0 / (K_SPLINE_TABLE_SIZE - 1.0);\nvar FLOAT_32_SUPPORTED = typeof Float32Array !== \"undefined\";\nvar a = function(a1, a2) {\n    return 1.0 - 3.0 * a2 + 3.0 * a1;\n};\nvar b = function(a1, a2) {\n    return 3.0 * a2 - 6.0 * a1;\n};\nvar c = function(a1) {\n    return 3.0 * a1;\n};\nvar getSlope = function(t, a1, a2) {\n    return 3.0 * a(a1, a2) * t * t + 2.0 * b(a1, a2) * t + c(a1);\n};\nvar calcBezier = function(t, a1, a2) {\n    return ((a(a1, a2) * t + b(a1, a2)) * t + c(a1)) * t;\n};\nfunction cubicBezier(mX1, mY1, mX2, mY2) {\n    var sampleValues = FLOAT_32_SUPPORTED ? new Float32Array(K_SPLINE_TABLE_SIZE) : new Array(K_SPLINE_TABLE_SIZE);\n    var binarySubdivide = function(aX, aA, aB) {\n        var i = 0;\n        var currentX;\n        var currentT;\n        do {\n            currentT = aA + (aB - aA) / 2.0;\n            currentX = calcBezier(currentT, mX1, mX2) - aX;\n            if (currentX > 0.0) {\n                aB = currentT;\n            } else {\n                aA = currentT;\n            }\n        }while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);\n        return currentT;\n    };\n    var newtonRaphsonIterate = function(aX, aGuessT) {\n        var i = 0;\n        var currentSlope = 0;\n        var currentX;\n        for(; i < NEWTON_ITERATIONS; ++i){\n            currentSlope = getSlope(aGuessT, mX1, mX2);\n            if (currentSlope === 0.0) {\n                return aGuessT;\n            }\n            currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n            aGuessT -= currentX / currentSlope;\n        }\n        return aGuessT;\n    };\n    var calcSampleValues = function() {\n        for(var i = 0; i < K_SPLINE_TABLE_SIZE; ++i){\n            sampleValues[i] = calcBezier(i * K_SAMPLE_STEP_SIZE, mX1, mX2);\n        }\n    };\n    var getTForX = function(aX) {\n        var intervalStart = 0.0;\n        var currentSample = 1;\n        var lastSample = K_SPLINE_TABLE_SIZE - 1;\n        var dist = 0.0;\n        var guessForT = 0.0;\n        var initialSlope = 0.0;\n        for(; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample){\n            intervalStart += K_SAMPLE_STEP_SIZE;\n        }\n        --currentSample;\n        dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n        guessForT = intervalStart + dist * K_SAMPLE_STEP_SIZE;\n        initialSlope = getSlope(guessForT, mX1, mX2);\n        if (initialSlope >= NEWTON_MIN_SLOPE) {\n            return newtonRaphsonIterate(aX, guessForT);\n        } else if (initialSlope === 0.0) {\n            return guessForT;\n        } else {\n            return binarySubdivide(aX, intervalStart, intervalStart + K_SAMPLE_STEP_SIZE);\n        }\n    };\n    calcSampleValues();\n    var resolver = function(aX) {\n        var returnValue;\n        if (mX1 === mY1 && mX2 === mY2) {\n            returnValue = aX;\n        } else if (aX === 0) {\n            returnValue = 0;\n        } else if (aX === 1) {\n            returnValue = 1;\n        } else {\n            returnValue = calcBezier(getTForX(aX), mY1, mY2);\n        }\n        return returnValue;\n    };\n    return resolver;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@popmotion/easing/dist/easing.es.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@popmotion/popcorn/dist/popcorn.es.js":
/*!************************************************************!*\
  !*** ./node_modules/@popmotion/popcorn/dist/popcorn.es.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   angle: () => (/* binding */ angle),\n/* harmony export */   anticipate: () => (/* reexport safe */ _popmotion_easing__WEBPACK_IMPORTED_MODULE_3__.anticipate),\n/* harmony export */   applyOffset: () => (/* binding */ applyOffset),\n/* harmony export */   backIn: () => (/* reexport safe */ _popmotion_easing__WEBPACK_IMPORTED_MODULE_3__.backIn),\n/* harmony export */   backInOut: () => (/* reexport safe */ _popmotion_easing__WEBPACK_IMPORTED_MODULE_3__.backInOut),\n/* harmony export */   backOut: () => (/* reexport safe */ _popmotion_easing__WEBPACK_IMPORTED_MODULE_3__.backOut),\n/* harmony export */   circIn: () => (/* reexport safe */ _popmotion_easing__WEBPACK_IMPORTED_MODULE_3__.circIn),\n/* harmony export */   circInOut: () => (/* reexport safe */ _popmotion_easing__WEBPACK_IMPORTED_MODULE_3__.circInOut),\n/* harmony export */   circOut: () => (/* reexport safe */ _popmotion_easing__WEBPACK_IMPORTED_MODULE_3__.circOut),\n/* harmony export */   clamp: () => (/* binding */ clamp$1),\n/* harmony export */   conditional: () => (/* binding */ conditional),\n/* harmony export */   createAnticipateEasing: () => (/* reexport safe */ _popmotion_easing__WEBPACK_IMPORTED_MODULE_3__.createAnticipateEasing),\n/* harmony export */   createBackIn: () => (/* reexport safe */ _popmotion_easing__WEBPACK_IMPORTED_MODULE_3__.createBackIn),\n/* harmony export */   createExpoIn: () => (/* reexport safe */ _popmotion_easing__WEBPACK_IMPORTED_MODULE_3__.createExpoIn),\n/* harmony export */   cubicBezier: () => (/* reexport safe */ _popmotion_easing__WEBPACK_IMPORTED_MODULE_3__.cubicBezier),\n/* harmony export */   degreesToRadians: () => (/* binding */ degreesToRadians),\n/* harmony export */   distance: () => (/* binding */ distance),\n/* harmony export */   easeIn: () => (/* reexport safe */ _popmotion_easing__WEBPACK_IMPORTED_MODULE_3__.easeIn),\n/* harmony export */   easeInOut: () => (/* reexport safe */ _popmotion_easing__WEBPACK_IMPORTED_MODULE_3__.easeInOut),\n/* harmony export */   easeOut: () => (/* reexport safe */ _popmotion_easing__WEBPACK_IMPORTED_MODULE_3__.easeOut),\n/* harmony export */   interpolate: () => (/* binding */ interpolate),\n/* harmony export */   isPoint: () => (/* binding */ isPoint),\n/* harmony export */   isPoint3D: () => (/* binding */ isPoint3D),\n/* harmony export */   linear: () => (/* reexport safe */ _popmotion_easing__WEBPACK_IMPORTED_MODULE_3__.linear),\n/* harmony export */   mirrored: () => (/* reexport safe */ _popmotion_easing__WEBPACK_IMPORTED_MODULE_3__.mirrored),\n/* harmony export */   mix: () => (/* binding */ mix),\n/* harmony export */   mixArray: () => (/* binding */ mixArray),\n/* harmony export */   mixColor: () => (/* binding */ mixColor),\n/* harmony export */   mixComplex: () => (/* binding */ mixComplex),\n/* harmony export */   mixObject: () => (/* binding */ mixObject),\n/* harmony export */   pipe: () => (/* binding */ pipe),\n/* harmony export */   pointFromVector: () => (/* binding */ pointFromVector),\n/* harmony export */   progress: () => (/* binding */ progress),\n/* harmony export */   radiansToDegrees: () => (/* binding */ radiansToDegrees),\n/* harmony export */   reversed: () => (/* reexport safe */ _popmotion_easing__WEBPACK_IMPORTED_MODULE_3__.reversed),\n/* harmony export */   smooth: () => (/* binding */ smooth),\n/* harmony export */   smoothFrame: () => (/* binding */ smoothFrame),\n/* harmony export */   snap: () => (/* binding */ snap),\n/* harmony export */   springForce: () => (/* binding */ springForce),\n/* harmony export */   springForceExpo: () => (/* binding */ springForceExpo),\n/* harmony export */   springForceLinear: () => (/* binding */ springForceLinear),\n/* harmony export */   steps: () => (/* binding */ steps),\n/* harmony export */   toDecimal: () => (/* binding */ toDecimal),\n/* harmony export */   velocityPerFrame: () => (/* binding */ velocityPerFrame),\n/* harmony export */   velocityPerSecond: () => (/* binding */ velocityPerSecond),\n/* harmony export */   wrap: () => (/* binding */ wrap$1)\n/* harmony export */ });\n/* harmony import */ var style_value_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! style-value-types */ \"(ssr)/./node_modules/style-value-types/dist/style-value-types.es.js\");\n/* harmony import */ var hey_listen__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! hey-listen */ \"(ssr)/./node_modules/hey-listen/dist/hey-listen.es.js\");\n/* harmony import */ var framesync__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! framesync */ \"(ssr)/./node_modules/framesync/dist/framesync.es.js\");\n/* harmony import */ var _popmotion_easing__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @popmotion/easing */ \"(ssr)/./node_modules/@popmotion/easing/dist/easing.es.js\");\n\n\n\n\n\nvar zeroPoint = {\n    x: 0,\n    y: 0,\n    z: 0\n};\nvar isNum = function(v) {\n    return typeof v === \"number\";\n};\nvar radiansToDegrees = function(radians) {\n    return radians * 180 / Math.PI;\n};\nvar angle = function(a, b) {\n    if (b === void 0) {\n        b = zeroPoint;\n    }\n    return radiansToDegrees(Math.atan2(b.y - a.y, b.x - a.x));\n};\nvar applyOffset = function(from, to) {\n    var hasReceivedFrom = true;\n    if (to === undefined) {\n        to = from;\n        hasReceivedFrom = false;\n    }\n    return function(v) {\n        if (hasReceivedFrom) {\n            return v - from + to;\n        } else {\n            from = v;\n            hasReceivedFrom = true;\n            return to;\n        }\n    };\n};\nvar curryRange = function(func) {\n    return function(min, max, v) {\n        return v !== undefined ? func(min, max, v) : function(cv) {\n            return func(min, max, cv);\n        };\n    };\n};\nvar clamp = function(min, max, v) {\n    return Math.min(Math.max(v, min), max);\n};\nvar clamp$1 = curryRange(clamp);\nvar conditional = function(check, apply) {\n    return function(v) {\n        return check(v) ? apply(v) : v;\n    };\n};\nvar degreesToRadians = function(degrees) {\n    return degrees * Math.PI / 180;\n};\nvar isPoint = function(point) {\n    return point.hasOwnProperty(\"x\") && point.hasOwnProperty(\"y\");\n};\nvar isPoint3D = function(point) {\n    return isPoint(point) && point.hasOwnProperty(\"z\");\n};\nvar distance1D = function(a, b) {\n    return Math.abs(a - b);\n};\nvar distance = function(a, b) {\n    if (b === void 0) {\n        b = zeroPoint;\n    }\n    if (isNum(a) && isNum(b)) {\n        return distance1D(a, b);\n    } else if (isPoint(a) && isPoint(b)) {\n        var xDelta = distance1D(a.x, b.x);\n        var yDelta = distance1D(a.y, b.y);\n        var zDelta = isPoint3D(a) && isPoint3D(b) ? distance1D(a.z, b.z) : 0;\n        return Math.sqrt(Math.pow(xDelta, 2) + Math.pow(yDelta, 2) + Math.pow(zDelta, 2));\n    }\n    return 0;\n};\nvar progress = function(from, to, value) {\n    var toFromDifference = to - from;\n    return toFromDifference === 0 ? 1 : (value - from) / toFromDifference;\n};\nvar mix = function(from, to, progress) {\n    return -progress * from + progress * to + from;\n};\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */ var __assign = function() {\n    __assign = Object.assign || function __assign(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar mixLinearColor = function(from, to, v) {\n    var fromExpo = from * from;\n    var toExpo = to * to;\n    return Math.sqrt(Math.max(0, v * (toExpo - fromExpo) + fromExpo));\n};\nvar colorTypes = [\n    style_value_types__WEBPACK_IMPORTED_MODULE_0__.hex,\n    style_value_types__WEBPACK_IMPORTED_MODULE_0__.rgba,\n    style_value_types__WEBPACK_IMPORTED_MODULE_0__.hsla\n];\nvar getColorType = function(v) {\n    return colorTypes.find(function(type) {\n        return type.test(v);\n    });\n};\nvar notAnimatable = function(color$$1) {\n    return \"'\" + color$$1 + \"' is not an animatable color. Use the equivalent color code instead.\";\n};\nvar mixColor = function(from, to) {\n    var fromColorType = getColorType(from);\n    var toColorType = getColorType(to);\n    (0,hey_listen__WEBPACK_IMPORTED_MODULE_1__.invariant)(!!fromColorType, notAnimatable(from));\n    (0,hey_listen__WEBPACK_IMPORTED_MODULE_1__.invariant)(!!toColorType, notAnimatable(to));\n    (0,hey_listen__WEBPACK_IMPORTED_MODULE_1__.invariant)(fromColorType.transform === toColorType.transform, \"Both colors must be hex/RGBA, OR both must be HSLA.\");\n    var fromColor = fromColorType.parse(from);\n    var toColor = toColorType.parse(to);\n    var blended = __assign({}, fromColor);\n    var mixFunc = fromColorType === style_value_types__WEBPACK_IMPORTED_MODULE_0__.hsla ? mix : mixLinearColor;\n    return function(v) {\n        for(var key in blended){\n            if (key !== \"alpha\") {\n                blended[key] = mixFunc(fromColor[key], toColor[key], v);\n            }\n        }\n        blended.alpha = mix(fromColor.alpha, toColor.alpha, v);\n        return fromColorType.transform(blended);\n    };\n};\nvar combineFunctions = function(a, b) {\n    return function(v) {\n        return b(a(v));\n    };\n};\nvar pipe = function() {\n    var transformers = [];\n    for(var _i = 0; _i < arguments.length; _i++){\n        transformers[_i] = arguments[_i];\n    }\n    return transformers.reduce(combineFunctions);\n};\nfunction getMixer(origin, target) {\n    if (isNum(origin)) {\n        return function(v) {\n            return mix(origin, target, v);\n        };\n    } else if (style_value_types__WEBPACK_IMPORTED_MODULE_0__.color.test(origin)) {\n        return mixColor(origin, target);\n    } else {\n        return mixComplex(origin, target);\n    }\n}\nvar mixArray = function(from, to) {\n    var output = from.slice();\n    var numValues = output.length;\n    var blendValue = from.map(function(fromThis, i) {\n        return getMixer(fromThis, to[i]);\n    });\n    return function(v) {\n        for(var i = 0; i < numValues; i++){\n            output[i] = blendValue[i](v);\n        }\n        return output;\n    };\n};\nvar mixObject = function(origin, target) {\n    var output = __assign({}, origin, target);\n    var blendValue = {};\n    for(var key in output){\n        if (origin[key] !== undefined && target[key] !== undefined) {\n            blendValue[key] = getMixer(origin[key], target[key]);\n        }\n    }\n    return function(v) {\n        for(var key in blendValue){\n            output[key] = blendValue[key](v);\n        }\n        return output;\n    };\n};\nfunction analyse(value) {\n    var parsed = style_value_types__WEBPACK_IMPORTED_MODULE_0__.complex.parse(value);\n    var numValues = parsed.length;\n    var numNumbers = 0;\n    var numRGB = 0;\n    var numHSL = 0;\n    for(var i = 0; i < numValues; i++){\n        if (numNumbers || typeof parsed[i] === \"number\") {\n            numNumbers++;\n        } else {\n            if (parsed[i].hue !== undefined) {\n                numHSL++;\n            } else {\n                numRGB++;\n            }\n        }\n    }\n    return {\n        parsed: parsed,\n        numNumbers: numNumbers,\n        numRGB: numRGB,\n        numHSL: numHSL\n    };\n}\nvar mixComplex = function(origin, target) {\n    var template = style_value_types__WEBPACK_IMPORTED_MODULE_0__.complex.createTransformer(target);\n    var originStats = analyse(origin);\n    var targetStats = analyse(target);\n    (0,hey_listen__WEBPACK_IMPORTED_MODULE_1__.invariant)(originStats.numHSL === targetStats.numHSL && originStats.numRGB === targetStats.numRGB && originStats.numNumbers >= targetStats.numNumbers, \"Complex values '\" + origin + \"' and '\" + target + \"' too different to mix. Ensure all colors are of the same type.\");\n    return pipe(mixArray(originStats.parsed, targetStats.parsed), template);\n};\nvar mixNumber = function(from, to) {\n    return function(p) {\n        return mix(from, to, p);\n    };\n};\nfunction detectMixerFactory(v) {\n    if (typeof v === \"number\") {\n        return mixNumber;\n    } else if (typeof v === \"string\") {\n        if (style_value_types__WEBPACK_IMPORTED_MODULE_0__.color.test(v)) {\n            return mixColor;\n        } else {\n            return mixComplex;\n        }\n    } else if (Array.isArray(v)) {\n        return mixArray;\n    } else if (typeof v === \"object\") {\n        return mixObject;\n    }\n}\nfunction createMixers(output, ease, customMixer) {\n    var mixers = [];\n    var mixerFactory = customMixer || detectMixerFactory(output[0]);\n    var numMixers = output.length - 1;\n    for(var i = 0; i < numMixers; i++){\n        var mixer = mixerFactory(output[i], output[i + 1]);\n        if (ease) {\n            var easingFunction = Array.isArray(ease) ? ease[i] : ease;\n            mixer = pipe(easingFunction, mixer);\n        }\n        mixers.push(mixer);\n    }\n    return mixers;\n}\nfunction fastInterpolate(_a, _b) {\n    var from = _a[0], to = _a[1];\n    var mixer = _b[0];\n    return function(v) {\n        return mixer(progress(from, to, v));\n    };\n}\nfunction slowInterpolate(input, mixers) {\n    var inputLength = input.length;\n    var lastInputIndex = inputLength - 1;\n    return function(v) {\n        var mixerIndex = 0;\n        var foundMixerIndex = false;\n        if (v <= input[0]) {\n            foundMixerIndex = true;\n        } else if (v >= input[lastInputIndex]) {\n            mixerIndex = lastInputIndex - 1;\n            foundMixerIndex = true;\n        }\n        if (!foundMixerIndex) {\n            var i = 1;\n            for(; i < inputLength; i++){\n                if (input[i] > v || i === lastInputIndex) {\n                    break;\n                }\n            }\n            mixerIndex = i - 1;\n        }\n        var progressInRange = progress(input[mixerIndex], input[mixerIndex + 1], v);\n        return mixers[mixerIndex](progressInRange);\n    };\n}\nfunction interpolate(input, output, _a) {\n    var _b = _a === void 0 ? {} : _a, _c = _b.clamp, clamp = _c === void 0 ? true : _c, ease = _b.ease, mixer = _b.mixer;\n    var inputLength = input.length;\n    (0,hey_listen__WEBPACK_IMPORTED_MODULE_1__.invariant)(inputLength === output.length, \"Both input and output ranges must be the same length\");\n    (0,hey_listen__WEBPACK_IMPORTED_MODULE_1__.invariant)(!ease || !Array.isArray(ease) || ease.length === inputLength - 1, \"Array of easing functions must be of length `input.length - 1`, as it applies to the transitions **between** the defined values.\");\n    if (input[0] > input[inputLength - 1]) {\n        input = [].concat(input);\n        output = [].concat(output);\n        input.reverse();\n        output.reverse();\n    }\n    var mixers = createMixers(output, ease, mixer);\n    var interpolator = inputLength === 2 ? fastInterpolate(input, mixers) : slowInterpolate(input, mixers);\n    return clamp ? pipe(clamp$1(input[0], input[inputLength - 1]), interpolator) : interpolator;\n}\nvar pointFromVector = function(origin, angle, distance) {\n    angle = degreesToRadians(angle);\n    return {\n        x: distance * Math.cos(angle) + origin.x,\n        y: distance * Math.sin(angle) + origin.y\n    };\n};\nvar toDecimal = function(num, precision) {\n    if (precision === void 0) {\n        precision = 2;\n    }\n    precision = Math.pow(10, precision);\n    return Math.round(num * precision) / precision;\n};\nvar smoothFrame = function(prevValue, nextValue, duration, smoothing) {\n    if (smoothing === void 0) {\n        smoothing = 0;\n    }\n    return toDecimal(prevValue + duration * (nextValue - prevValue) / Math.max(smoothing, duration));\n};\nvar smooth = function(strength) {\n    if (strength === void 0) {\n        strength = 50;\n    }\n    var previousValue = 0;\n    var lastUpdated = 0;\n    return function(v) {\n        var currentFramestamp = (0,framesync__WEBPACK_IMPORTED_MODULE_2__.getFrameData)().timestamp;\n        var timeDelta = currentFramestamp !== lastUpdated ? currentFramestamp - lastUpdated : 0;\n        var newValue = timeDelta ? smoothFrame(previousValue, v, timeDelta, strength) : previousValue;\n        lastUpdated = currentFramestamp;\n        previousValue = newValue;\n        return newValue;\n    };\n};\nvar snap = function(points) {\n    if (typeof points === \"number\") {\n        return function(v) {\n            return Math.round(v / points) * points;\n        };\n    } else {\n        var i_1 = 0;\n        var numPoints_1 = points.length;\n        return function(v) {\n            var lastDistance = Math.abs(points[0] - v);\n            for(i_1 = 1; i_1 < numPoints_1; i_1++){\n                var point = points[i_1];\n                var distance = Math.abs(point - v);\n                if (distance === 0) return point;\n                if (distance > lastDistance) return points[i_1 - 1];\n                if (i_1 === numPoints_1 - 1) return point;\n                lastDistance = distance;\n            }\n        };\n    }\n};\nvar identity = function(v) {\n    return v;\n};\nvar springForce = function(alterDisplacement) {\n    if (alterDisplacement === void 0) {\n        alterDisplacement = identity;\n    }\n    return curryRange(function(constant, origin, v) {\n        var displacement = origin - v;\n        var springModifiedDisplacement = -(0 - constant + 1) * (0 - alterDisplacement(Math.abs(displacement)));\n        return displacement <= 0 ? origin + springModifiedDisplacement : origin - springModifiedDisplacement;\n    });\n};\nvar springForceLinear = springForce();\nvar springForceExpo = springForce(Math.sqrt);\nvar velocityPerFrame = function(xps, frameDuration) {\n    return isNum(xps) ? xps / (1000 / frameDuration) : 0;\n};\nvar velocityPerSecond = function(velocity, frameDuration) {\n    return frameDuration ? velocity * (1000 / frameDuration) : 0;\n};\nvar wrap = function(min, max, v) {\n    var rangeSize = max - min;\n    return ((v - min) % rangeSize + rangeSize) % rangeSize + min;\n};\nvar wrap$1 = curryRange(wrap);\nvar clampProgress = clamp$1(0, 1);\nvar steps = function(steps, direction) {\n    if (direction === void 0) {\n        direction = \"end\";\n    }\n    return function(progress) {\n        progress = direction === \"end\" ? Math.min(progress, 0.999) : Math.max(progress, 0.001);\n        var expanded = progress * steps;\n        var rounded = direction === \"end\" ? Math.floor(expanded) : Math.ceil(expanded);\n        return clampProgress(rounded / steps);\n    };\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@popmotion/popcorn/dist/popcorn.es.js\n");

/***/ })

};
;