"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/through";
exports.ids = ["vendor-chunks/through"];
exports.modules = {

/***/ "(ssr)/./node_modules/through/index.js":
/*!***************************************!*\
  !*** ./node_modules/through/index.js ***!
  \***************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nvar Stream = __webpack_require__(/*! stream */ \"stream\");\n// through\n//\n// a stream that does nothing but re-emit the input.\n// useful for aggregating a series of changing but not ending streams into one stream)\nexports = module.exports = through;\nthrough.through = through;\n//create a readable writable stream.\nfunction through(write, end, opts) {\n    write = write || function(data) {\n        this.queue(data);\n    };\n    end = end || function() {\n        this.queue(null);\n    };\n    var ended = false, destroyed = false, buffer = [], _ended = false;\n    var stream = new Stream();\n    stream.readable = stream.writable = true;\n    stream.paused = false;\n    //  stream.autoPause   = !(opts && opts.autoPause   === false)\n    stream.autoDestroy = !(opts && opts.autoDestroy === false);\n    stream.write = function(data) {\n        write.call(this, data);\n        return !stream.paused;\n    };\n    function drain() {\n        while(buffer.length && !stream.paused){\n            var data = buffer.shift();\n            if (null === data) return stream.emit(\"end\");\n            else stream.emit(\"data\", data);\n        }\n    }\n    stream.queue = stream.push = function(data) {\n        //    console.error(ended)\n        if (_ended) return stream;\n        if (data === null) _ended = true;\n        buffer.push(data);\n        drain();\n        return stream;\n    };\n    //this will be registered as the first 'end' listener\n    //must call destroy next tick, to make sure we're after any\n    //stream piped from here.\n    //this is only a problem if end is not emitted synchronously.\n    //a nicer way to do this is to make sure this is the last listener for 'end'\n    stream.on(\"end\", function() {\n        stream.readable = false;\n        if (!stream.writable && stream.autoDestroy) process.nextTick(function() {\n            stream.destroy();\n        });\n    });\n    function _end() {\n        stream.writable = false;\n        end.call(stream);\n        if (!stream.readable && stream.autoDestroy) stream.destroy();\n    }\n    stream.end = function(data) {\n        if (ended) return;\n        ended = true;\n        if (arguments.length) stream.write(data);\n        _end() // will emit or queue\n        ;\n        return stream;\n    };\n    stream.destroy = function() {\n        if (destroyed) return;\n        destroyed = true;\n        ended = true;\n        buffer.length = 0;\n        stream.writable = stream.readable = false;\n        stream.emit(\"close\");\n        return stream;\n    };\n    stream.pause = function() {\n        if (stream.paused) return;\n        stream.paused = true;\n        return stream;\n    };\n    stream.resume = function() {\n        if (stream.paused) {\n            stream.paused = false;\n            stream.emit(\"resume\");\n        }\n        drain();\n        //may have become paused again,\n        //as drain emits 'data'.\n        if (!stream.paused) stream.emit(\"drain\");\n        return stream;\n    };\n    return stream;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QU0sRUFBRTtZQUNoQkgsT0FBT0csTUFBTSxHQUFHO1lBQ2hCSCxPQUFPUyxJQUFJLENBQUM7UUFDZDtRQUNBSDtRQUNBLCtCQUErQjtRQUMvQix3QkFBd0I7UUFDeEIsSUFBRyxDQUFDTixPQUFPRyxNQUFNLEVBQ2ZILE9BQU9TLElBQUksQ0FBQztRQUNkLE9BQU9UO0lBQ1Q7SUFDQSxPQUFPQTtBQUNUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmlnY29tbWVyY2UvLi9ub2RlX21vZHVsZXMvdGhyb3VnaC9pbmRleC5qcz9jNjU3Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBTdHJlYW0gPSByZXF1aXJlKCdzdHJlYW0nKVxuXG4vLyB0aHJvdWdoXG4vL1xuLy8gYSBzdHJlYW0gdGhhdCBkb2VzIG5vdGhpbmcgYnV0IHJlLWVtaXQgdGhlIGlucHV0LlxuLy8gdXNlZnVsIGZvciBhZ2dyZWdhdGluZyBhIHNlcmllcyBvZiBjaGFuZ2luZyBidXQgbm90IGVuZGluZyBzdHJlYW1zIGludG8gb25lIHN0cmVhbSlcblxuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gdGhyb3VnaFxudGhyb3VnaC50aHJvdWdoID0gdGhyb3VnaFxuXG4vL2NyZWF0ZSBhIHJlYWRhYmxlIHdyaXRhYmxlIHN0cmVhbS5cblxuZnVuY3Rpb24gdGhyb3VnaCAod3JpdGUsIGVuZCwgb3B0cykge1xuICB3cml0ZSA9IHdyaXRlIHx8IGZ1bmN0aW9uIChkYXRhKSB7IHRoaXMucXVldWUoZGF0YSkgfVxuICBlbmQgPSBlbmQgfHwgZnVuY3Rpb24gKCkgeyB0aGlzLnF1ZXVlKG51bGwpIH1cblxuICB2YXIgZW5kZWQgPSBmYWxzZSwgZGVzdHJveWVkID0gZmFsc2UsIGJ1ZmZlciA9IFtdLCBfZW5kZWQgPSBmYWxzZVxuICB2YXIgc3RyZWFtID0gbmV3IFN0cmVhbSgpXG4gIHN0cmVhbS5yZWFkYWJsZSA9IHN0cmVhbS53cml0YWJsZSA9IHRydWVcbiAgc3RyZWFtLnBhdXNlZCA9IGZhbHNlXG5cbi8vICBzdHJlYW0uYXV0b1BhdXNlICAgPSAhKG9wdHMgJiYgb3B0cy5hdXRvUGF1c2UgICA9PT0gZmFsc2UpXG4gIHN0cmVhbS5hdXRvRGVzdHJveSA9ICEob3B0cyAmJiBvcHRzLmF1dG9EZXN0cm95ID09PSBmYWxzZSlcblxuICBzdHJlYW0ud3JpdGUgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHdyaXRlLmNhbGwodGhpcywgZGF0YSlcbiAgICByZXR1cm4gIXN0cmVhbS5wYXVzZWRcbiAgfVxuXG4gIGZ1bmN0aW9uIGRyYWluKCkge1xuICAgIHdoaWxlKGJ1ZmZlci5sZW5ndGggJiYgIXN0cmVhbS5wYXVzZWQpIHtcbiAgICAgIHZhciBkYXRhID0gYnVmZmVyLnNoaWZ0KClcbiAgICAgIGlmKG51bGwgPT09IGRhdGEpXG4gICAgICAgIHJldHVybiBzdHJlYW0uZW1pdCgnZW5kJylcbiAgICAgIGVsc2VcbiAgICAgICAgc3RyZWFtLmVtaXQoJ2RhdGEnLCBkYXRhKVxuICAgIH1cbiAgfVxuXG4gIHN0cmVhbS5xdWV1ZSA9IHN0cmVhbS5wdXNoID0gZnVuY3Rpb24gKGRhdGEpIHtcbi8vICAgIGNvbnNvbGUuZXJyb3IoZW5kZWQpXG4gICAgaWYoX2VuZGVkKSByZXR1cm4gc3RyZWFtXG4gICAgaWYoZGF0YSA9PT0gbnVsbCkgX2VuZGVkID0gdHJ1ZVxuICAgIGJ1ZmZlci5wdXNoKGRhdGEpXG4gICAgZHJhaW4oKVxuICAgIHJldHVybiBzdHJlYW1cbiAgfVxuXG4gIC8vdGhpcyB3aWxsIGJlIHJlZ2lzdGVyZWQgYXMgdGhlIGZpcnN0ICdlbmQnIGxpc3RlbmVyXG4gIC8vbXVzdCBjYWxsIGRlc3Ryb3kgbmV4dCB0aWNrLCB0byBtYWtlIHN1cmUgd2UncmUgYWZ0ZXIgYW55XG4gIC8vc3RyZWFtIHBpcGVkIGZyb20gaGVyZS5cbiAgLy90aGlzIGlzIG9ubHkgYSBwcm9ibGVtIGlmIGVuZCBpcyBub3QgZW1pdHRlZCBzeW5jaHJvbm91c2x5LlxuICAvL2EgbmljZXIgd2F5IHRvIGRvIHRoaXMgaXMgdG8gbWFrZSBzdXJlIHRoaXMgaXMgdGhlIGxhc3QgbGlzdGVuZXIgZm9yICdlbmQnXG5cbiAgc3RyZWFtLm9uKCdlbmQnLCBmdW5jdGlvbiAoKSB7XG4gICAgc3RyZWFtLnJlYWRhYmxlID0gZmFsc2VcbiAgICBpZighc3RyZWFtLndyaXRhYmxlICYmIHN0cmVhbS5hdXRvRGVzdHJveSlcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICBzdHJlYW0uZGVzdHJveSgpXG4gICAgICB9KVxuICB9KVxuXG4gIGZ1bmN0aW9uIF9lbmQgKCkge1xuICAgIHN0cmVhbS53cml0YWJsZSA9IGZhbHNlXG4gICAgZW5kLmNhbGwoc3RyZWFtKVxuICAgIGlmKCFzdHJlYW0ucmVhZGFibGUgJiYgc3RyZWFtLmF1dG9EZXN0cm95KVxuICAgICAgc3RyZWFtLmRlc3Ryb3koKVxuICB9XG5cbiAgc3RyZWFtLmVuZCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgaWYoZW5kZWQpIHJldHVyblxuICAgIGVuZGVkID0gdHJ1ZVxuICAgIGlmKGFyZ3VtZW50cy5sZW5ndGgpIHN0cmVhbS53cml0ZShkYXRhKVxuICAgIF9lbmQoKSAvLyB3aWxsIGVtaXQgb3IgcXVldWVcbiAgICByZXR1cm4gc3RyZWFtXG4gIH1cblxuICBzdHJlYW0uZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZihkZXN0cm95ZWQpIHJldHVyblxuICAgIGRlc3Ryb3llZCA9IHRydWVcbiAgICBlbmRlZCA9IHRydWVcbiAgICBidWZmZXIubGVuZ3RoID0gMFxuICAgIHN0cmVhbS53cml0YWJsZSA9IHN0cmVhbS5yZWFkYWJsZSA9IGZhbHNlXG4gICAgc3RyZWFtLmVtaXQoJ2Nsb3NlJylcbiAgICByZXR1cm4gc3RyZWFtXG4gIH1cblxuICBzdHJlYW0ucGF1c2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYoc3RyZWFtLnBhdXNlZCkgcmV0dXJuXG4gICAgc3RyZWFtLnBhdXNlZCA9IHRydWVcbiAgICByZXR1cm4gc3RyZWFtXG4gIH1cblxuICBzdHJlYW0ucmVzdW1lID0gZnVuY3Rpb24gKCkge1xuICAgIGlmKHN0cmVhbS5wYXVzZWQpIHtcbiAgICAgIHN0cmVhbS5wYXVzZWQgPSBmYWxzZVxuICAgICAgc3RyZWFtLmVtaXQoJ3Jlc3VtZScpXG4gICAgfVxuICAgIGRyYWluKClcbiAgICAvL21heSBoYXZlIGJlY29tZSBwYXVzZWQgYWdhaW4sXG4gICAgLy9hcyBkcmFpbiBlbWl0cyAnZGF0YScuXG4gICAgaWYoIXN0cmVhbS5wYXVzZWQpXG4gICAgICBzdHJlYW0uZW1pdCgnZHJhaW4nKVxuICAgIHJldHVybiBzdHJlYW1cbiAgfVxuICByZXR1cm4gc3RyZWFtXG59XG5cbiJdLCJuYW1lcyI6WyJTdHJlYW0iLCJyZXF1aXJlIiwiZXhwb3J0cyIsIm1vZHVsZSIsInRocm91Z2giLCJ3cml0ZSIsImVuZCIsIm9wdHMiLCJkYXRhIiwicXVldWUiLCJlbmRlZCIsImRlc3Ryb3llZCIsImJ1ZmZlciIsIl9lbmRlZCIsInN0cmVhbSIsInJlYWRhYmxlIiwid3JpdGFibGUiLCJwYXVzZWQiLCJhdXRvRGVzdHJveSIsImNhbGwiLCJkcmFpbiIsImxlbmd0aCIsInNoaWZ0IiwiZW1pdCIsInB1c2giLCJvbiIsInByb2Nlc3MiLCJuZXh0VGljayIsImRlc3Ryb3kiLCJfZW5kIiwiYXJndW1lbnRzIiwicGF1c2UiLCJyZXN1bWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/through/index.js\n");

/***/ })

};
;