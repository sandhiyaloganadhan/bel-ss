"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/focus-trap-react";
exports.ids = ["vendor-chunks/focus-trap-react"];
exports.modules = {

/***/ "(ssr)/./node_modules/focus-trap-react/dist/focus-trap-react.js":
/*!****************************************************************!*\
  !*** ./node_modules/focus-trap-react/dist/focus-trap-react.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nfunction _typeof(o) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(o) {\n        return typeof o;\n    } : function(o) {\n        return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n    }, _typeof(o);\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    Object.defineProperty(Constructor, \"prototype\", {\n        writable: false\n    });\n    return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    Object.defineProperty(subClass, \"prototype\", {\n        writable: false\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n    return function _createSuperInternal() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (hasNativeReflectConstruct) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    } else if (call !== void 0) {\n        throw new TypeError(\"Derived constructors may only return object or undefined\");\n    }\n    return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n    return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n    if (_typeof(input) !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n    if (prim !== undefined) {\n        var res = prim.call(input, hint || \"default\");\n        if (_typeof(res) !== \"object\") return res;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (hint === \"string\" ? String : Number)(input);\n}\nvar React = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar PropTypes = __webpack_require__(/*! prop-types */ \"(ssr)/./node_modules/prop-types/index.js\");\nvar _require = __webpack_require__(/*! focus-trap */ \"(ssr)/./node_modules/focus-trap/dist/focus-trap.esm.js\"), createFocusTrap = _require.createFocusTrap;\nvar _require2 = __webpack_require__(/*! tabbable */ \"(ssr)/./node_modules/tabbable/dist/index.esm.js\"), isFocusable = _require2.isFocusable;\nvar FocusTrap = /*#__PURE__*/ function(_React$Component) {\n    _inherits(FocusTrap, _React$Component);\n    var _super = _createSuper(FocusTrap);\n    function FocusTrap(props) {\n        var _this;\n        _classCallCheck(this, FocusTrap);\n        _this = _super.call(this, props);\n        /**\n     * Gets the node for the given option, which is expected to be an option that\n     *  can be either a DOM node, a string that is a selector to get a node, `false`\n     *  (if a node is explicitly NOT given), or a function that returns any of these\n     *  values.\n     * @param {string} optionName\n     * @returns {undefined | false | HTMLElement | SVGElement} Returns\n     *  `undefined` if the option is not specified; `false` if the option\n     *  resolved to `false` (node explicitly not given); otherwise, the resolved\n     *  DOM node.\n     * @throws {Error} If the option is set, not `false`, and is not, or does not\n     *  resolve to a node.\n     */ _defineProperty(_assertThisInitialized(_this), \"getNodeForOption\", function(optionName) {\n            var _this$internalOptions;\n            // use internal options first, falling back to original options\n            var optionValue = (_this$internalOptions = this.internalOptions[optionName]) !== null && _this$internalOptions !== void 0 ? _this$internalOptions : this.originalOptions[optionName];\n            if (typeof optionValue === \"function\") {\n                for(var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n                    params[_key - 1] = arguments[_key];\n                }\n                optionValue = optionValue.apply(void 0, params);\n            }\n            if (optionValue === true) {\n                optionValue = undefined; // use default value\n            }\n            if (!optionValue) {\n                if (optionValue === undefined || optionValue === false) {\n                    return optionValue;\n                }\n                // else, empty string (invalid), null (invalid), 0 (invalid)\n                throw new Error(\"`\".concat(optionName, \"` was specified but was not a node, or did not return a node\"));\n            }\n            var node = optionValue; // could be HTMLElement, SVGElement, or non-empty string at this point\n            if (typeof optionValue === \"string\") {\n                var _this$getDocument;\n                node = (_this$getDocument = this.getDocument()) === null || _this$getDocument === void 0 ? void 0 : _this$getDocument.querySelector(optionValue); // resolve to node, or null if fails\n                if (!node) {\n                    throw new Error(\"`\".concat(optionName, \"` as selector refers to no known node\"));\n                }\n            }\n            return node;\n        });\n        _this.handleDeactivate = _this.handleDeactivate.bind(_assertThisInitialized(_this));\n        _this.handlePostDeactivate = _this.handlePostDeactivate.bind(_assertThisInitialized(_this));\n        _this.handleClickOutsideDeactivates = _this.handleClickOutsideDeactivates.bind(_assertThisInitialized(_this));\n        // focus-trap options used internally when creating the trap\n        _this.internalOptions = {\n            // We need to hijack the returnFocusOnDeactivate option,\n            // because React can move focus into the element before we arrived at\n            // this lifecycle hook (e.g. with autoFocus inputs). So the component\n            // captures the previouslyFocusedElement in componentWillMount,\n            // then (optionally) returns focus to it in componentWillUnmount.\n            returnFocusOnDeactivate: false,\n            // the rest of these are also related to deactivation of the trap, and we\n            //  need to use them and control them as well\n            checkCanReturnFocus: null,\n            onDeactivate: _this.handleDeactivate,\n            onPostDeactivate: _this.handlePostDeactivate,\n            // we need to special-case this setting as well so that we can know if we should\n            //  NOT return focus if the trap gets auto-deactivated as the result of an\n            //  outside click (otherwise, we'll always think we should return focus because\n            //  of how we manage that flag internally here)\n            clickOutsideDeactivates: _this.handleClickOutsideDeactivates\n        };\n        // original options provided by the consumer\n        _this.originalOptions = {\n            // because of the above `internalOptions`, we maintain our own flag for\n            //  this option, and default it to `true` because that's focus-trap's default\n            returnFocusOnDeactivate: true,\n            // because of the above `internalOptions`, we keep these separate since\n            //  they're part of the deactivation process which we configure (internally) to\n            //  be shared between focus-trap and focus-trap-react\n            onDeactivate: null,\n            onPostDeactivate: null,\n            checkCanReturnFocus: null,\n            // the user's setting, defaulted to false since focus-trap defaults this to false\n            clickOutsideDeactivates: false\n        };\n        var focusTrapOptions = props.focusTrapOptions;\n        for(var optionName in focusTrapOptions){\n            if (!Object.prototype.hasOwnProperty.call(focusTrapOptions, optionName)) {\n                continue;\n            }\n            if (optionName === \"returnFocusOnDeactivate\" || optionName === \"onDeactivate\" || optionName === \"onPostDeactivate\" || optionName === \"checkCanReturnFocus\" || optionName === \"clickOutsideDeactivates\") {\n                _this.originalOptions[optionName] = focusTrapOptions[optionName];\n                continue; // exclude from internalOptions\n            }\n            _this.internalOptions[optionName] = focusTrapOptions[optionName];\n        }\n        // if set, `{ target: Node, allowDeactivation: boolean }` where `target` is the outside\n        //  node that was clicked, and `allowDeactivation` is the result of the consumer's\n        //  option (stored in `this.originalOptions.clickOutsideDeactivates`, which may be a\n        //  function) whether to allow or deny auto-deactivation on click on this outside node\n        _this.outsideClick = null;\n        // elements from which to create the focus trap on mount; if a child is used\n        //  instead of the `containerElements` prop, we'll get the child's related\n        //  element when the trap renders and then is declared 'mounted'\n        _this.focusTrapElements = props.containerElements || [];\n        // now we remember what the currently focused element is, not relying on focus-trap\n        _this.updatePreviousElement();\n        return _this;\n    }\n    /**\n   * Gets the configured document.\n   * @returns {Document|undefined} Configured document, falling back to the main\n   *  document, if it exists. During SSR, `undefined` is returned since the\n   *  document doesn't exist.\n   */ _createClass(FocusTrap, [\n        {\n            key: \"getDocument\",\n            value: function getDocument() {\n                // SSR: careful to check if `document` exists before accessing it as a variable\n                return this.props.focusTrapOptions.document || (typeof document !== \"undefined\" ? document : undefined);\n            }\n        },\n        {\n            key: \"getReturnFocusNode\",\n            value: function getReturnFocusNode() {\n                var node = this.getNodeForOption(\"setReturnFocus\", this.previouslyFocusedElement);\n                return node ? node : node === false ? false : this.previouslyFocusedElement;\n            }\n        },\n        {\n            key: \"updatePreviousElement\",\n            value: function updatePreviousElement() {\n                var currentDocument = this.getDocument();\n                if (currentDocument) {\n                    this.previouslyFocusedElement = currentDocument.activeElement;\n                }\n            }\n        },\n        {\n            key: \"deactivateTrap\",\n            value: function deactivateTrap() {\n                // NOTE: it's possible the focus trap has already been deactivated without our knowing it,\n                //  especially if the user set the `clickOutsideDeactivates: true` option on the trap,\n                //  and the mouse was clicked on some element outside the trap; at that point, focus-trap\n                //  will initiate its auto-deactivation process, which will call our own\n                //  handleDeactivate(), which will call into this method\n                if (!this.focusTrap || !this.focusTrap.active) {\n                    return;\n                }\n                this.focusTrap.deactivate({\n                    // NOTE: we never let the trap return the focus since we do that ourselves\n                    returnFocus: false,\n                    // we'll call this in our own post deactivate handler so make sure the trap doesn't\n                    //  do it prematurely\n                    checkCanReturnFocus: null,\n                    // let it call the user's original deactivate handler, if any, instead of\n                    //  our own which calls back into this function\n                    onDeactivate: this.originalOptions.onDeactivate\n                });\n            }\n        },\n        {\n            key: \"handleClickOutsideDeactivates\",\n            value: function handleClickOutsideDeactivates(event) {\n                // use consumer's option (or call their handler) as the permission or denial\n                var allowDeactivation = typeof this.originalOptions.clickOutsideDeactivates === \"function\" ? this.originalOptions.clickOutsideDeactivates.call(null, event) // call out of context\n                 : this.originalOptions.clickOutsideDeactivates; // boolean\n                if (allowDeactivation) {\n                    // capture the outside target that was clicked so we can use it in the deactivation\n                    //  process since the consumer allowed it to cause auto-deactivation\n                    this.outsideClick = {\n                        target: event.target,\n                        allowDeactivation: allowDeactivation\n                    };\n                }\n                return allowDeactivation;\n            }\n        },\n        {\n            key: \"handleDeactivate\",\n            value: function handleDeactivate() {\n                if (this.originalOptions.onDeactivate) {\n                    this.originalOptions.onDeactivate.call(null); // call user's handler out of context\n                }\n                this.deactivateTrap();\n            }\n        },\n        {\n            key: \"handlePostDeactivate\",\n            value: function handlePostDeactivate() {\n                var _this2 = this;\n                var finishDeactivation = function finishDeactivation() {\n                    var returnFocusNode = _this2.getReturnFocusNode();\n                    var canReturnFocus = !!// did the consumer allow it?\n                    (_this2.originalOptions.returnFocusOnDeactivate && // can we actually focus the node?\n                    returnFocusNode !== null && returnFocusNode !== void 0 && returnFocusNode.focus && // was there an outside click that allowed deactivation?\n                    (!_this2.outsideClick || // did the consumer allow deactivation when the outside node was clicked?\n                    _this2.outsideClick.allowDeactivation && // is the outside node NOT focusable (implying that it did NOT receive focus\n                    //  as a result of the click-through) -- in which case do NOT restore focus\n                    //  to `returnFocusNode` because focus should remain on the outside node\n                    !isFocusable(_this2.outsideClick.target, _this2.internalOptions.tabbableOptions)));\n                    var _this2$internalOption = _this2.internalOptions.preventScroll, preventScroll = _this2$internalOption === void 0 ? false : _this2$internalOption;\n                    if (canReturnFocus) {\n                        // return focus to the element that had focus when the trap was activated\n                        returnFocusNode.focus({\n                            preventScroll: preventScroll\n                        });\n                    }\n                    if (_this2.originalOptions.onPostDeactivate) {\n                        _this2.originalOptions.onPostDeactivate.call(null); // don't call it in context of \"this\"\n                    }\n                    _this2.outsideClick = null; // reset: no longer needed\n                };\n                if (this.originalOptions.checkCanReturnFocus) {\n                    this.originalOptions.checkCanReturnFocus.call(null, this.getReturnFocusNode()) // call out of context\n                    .then(finishDeactivation, finishDeactivation);\n                } else {\n                    finishDeactivation();\n                }\n            }\n        },\n        {\n            key: \"setupFocusTrap\",\n            value: function setupFocusTrap() {\n                if (this.focusTrap) {\n                    // trap already exists: it's possible we're in StrictMode and we're being remounted,\n                    //  in which case, we will have deactivated the trap when we got unmounted (remember,\n                    //  StrictMode, in development, purposely unmounts and remounts components after\n                    //  mounting them the first time to make sure they have reusable state,\n                    //  @see https://reactjs.org/docs/strict-mode.html#ensuring-reusable-state) so now\n                    //  we need to restore the state of the trap according to our component state\n                    // NOTE: Strict mode __violates__ assumptions about the `componentWillUnmount()` API\n                    //  which clearly states -- even for React 18 -- that, \"Once a component instance is\n                    //  unmounted, __it will never be mounted again.__\" (emphasis ours). So when we get\n                    //  unmounted, we assume we're gone forever and we deactivate the trap. But then\n                    //  we get remounted and we're supposed to restore state. But if you had paused,\n                    //  we've now deactivated (we don't know we're amount to get remounted again)\n                    //  which means we need to reactivate and then pause. Otherwise, do nothing.\n                    if (this.props.active && !this.focusTrap.active) {\n                        this.focusTrap.activate();\n                        if (this.props.paused) {\n                            this.focusTrap.pause();\n                        }\n                    }\n                } else {\n                    var nodesExist = this.focusTrapElements.some(Boolean);\n                    if (nodesExist) {\n                        // eslint-disable-next-line react/prop-types -- _createFocusTrap is an internal prop\n                        this.focusTrap = this.props._createFocusTrap(this.focusTrapElements, this.internalOptions);\n                        if (this.props.active) {\n                            this.focusTrap.activate();\n                        }\n                        if (this.props.paused) {\n                            this.focusTrap.pause();\n                        }\n                    }\n                }\n            }\n        },\n        {\n            key: \"componentDidMount\",\n            value: function componentDidMount() {\n                if (this.props.active) {\n                    this.setupFocusTrap();\n                }\n            // else, wait for later activation in case the `focusTrapOptions` will be updated\n            //  again before the trap is activated (e.g. if waiting to know what the document\n            //  object will be, so the Trap must be rendered, but the consumer is waiting to\n            //  activate until they have obtained the document from a ref)\n            //  @see https://github.com/focus-trap/focus-trap-react/issues/539\n            }\n        },\n        {\n            key: \"componentDidUpdate\",\n            value: function componentDidUpdate(prevProps) {\n                if (this.focusTrap) {\n                    if (prevProps.containerElements !== this.props.containerElements) {\n                        this.focusTrap.updateContainerElements(this.props.containerElements);\n                    }\n                    var hasActivated = !prevProps.active && this.props.active;\n                    var hasDeactivated = prevProps.active && !this.props.active;\n                    var hasPaused = !prevProps.paused && this.props.paused;\n                    var hasUnpaused = prevProps.paused && !this.props.paused;\n                    if (hasActivated) {\n                        this.updatePreviousElement();\n                        this.focusTrap.activate();\n                    }\n                    if (hasDeactivated) {\n                        this.deactivateTrap();\n                        return; // un/pause does nothing on an inactive trap\n                    }\n                    if (hasPaused) {\n                        this.focusTrap.pause();\n                    }\n                    if (hasUnpaused) {\n                        this.focusTrap.unpause();\n                    }\n                } else {\n                    // NOTE: if we're in `componentDidUpdate` and we don't have a trap yet,\n                    //  it either means it shouldn't be active, or it should be but none of\n                    //  of given `containerElements` were present in the DOM the last time\n                    //  we tried to create the trap\n                    if (prevProps.containerElements !== this.props.containerElements) {\n                        this.focusTrapElements = this.props.containerElements;\n                    }\n                    // don't create the trap unless it should be active in case the consumer\n                    //  is still updating `focusTrapOptions`\n                    //  @see https://github.com/focus-trap/focus-trap-react/issues/539\n                    if (this.props.active) {\n                        this.updatePreviousElement();\n                        this.setupFocusTrap();\n                    }\n                }\n            }\n        },\n        {\n            key: \"componentWillUnmount\",\n            value: function componentWillUnmount() {\n                this.deactivateTrap();\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var _this3 = this;\n                var child = this.props.children ? React.Children.only(this.props.children) : undefined;\n                if (child) {\n                    if (child.type && child.type === React.Fragment) {\n                        throw new Error(\"A focus-trap cannot use a Fragment as its child container. Try replacing it with a <div> element.\");\n                    }\n                    var callbackRef = function callbackRef(element) {\n                        var containerElements = _this3.props.containerElements;\n                        if (child) {\n                            if (typeof child.ref === \"function\") {\n                                child.ref(element);\n                            } else if (child.ref) {\n                                child.ref.current = element;\n                            }\n                        }\n                        _this3.focusTrapElements = containerElements ? containerElements : [\n                            element\n                        ];\n                    };\n                    var childWithRef = React.cloneElement(child, {\n                        ref: callbackRef\n                    });\n                    return childWithRef;\n                }\n                return null;\n            }\n        }\n    ]);\n    return FocusTrap;\n}(React.Component); // support server-side rendering where `Element` will not be defined\nvar ElementType = typeof Element === \"undefined\" ? Function : Element;\nFocusTrap.propTypes = {\n    active: PropTypes.bool,\n    paused: PropTypes.bool,\n    focusTrapOptions: PropTypes.shape({\n        document: PropTypes.object,\n        onActivate: PropTypes.func,\n        onPostActivate: PropTypes.func,\n        checkCanFocusTrap: PropTypes.func,\n        onPause: PropTypes.func,\n        onPostPause: PropTypes.func,\n        onUnpause: PropTypes.func,\n        onPostUnpause: PropTypes.func,\n        onDeactivate: PropTypes.func,\n        onPostDeactivate: PropTypes.func,\n        checkCanReturnFocus: PropTypes.func,\n        initialFocus: PropTypes.oneOfType([\n            PropTypes.instanceOf(ElementType),\n            PropTypes.string,\n            PropTypes.bool,\n            PropTypes.func\n        ]),\n        fallbackFocus: PropTypes.oneOfType([\n            PropTypes.instanceOf(ElementType),\n            PropTypes.string,\n            // NOTE: does not support `false` as value (or return value from function)\n            PropTypes.func\n        ]),\n        escapeDeactivates: PropTypes.oneOfType([\n            PropTypes.bool,\n            PropTypes.func\n        ]),\n        clickOutsideDeactivates: PropTypes.oneOfType([\n            PropTypes.bool,\n            PropTypes.func\n        ]),\n        returnFocusOnDeactivate: PropTypes.bool,\n        setReturnFocus: PropTypes.oneOfType([\n            PropTypes.instanceOf(ElementType),\n            PropTypes.string,\n            PropTypes.bool,\n            PropTypes.func\n        ]),\n        allowOutsideClick: PropTypes.oneOfType([\n            PropTypes.bool,\n            PropTypes.func\n        ]),\n        preventScroll: PropTypes.bool,\n        tabbableOptions: PropTypes.shape({\n            displayCheck: PropTypes.oneOf([\n                \"full\",\n                \"legacy-full\",\n                \"non-zero-area\",\n                \"none\"\n            ]),\n            getShadowRoot: PropTypes.oneOfType([\n                PropTypes.bool,\n                PropTypes.func\n            ])\n        }),\n        trapStack: PropTypes.array,\n        isKeyForward: PropTypes.func,\n        isKeyBackward: PropTypes.func\n    }),\n    containerElements: PropTypes.arrayOf(PropTypes.instanceOf(ElementType)),\n    // DOM element ONLY\n    children: PropTypes.oneOfType([\n        PropTypes.element,\n        // React element\n        PropTypes.instanceOf(ElementType) // DOM element\n    ])\n};\nFocusTrap.defaultProps = {\n    active: true,\n    paused: false,\n    focusTrapOptions: {},\n    _createFocusTrap: createFocusTrap\n};\nmodule.exports = FocusTrap;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/focus-trap-react/dist/focus-trap-react.js\n");

/***/ })

};
;