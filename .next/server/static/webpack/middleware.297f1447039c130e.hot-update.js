"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("middleware",{

/***/ "(middleware)/./middlewares/with-custom-urls.ts":
/*!*****************************************!*\
  !*** ./middlewares/with-custom-urls.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   withCustomUrls: () => (/* binding */ withCustomUrls)\n/* harmony export */ });\n/* harmony import */ var next_headers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/headers */ \"(middleware)/./node_modules/next/dist/esm/api/headers.js\");\n/* harmony import */ var next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/web/exports/next-response */ \"(middleware)/./node_modules/next/dist/esm/server/web/exports/next-response.js\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! zod */ \"(middleware)/./node_modules/zod/lib/index.mjs\");\n/* harmony import */ var _auth__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ~/auth */ \"(middleware)/./auth.ts\");\n/* harmony import */ var _client_generated_graphql__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ~/client/generated/graphql */ \"(middleware)/./client/generated/graphql.ts\");\n/* harmony import */ var _client_queries_get_route__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ~/client/queries/get-route */ \"(middleware)/./client/queries/get-route.ts\");\n/* harmony import */ var _client_queries_get_store_status__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ~/client/queries/get-store-status */ \"(middleware)/./client/queries/get-store-status.ts\");\n/* harmony import */ var _lib_kv__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../lib/kv */ \"(middleware)/./lib/kv/index.ts\");\n// import { cookies } from 'next/headers';\n// import { NextRequest, NextResponse } from 'next/server';\n// import { z } from 'zod';\n// import { getSessionCustomerId } from '~/auth';\n// import { StorefrontStatusType } from '~/client/generated/graphql';\n// import { getRoute } from '~/client/queries/get-route';\n// import { getStoreStatus } from '~/client/queries/get-store-status';\n// import { kv } from '../lib/kv';\n// import { type MiddlewareFactory } from './compose-middlewares';\n// type Node = Awaited<ReturnType<typeof getRoute>>;\n// interface RouteCache {\n//   node: Node;\n//   expiryTime: number;\n// }\n// const STORE_STATUS_KEY = 'storeStatus';\n// interface StorefrontStatusCache {\n//   status: StorefrontStatusType;\n//   expiryTime: number;\n// }\n// const createRewriteUrl = (path: string, request: NextRequest) => {\n//   const url = new URL(path, request.url);\n//   url.search = request.nextUrl.search;\n//   return url;\n// };\n// const StorefrontStatusCacheSchema = z.object({\n//   status: z.nativeEnum(StorefrontStatusType),\n//   expiryTime: z.number(),\n// });\n// const RouteCacheSchema = z.object({\n//   node: z.nullable(z.object({ __typename: z.string(), entityId: z.optional(z.number()) })),\n//   expiryTime: z.number(),\n// });\n// const getExistingRouteInfo = async (request: NextRequest) => {\n//   try {\n//     const pathname = request.nextUrl.pathname;\n//     const [routeCache, statusCache] = await kv.mget<RouteCache | StorefrontStatusCache>(\n//       pathname,\n//       STORE_STATUS_KEY,\n//     );\n//     if (statusCache && statusCache.expiryTime < Date.now()) {\n//       void fetch(new URL(`/api/revalidate/store-status`, request.url), {\n//         method: 'POST',\n//         headers: {\n//           'x-internal-token': process.env.BIGCOMMERCE_CUSTOMER_IMPERSONATION_TOKEN ?? '',\n//         },\n//       });\n//     }\n//     if (routeCache && routeCache.expiryTime < Date.now()) {\n//       void fetch(new URL(`/api/revalidate/route`, request.url), {\n//         method: 'POST',\n//         body: JSON.stringify({ pathname }),\n//         headers: {\n//           'x-internal-token': process.env.BIGCOMMERCE_CUSTOMER_IMPERSONATION_TOKEN ?? '',\n//         },\n//       });\n//     }\n//     const parsedRoute = RouteCacheSchema.safeParse(routeCache);\n//     const parsedStatus = StorefrontStatusCacheSchema.safeParse(statusCache);\n//     return {\n//       // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n//       node: parsedRoute.success ? (parsedRoute.data.node as Node) : undefined,\n//       status: parsedStatus.success ? parsedStatus.data.status : undefined,\n//     };\n//   } catch (error) {\n//     // eslint-disable-next-line no-console\n//     console.error(error);\n//     return {\n//       node: undefined,\n//       status: undefined,\n//     };\n//   }\n// };\n// const setKvStatus = async (status?: StorefrontStatusType | null) => {\n//   try {\n//     const expiryTime = Date.now() + 1000 * 60 * 5; // 5 minutes;\n//     await kv.set(STORE_STATUS_KEY, { status, expiryTime });\n//   } catch (error) {\n//     // eslint-disable-next-line no-console\n//     console.error(error);\n//   }\n// };\n// const setKvRoute = async (request: NextRequest, node: Node) => {\n//   try {\n//     const expiryTime = Date.now() + 1000 * 60 * 30; // 30 minutes;\n//     await kv.set(request.nextUrl.pathname, { node, expiryTime });\n//   } catch (error) {\n//     // eslint-disable-next-line no-console\n//     console.error(error);\n//   }\n// };\n// const getRouteInfo = async (request: NextRequest) => {\n//   try {\n//     let { node, status } = await getExistingRouteInfo(request);\n//     if (status === undefined) {\n//       const newStatus = await getStoreStatus();\n//       if (newStatus) {\n//         status = newStatus;\n//         await setKvStatus(status);\n//       }\n//     }\n//     if (node === undefined) {\n//       const newNode = await getRoute(request.nextUrl.pathname);\n//       node = newNode;\n//       await setKvRoute(request, node);\n//     }\n//     return { node, status };\n//   } catch (error) {\n//     // eslint-disable-next-line no-console\n//     console.error(error);\n//     return {\n//       node: undefined,\n//       status: undefined,\n//     };\n//   }\n// };\n// export const withCustomUrls: MiddlewareFactory = (next) => {\n//   return async (request, event) => {\n//     const { node, status } = await getRouteInfo(request);\n//     if (status === 'MAINTENANCE') {\n//       // 503 status code not working - https://github.com/vercel/next.js/issues/50155\n//       return NextResponse.rewrite(new URL(`/maintenance`, request.url), { status: 503 });\n//     }\n//     const customerId = await getSessionCustomerId();\n//     const cartId = cookies().get('cartId');\n//     let postfix = '';\n//     if (!request.nextUrl.search && !customerId && !cartId && request.method === 'GET') {\n//       postfix = '/static';\n//     }\n//     switch (node?.__typename) {\n//       case 'Brand': {\n//         const url = createRewriteUrl(`/brand/${node.entityId}${postfix}`, request);\n//         return NextResponse.rewrite(url);\n//       }\n//       case 'Category': {\n//         const url = createRewriteUrl(`/category/${node.entityId}${postfix}`, request);\n//         return NextResponse.rewrite(url);\n//       }\n//       case 'Product': {\n//         const url = createRewriteUrl(`/product/${node.entityId}${postfix}`, request);\n//         return NextResponse.rewrite(url);\n//       }\n//       case 'ContactPage':\n//       case 'NormalPage': {\n//         const { pathname } = new URL(request.url);\n//         const url = createRewriteUrl(`/bc-page${pathname}`, request);\n//         return NextResponse.rewrite(url);\n//       }\n//       default: {\n//         const { pathname } = new URL(request.url);\n//         if (pathname === '/' && postfix) {\n//           const url = createRewriteUrl(postfix, request);\n//           return NextResponse.rewrite(url);\n//         }\n//         return next(request, event);\n//       }\n//     }\n//   };\n// };\n// import { cookies } from 'next/headers';\n// import { NextRequest, NextResponse } from 'next/server';\n// import { z } from 'zod';\n// import { getSessionCustomerId } from '~/auth';\n// import { StorefrontStatusType } from '~/client/generated/graphql';\n// import { getRoute } from '~/client/queries/get-route';\n// import { getStoreStatus } from '~/client/queries/get-store-status';\n// import { kv } from '../lib/kv';\n// import { type MiddlewareFactory } from './compose-middlewares';\n// type Node = Awaited<ReturnType<typeof getRoute>>;\n// interface RouteCache {\n//   node: Node;\n//   expiryTime: number;\n// }\n// const STORE_STATUS_KEY = 'storeStatus';\n// interface StorefrontStatusCache {\n//   status: StorefrontStatusType;\n//   expiryTime: number;\n// }\n// const createRewriteUrl = (path: string, request: NextRequest) => {\n//   const url = new URL(path, request.url);\n//   url.search = request.nextUrl.search;\n//   return url;\n// };\n// const StorefrontStatusCacheSchema = z.object({\n//   status: z.nativeEnum(StorefrontStatusType),\n//   expiryTime: z.number(),\n// });\n// const RouteCacheSchema = z.object({\n//   node: z.nullable(z.object({ __typename: z.string(), entityId: z.optional(z.number()) })),\n//   expiryTime: z.number(),\n// });\n// const getExistingRouteInfo = async (request: NextRequest) => {\n//   try {\n//     const pathname = request.nextUrl.pathname;\n//     const [routeCache, statusCache] = await kv.mget<RouteCache | StorefrontStatusCache>(\n//       pathname,\n//       STORE_STATUS_KEY,\n//     );\n//     if (statusCache && statusCache.expiryTime < Date.now()) {\n//       void fetch(new URL(`/api/revalidate/store-status`, request.url), {\n//         method: 'POST',\n//         headers: {\n//           'x-internal-token': process.env.BIGCOMMERCE_CUSTOMER_IMPERSONATION_TOKEN ?? '',\n//         },\n//       });\n//     }\n//     if (routeCache && routeCache.expiryTime < Date.now()) {\n//       void fetch(new URL(`/api/revalidate/route`, request.url), {\n//         method: 'POST',\n//         body: JSON.stringify({ pathname }),\n//         headers: {\n//           'x-internal-token': process.env.BIGCOMMERCE_CUSTOMER_IMPERSONATION_TOKEN ?? '',\n//         },\n//       });\n//     }\n//     const parsedRoute = RouteCacheSchema.safeParse(routeCache);\n//     const parsedStatus = StorefrontStatusCacheSchema.safeParse(statusCache);\n//     return {\n//       // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n//       node: parsedRoute.success ? (parsedRoute.data.node as Node) : undefined,\n//       status: parsedStatus.success ? parsedStatus.data.status : undefined,\n//     };\n//   } catch (error) {\n//     // eslint-disable-next-line no-console\n//     console.error(error);\n//     return {\n//       node: undefined,\n//       status: undefined,\n//     };\n//   }\n// };\n// const setKvStatus = async (status?: StorefrontStatusType | null) => {\n//   try {\n//     const expiryTime = Date.now() + 1000 * 60 * 5; // 5 minutes;\n//     await kv.set(STORE_STATUS_KEY, { status, expiryTime });\n//   } catch (error) {\n//     // eslint-disable-next-line no-console\n//     console.error(error);\n//   }\n// };\n// const setKvRoute = async (request: NextRequest, node: Node) => {\n//   try {\n//     const expiryTime = Date.now() + 1000 * 60 * 30; // 30 minutes;\n//     await kv.set(request.nextUrl.pathname, { node, expiryTime });\n//   } catch (error) {\n//     // eslint-disable-next-line no-console\n//     console.error(error);\n//   }\n// };\n// const getRouteInfo = async (request: NextRequest) => {\n//   try {\n//     let { node, status } = await getExistingRouteInfo(request);\n//     if (status === undefined) {\n//       const newStatus = await getStoreStatus();\n//       if (newStatus) {\n//         status = newStatus;\n//         await setKvStatus(status);\n//       }\n//     }\n//     if (node === undefined) {\n//       const newNode = await getRoute(request.nextUrl.pathname);\n//       node = newNode;\n//       await setKvRoute(request, node);\n//     }\n//     return { node, status };\n//   } catch (error) {\n//     // eslint-disable-next-line no-console\n//     console.error(error);\n//     return {\n//       node: undefined,\n//       status: undefined,\n//     };\n//   }\n// };\n// export const withCustomUrls: MiddlewareFactory = (next) => {\n//   return async (request, event) => {\n//     const { node, status } = await getRouteInfo(request);\n//     if (status === 'MAINTENANCE') {\n//       // 503 status code not working - https://github.com/vercel/next.js/issues/50155\n//       return NextResponse.rewrite(new URL(`/maintenance`, request.url), { status: 503 });\n//     }\n//     const customerId = await getSessionCustomerId();\n//     const cartId = cookies().get('cartId');\n//     let postfix = '';\n//     if (!request.nextUrl.search && !customerId && !cartId && request.method === 'GET') {\n//       postfix = '/static';\n//     }\n//     // Rewrite / to /lookbook -- ARIZON\n//     if (request.nextUrl.pathname === '/') {\n//       return NextResponse.rewrite(new URL('/page', request.url));\n//     }\n//     switch (node?.__typename) {\n//       case 'Brand': {\n//         const url = createRewriteUrl(`/brand/${node.entityId}${postfix}`, request);\n//         return NextResponse.rewrite(url);\n//       }\n//       case 'Category': {\n//         const url = createRewriteUrl(`/category/${node.entityId}${postfix}`, request);\n//         return NextResponse.rewrite(url);\n//       }\n//       case 'Product': {\n//         const url = createRewriteUrl(`/product/${node.entityId}${postfix}`, request);\n//         return NextResponse.rewrite(url);\n//       }\n//       case 'ContactPage':\n//       case 'NormalPage': {\n//         const { pathname } = new URL(request.url);\n//         const url = createRewriteUrl(`/bc-page${pathname}`, request);\n//         return NextResponse.rewrite(url);\n//       }\n//       default: {\n//         const { pathname } = new URL(request.url);\n//         if (pathname === '/' && postfix) {\n//           const url = createRewriteUrl(postfix, request);\n//           return NextResponse.rewrite(url);\n//         }\n//         return next(request, event);\n//       }\n//     }\n//   };\n// };\n// new code\n\n\n\n\n\n\n\n\nconst STORE_STATUS_KEY = \"storeStatus\";\nconst createRewriteUrl = (path, request)=>{\n    const url = new URL(path, request.url);\n    url.search = request.nextUrl.search;\n    return url;\n};\nconst StorefrontStatusCacheSchema = zod__WEBPACK_IMPORTED_MODULE_7__.z.object({\n    status: zod__WEBPACK_IMPORTED_MODULE_7__.z.nativeEnum(_client_generated_graphql__WEBPACK_IMPORTED_MODULE_3__.StorefrontStatusType),\n    expiryTime: zod__WEBPACK_IMPORTED_MODULE_7__.z.number()\n});\nconst RouteCacheSchema = zod__WEBPACK_IMPORTED_MODULE_7__.z.object({\n    node: zod__WEBPACK_IMPORTED_MODULE_7__.z.nullable(zod__WEBPACK_IMPORTED_MODULE_7__.z.object({\n        __typename: zod__WEBPACK_IMPORTED_MODULE_7__.z.string(),\n        entityId: zod__WEBPACK_IMPORTED_MODULE_7__.z.optional(zod__WEBPACK_IMPORTED_MODULE_7__.z.number())\n    })),\n    expiryTime: zod__WEBPACK_IMPORTED_MODULE_7__.z.number()\n});\nconst getExistingRouteInfo = async (request)=>{\n    try {\n        const pathname = request.nextUrl.pathname;\n        const [routeCache, statusCache] = await _lib_kv__WEBPACK_IMPORTED_MODULE_6__.kv.mget(pathname, STORE_STATUS_KEY);\n        if (statusCache && statusCache.expiryTime < Date.now()) {\n            void fetch(new URL(`/api/revalidate/store-status`, request.url), {\n                method: \"POST\",\n                headers: {\n                    \"x-internal-token\": process.env.BIGCOMMERCE_CUSTOMER_IMPERSONATION_TOKEN ?? \"\"\n                }\n            });\n        }\n        if (routeCache && routeCache.expiryTime < Date.now()) {\n            void fetch(new URL(`/api/revalidate/route`, request.url), {\n                method: \"POST\",\n                body: JSON.stringify({\n                    pathname\n                }),\n                headers: {\n                    \"x-internal-token\": process.env.BIGCOMMERCE_CUSTOMER_IMPERSONATION_TOKEN ?? \"\"\n                }\n            });\n        }\n        const parsedRoute = RouteCacheSchema.safeParse(routeCache);\n        const parsedStatus = StorefrontStatusCacheSchema.safeParse(statusCache);\n        return {\n            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n            node: parsedRoute.success ? parsedRoute.data.node : undefined,\n            status: parsedStatus.success ? parsedStatus.data.status : undefined\n        };\n    } catch (error) {\n        console.error(error);\n        return {\n            node: undefined,\n            status: undefined\n        };\n    }\n};\nconst setKvStatus = async (status)=>{\n    try {\n        const expiryTime = Date.now() + 1000 * 60 * 5; // 5 minutes;\n        await _lib_kv__WEBPACK_IMPORTED_MODULE_6__.kv.set(STORE_STATUS_KEY, {\n            status,\n            expiryTime\n        });\n    } catch (error) {\n        console.error(error);\n    }\n};\nconst setKvRoute = async (request, node)=>{\n    try {\n        const expiryTime = Date.now() + 1000 * 60 * 30; // 30 minutes;\n        await _lib_kv__WEBPACK_IMPORTED_MODULE_6__.kv.set(request.nextUrl.pathname, {\n            node,\n            expiryTime\n        });\n    } catch (error) {\n        console.error(error);\n    }\n};\nconst getRouteInfo = async (request)=>{\n    try {\n        let { node, status } = await getExistingRouteInfo(request);\n        if (status === undefined) {\n            const newStatus = await (0,_client_queries_get_store_status__WEBPACK_IMPORTED_MODULE_5__.getStoreStatus)();\n            if (newStatus) {\n                status = newStatus;\n                await setKvStatus(status);\n            }\n        }\n        if (node === undefined) {\n            const newNode = await (0,_client_queries_get_route__WEBPACK_IMPORTED_MODULE_4__.getRoute)(request.nextUrl.pathname);\n            node = newNode;\n            await setKvRoute(request, node);\n        }\n        return {\n            node,\n            status\n        };\n    } catch (error) {\n        console.error(error);\n        return {\n            node: undefined,\n            status: undefined\n        };\n    }\n};\nconst withCustomUrls = (next)=>{\n    return async (request, event)=>{\n        const { node, status } = await getRouteInfo(request);\n        if (status === \"MAINTENANCE\") {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_1__[\"default\"].rewrite(new URL(`/maintenance`, request.url), {\n                status: 503\n            });\n        }\n        if (request.nextUrl.pathname === \"/page\") {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_1__[\"default\"].redirect(\"http://localhost:3001/\", 301);\n        }\n        const customerId = await (0,_auth__WEBPACK_IMPORTED_MODULE_2__.getSessionCustomerId)();\n        const cartId = (0,next_headers__WEBPACK_IMPORTED_MODULE_0__.cookies)().get(\"cartId\");\n        let postfix = \"\";\n        if (!request.nextUrl.search && !customerId && !cartId && request.method === \"GET\") {\n            postfix = \"/static\";\n        }\n        switch(node?.__typename){\n            case \"Brand\":\n                {\n                    const url = createRewriteUrl(`/brand/${node.entityId}${postfix}`, request);\n                    return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_1__[\"default\"].rewrite(url);\n                }\n            case \"Category\":\n                {\n                    const url = createRewriteUrl(`/category/${node.entityId}${postfix}`, request);\n                    return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_1__[\"default\"].rewrite(url);\n                }\n            case \"Product\":\n                {\n                    const url = createRewriteUrl(`/product/${node.entityId}${postfix}`, request);\n                    return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_1__[\"default\"].rewrite(url);\n                }\n            case \"ContactPage\":\n            case \"NormalPage\":\n                {\n                    const { pathname } = new URL(request.url);\n                    const url = createRewriteUrl(`/bc-page${pathname}`, request);\n                    return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_1__[\"default\"].rewrite(url);\n                }\n            default:\n                {\n                    const { pathname } = new URL(request.url);\n                    if (pathname === \"/\" && postfix) {\n                        const url = createRewriteUrl(postfix, request);\n                        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_1__[\"default\"].rewrite(url);\n                    }\n                    return next(request, event);\n                }\n        }\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(middleware)/./middlewares/with-custom-urls.ts\n");

/***/ })

});