"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("middleware",{

/***/ "(middleware)/./middlewares/with-custom-urls.ts":
/*!*****************************************!*\
  !*** ./middlewares/with-custom-urls.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   withCustomUrls: () => (/* binding */ withCustomUrls)\n/* harmony export */ });\n/* harmony import */ var next_headers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/headers */ \"(middleware)/./node_modules/next/dist/esm/api/headers.js\");\n/* harmony import */ var next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/web/exports/next-response */ \"(middleware)/./node_modules/next/dist/esm/server/web/exports/next-response.js\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! zod */ \"(middleware)/./node_modules/zod/lib/index.mjs\");\n/* harmony import */ var _auth__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ~/auth */ \"(middleware)/./auth.ts\");\n/* harmony import */ var _client_generated_graphql__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ~/client/generated/graphql */ \"(middleware)/./client/generated/graphql.ts\");\n/* harmony import */ var _client_queries_get_route__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ~/client/queries/get-route */ \"(middleware)/./client/queries/get-route.ts\");\n/* harmony import */ var _client_queries_get_store_status__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ~/client/queries/get-store-status */ \"(middleware)/./client/queries/get-store-status.ts\");\n/* harmony import */ var _lib_kv__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../lib/kv */ \"(middleware)/./lib/kv/index.ts\");\n// import { cookies } from 'next/headers';\n// import { NextRequest, NextResponse } from 'next/server';\n// import { z } from 'zod';\n// import { getSessionCustomerId } from '~/auth';\n// import { StorefrontStatusType } from '~/client/generated/graphql';\n// import { getRoute } from '~/client/queries/get-route';\n// import { getStoreStatus } from '~/client/queries/get-store-status';\n// import { kv } from '../lib/kv';\n// import { type MiddlewareFactory } from './compose-middlewares';\n// type Node = Awaited<ReturnType<typeof getRoute>>;\n// interface RouteCache {\n//   node: Node;\n//   expiryTime: number;\n// }\n// const STORE_STATUS_KEY = 'storeStatus';\n// interface StorefrontStatusCache {\n//   status: StorefrontStatusType;\n//   expiryTime: number;\n// }\n// const createRewriteUrl = (path: string, request: NextRequest) => {\n//   const url = new URL(path, request.url);\n//   url.search = request.nextUrl.search;\n//   return url;\n// };\n// const StorefrontStatusCacheSchema = z.object({\n//   status: z.nativeEnum(StorefrontStatusType),\n//   expiryTime: z.number(),\n// });\n// const RouteCacheSchema = z.object({\n//   node: z.nullable(z.object({ __typename: z.string(), entityId: z.optional(z.number()) })),\n//   expiryTime: z.number(),\n// });\n// const getExistingRouteInfo = async (request: NextRequest) => {\n//   try {\n//     const pathname = request.nextUrl.pathname;\n//     const [routeCache, statusCache] = await kv.mget<RouteCache | StorefrontStatusCache>(\n//       pathname,\n//       STORE_STATUS_KEY,\n//     );\n//     if (statusCache && statusCache.expiryTime < Date.now()) {\n//       void fetch(new URL(`/api/revalidate/store-status`, request.url), {\n//         method: 'POST',\n//         headers: {\n//           'x-internal-token': process.env.BIGCOMMERCE_CUSTOMER_IMPERSONATION_TOKEN ?? '',\n//         },\n//       });\n//     }\n//     if (routeCache && routeCache.expiryTime < Date.now()) {\n//       void fetch(new URL(`/api/revalidate/route`, request.url), {\n//         method: 'POST',\n//         body: JSON.stringify({ pathname }),\n//         headers: {\n//           'x-internal-token': process.env.BIGCOMMERCE_CUSTOMER_IMPERSONATION_TOKEN ?? '',\n//         },\n//       });\n//     }\n//     const parsedRoute = RouteCacheSchema.safeParse(routeCache);\n//     const parsedStatus = StorefrontStatusCacheSchema.safeParse(statusCache);\n//     return {\n//       // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n//       node: parsedRoute.success ? (parsedRoute.data.node as Node) : undefined,\n//       status: parsedStatus.success ? parsedStatus.data.status : undefined,\n//     };\n//   } catch (error) {\n//     // eslint-disable-next-line no-console\n//     console.error(error);\n//     return {\n//       node: undefined,\n//       status: undefined,\n//     };\n//   }\n// };\n// const setKvStatus = async (status?: StorefrontStatusType | null) => {\n//   try {\n//     const expiryTime = Date.now() + 1000 * 60 * 5; // 5 minutes;\n//     await kv.set(STORE_STATUS_KEY, { status, expiryTime });\n//   } catch (error) {\n//     // eslint-disable-next-line no-console\n//     console.error(error);\n//   }\n// };\n// const setKvRoute = async (request: NextRequest, node: Node) => {\n//   try {\n//     const expiryTime = Date.now() + 1000 * 60 * 30; // 30 minutes;\n//     await kv.set(request.nextUrl.pathname, { node, expiryTime });\n//   } catch (error) {\n//     // eslint-disable-next-line no-console\n//     console.error(error);\n//   }\n// };\n// const getRouteInfo = async (request: NextRequest) => {\n//   try {\n//     let { node, status } = await getExistingRouteInfo(request);\n//     if (status === undefined) {\n//       const newStatus = await getStoreStatus();\n//       if (newStatus) {\n//         status = newStatus;\n//         await setKvStatus(status);\n//       }\n//     }\n//     if (node === undefined) {\n//       const newNode = await getRoute(request.nextUrl.pathname);\n//       node = newNode;\n//       await setKvRoute(request, node);\n//     }\n//     return { node, status };\n//   } catch (error) {\n//     // eslint-disable-next-line no-console\n//     console.error(error);\n//     return {\n//       node: undefined,\n//       status: undefined,\n//     };\n//   }\n// };\n// export const withCustomUrls: MiddlewareFactory = (next) => {\n//   return async (request, event) => {\n//     const { node, status } = await getRouteInfo(request);\n//     if (status === 'MAINTENANCE') {\n//       // 503 status code not working - https://github.com/vercel/next.js/issues/50155\n//       return NextResponse.rewrite(new URL(`/maintenance`, request.url), { status: 503 });\n//     }\n//     const customerId = await getSessionCustomerId();\n//     const cartId = cookies().get('cartId');\n//     let postfix = '';\n//     if (!request.nextUrl.search && !customerId && !cartId && request.method === 'GET') {\n//       postfix = '/static';\n//     }\n//     switch (node?.__typename) {\n//       case 'Brand': {\n//         const url = createRewriteUrl(`/brand/${node.entityId}${postfix}`, request);\n//         return NextResponse.rewrite(url);\n//       }\n//       case 'Category': {\n//         const url = createRewriteUrl(`/category/${node.entityId}${postfix}`, request);\n//         return NextResponse.rewrite(url);\n//       }\n//       case 'Product': {\n//         const url = createRewriteUrl(`/product/${node.entityId}${postfix}`, request);\n//         return NextResponse.rewrite(url);\n//       }\n//       case 'ContactPage':\n//       case 'NormalPage': {\n//         const { pathname } = new URL(request.url);\n//         const url = createRewriteUrl(`/bc-page${pathname}`, request);\n//         return NextResponse.rewrite(url);\n//       }\n//       default: {\n//         const { pathname } = new URL(request.url);\n//         if (pathname === '/' && postfix) {\n//           const url = createRewriteUrl(postfix, request);\n//           return NextResponse.rewrite(url);\n//         }\n//         return next(request, event);\n//       }\n//     }\n//   };\n// };\n// import { cookies } from 'next/headers';\n// import { NextRequest, NextResponse } from 'next/server';\n// import { z } from 'zod';\n// import { getSessionCustomerId } from '~/auth';\n// import { StorefrontStatusType } from '~/client/generated/graphql';\n// import { getRoute } from '~/client/queries/get-route';\n// import { getStoreStatus } from '~/client/queries/get-store-status';\n// import { kv } from '../lib/kv';\n// import { type MiddlewareFactory } from './compose-middlewares';\n// type Node = Awaited<ReturnType<typeof getRoute>>;\n// interface RouteCache {\n//   node: Node;\n//   expiryTime: number;\n// }\n// const STORE_STATUS_KEY = 'storeStatus';\n// interface StorefrontStatusCache {\n//   status: StorefrontStatusType;\n//   expiryTime: number;\n// }\n// const createRewriteUrl = (path: string, request: NextRequest) => {\n//   const url = new URL(path, request.url);\n//   url.search = request.nextUrl.search;\n//   return url;\n// };\n// const StorefrontStatusCacheSchema = z.object({\n//   status: z.nativeEnum(StorefrontStatusType),\n//   expiryTime: z.number(),\n// });\n// const RouteCacheSchema = z.object({\n//   node: z.nullable(z.object({ __typename: z.string(), entityId: z.optional(z.number()) })),\n//   expiryTime: z.number(),\n// });\n// const getExistingRouteInfo = async (request: NextRequest) => {\n//   try {\n//     const pathname = request.nextUrl.pathname;\n//     const [routeCache, statusCache] = await kv.mget<RouteCache | StorefrontStatusCache>(\n//       pathname,\n//       STORE_STATUS_KEY,\n//     );\n//     if (statusCache && statusCache.expiryTime < Date.now()) {\n//       void fetch(new URL(`/api/revalidate/store-status`, request.url), {\n//         method: 'POST',\n//         headers: {\n//           'x-internal-token': process.env.BIGCOMMERCE_CUSTOMER_IMPERSONATION_TOKEN ?? '',\n//         },\n//       });\n//     }\n//     if (routeCache && routeCache.expiryTime < Date.now()) {\n//       void fetch(new URL(`/api/revalidate/route`, request.url), {\n//         method: 'POST',\n//         body: JSON.stringify({ pathname }),\n//         headers: {\n//           'x-internal-token': process.env.BIGCOMMERCE_CUSTOMER_IMPERSONATION_TOKEN ?? '',\n//         },\n//       });\n//     }\n//     const parsedRoute = RouteCacheSchema.safeParse(routeCache);\n//     const parsedStatus = StorefrontStatusCacheSchema.safeParse(statusCache);\n//     return {\n//       // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n//       node: parsedRoute.success ? (parsedRoute.data.node as Node) : undefined,\n//       status: parsedStatus.success ? parsedStatus.data.status : undefined,\n//     };\n//   } catch (error) {\n//     // eslint-disable-next-line no-console\n//     console.error(error);\n//     return {\n//       node: undefined,\n//       status: undefined,\n//     };\n//   }\n// };\n// const setKvStatus = async (status?: StorefrontStatusType | null) => {\n//   try {\n//     const expiryTime = Date.now() + 1000 * 60 * 5; // 5 minutes;\n//     await kv.set(STORE_STATUS_KEY, { status, expiryTime });\n//   } catch (error) {\n//     // eslint-disable-next-line no-console\n//     console.error(error);\n//   }\n// };\n// const setKvRoute = async (request: NextRequest, node: Node) => {\n//   try {\n//     const expiryTime = Date.now() + 1000 * 60 * 30; // 30 minutes;\n//     await kv.set(request.nextUrl.pathname, { node, expiryTime });\n//   } catch (error) {\n//     // eslint-disable-next-line no-console\n//     console.error(error);\n//   }\n// };\n// const getRouteInfo = async (request: NextRequest) => {\n//   try {\n//     let { node, status } = await getExistingRouteInfo(request);\n//     if (status === undefined) {\n//       const newStatus = await getStoreStatus();\n//       if (newStatus) {\n//         status = newStatus;\n//         await setKvStatus(status);\n//       }\n//     }\n//     if (node === undefined) {\n//       const newNode = await getRoute(request.nextUrl.pathname);\n//       node = newNode;\n//       await setKvRoute(request, node);\n//     }\n//     return { node, status };\n//   } catch (error) {\n//     // eslint-disable-next-line no-console\n//     console.error(error);\n//     return {\n//       node: undefined,\n//       status: undefined,\n//     };\n//   }\n// };\n// export const withCustomUrls: MiddlewareFactory = (next) => {\n//   return async (request, event) => {\n//     const { node, status } = await getRouteInfo(request);\n//     if (status === 'MAINTENANCE') {\n//       // 503 status code not working - https://github.com/vercel/next.js/issues/50155\n//       return NextResponse.rewrite(new URL(`/maintenance`, request.url), { status: 503 });\n//     }\n//     const customerId = await getSessionCustomerId();\n//     const cartId = cookies().get('cartId');\n//     let postfix = '';\n//     if (!request.nextUrl.search && !customerId && !cartId && request.method === 'GET') {\n//       postfix = '/static';\n//     }\n//     // Rewrite / to /lookbook -- ARIZON\n//     if (request.nextUrl.pathname === '/') {\n//       return NextResponse.rewrite(new URL('/page', request.url));\n//     }\n//     switch (node?.__typename) {\n//       case 'Brand': {\n//         const url = createRewriteUrl(`/brand/${node.entityId}${postfix}`, request);\n//         return NextResponse.rewrite(url);\n//       }\n//       case 'Category': {\n//         const url = createRewriteUrl(`/category/${node.entityId}${postfix}`, request);\n//         return NextResponse.rewrite(url);\n//       }\n//       case 'Product': {\n//         const url = createRewriteUrl(`/product/${node.entityId}${postfix}`, request);\n//         return NextResponse.rewrite(url);\n//       }\n//       case 'ContactPage':\n//       case 'NormalPage': {\n//         const { pathname } = new URL(request.url);\n//         const url = createRewriteUrl(`/bc-page${pathname}`, request);\n//         return NextResponse.rewrite(url);\n//       }\n//       default: {\n//         const { pathname } = new URL(request.url);\n//         if (pathname === '/' && postfix) {\n//           const url = createRewriteUrl(postfix, request);\n//           return NextResponse.rewrite(url);\n//         }\n//         return next(request, event);\n//       }\n//     }\n//   };\n// };\n\n\n\n\n\n\n\n\nconst STORE_STATUS_KEY = \"storeStatus\";\nconst createRewriteUrl = (path, request)=>{\n    const url = new URL(path, request.url);\n    url.search = request.nextUrl.search;\n    return url;\n};\nconst StorefrontStatusCacheSchema = zod__WEBPACK_IMPORTED_MODULE_7__.z.object({\n    status: zod__WEBPACK_IMPORTED_MODULE_7__.z.nativeEnum(_client_generated_graphql__WEBPACK_IMPORTED_MODULE_3__.StorefrontStatusType),\n    expiryTime: zod__WEBPACK_IMPORTED_MODULE_7__.z.number()\n});\nconst RouteCacheSchema = zod__WEBPACK_IMPORTED_MODULE_7__.z.object({\n    node: zod__WEBPACK_IMPORTED_MODULE_7__.z.nullable(zod__WEBPACK_IMPORTED_MODULE_7__.z.object({\n        __typename: zod__WEBPACK_IMPORTED_MODULE_7__.z.string(),\n        entityId: zod__WEBPACK_IMPORTED_MODULE_7__.z.optional(zod__WEBPACK_IMPORTED_MODULE_7__.z.number())\n    })),\n    expiryTime: zod__WEBPACK_IMPORTED_MODULE_7__.z.number()\n});\nconst getExistingRouteInfo = async (request)=>{\n    try {\n        const pathname = request.nextUrl.pathname;\n        const [routeCache, statusCache] = await _lib_kv__WEBPACK_IMPORTED_MODULE_6__.kv.mget(pathname, STORE_STATUS_KEY);\n        if (statusCache && statusCache.expiryTime < Date.now()) {\n            void fetch(new URL(`/api/revalidate/store-status`, request.url), {\n                method: \"POST\",\n                headers: {\n                    \"x-internal-token\": process.env.BIGCOMMERCE_CUSTOMER_IMPERSONATION_TOKEN ?? \"\"\n                }\n            });\n        }\n        if (routeCache && routeCache.expiryTime < Date.now()) {\n            void fetch(new URL(`/api/revalidate/route`, request.url), {\n                method: \"POST\",\n                body: JSON.stringify({\n                    pathname\n                }),\n                headers: {\n                    \"x-internal-token\": process.env.BIGCOMMERCE_CUSTOMER_IMPERSONATION_TOKEN ?? \"\"\n                }\n            });\n        }\n        const parsedRoute = RouteCacheSchema.safeParse(routeCache);\n        const parsedStatus = StorefrontStatusCacheSchema.safeParse(statusCache);\n        return {\n            node: parsedRoute.success ? parsedRoute.data.node : undefined,\n            status: parsedStatus.success ? parsedStatus.data.status : undefined\n        };\n    } catch (error) {\n        console.error(error);\n        return {\n            node: undefined,\n            status: undefined\n        };\n    }\n};\nconst setKvStatus = async (status)=>{\n    try {\n        const expiryTime = Date.now() + 1000 * 60 * 5; // 5 minutes;\n        await _lib_kv__WEBPACK_IMPORTED_MODULE_6__.kv.set(STORE_STATUS_KEY, {\n            status,\n            expiryTime\n        });\n    } catch (error) {\n        console.error(error);\n    }\n};\nconst setKvRoute = async (request, node)=>{\n    try {\n        const expiryTime = Date.now() + 1000 * 60 * 30; // 30 minutes;\n        await _lib_kv__WEBPACK_IMPORTED_MODULE_6__.kv.set(request.nextUrl.pathname, {\n            node,\n            expiryTime\n        });\n    } catch (error) {\n        console.error(error);\n    }\n};\nconst getRouteInfo = async (request)=>{\n    try {\n        let { node, status } = await getExistingRouteInfo(request);\n        if (status === undefined) {\n            const newStatus = await (0,_client_queries_get_store_status__WEBPACK_IMPORTED_MODULE_5__.getStoreStatus)();\n            if (newStatus) {\n                status = newStatus;\n                await setKvStatus(status);\n            }\n        }\n        if (node === undefined) {\n            const newNode = await (0,_client_queries_get_route__WEBPACK_IMPORTED_MODULE_4__.getRoute)(request.nextUrl.pathname);\n            node = newNode;\n            await setKvRoute(request, node);\n        }\n        return {\n            node,\n            status\n        };\n    } catch (error) {\n        console.error(error);\n        return {\n            node: undefined,\n            status: undefined\n        };\n    }\n};\nconst withCustomUrls = (next)=>{\n    return async (request, event)=>{\n        const { node, status } = await getRouteInfo(request);\n        if (status === \"MAINTENANCE\") {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_1__[\"default\"].rewrite(new URL(`/maintenance`, request.url), {\n                status: 503\n            });\n        }\n        const customerId = await (0,_auth__WEBPACK_IMPORTED_MODULE_2__.getSessionCustomerId)();\n        const cartId = (0,next_headers__WEBPACK_IMPORTED_MODULE_0__.cookies)().get(\"cartId\");\n        let postfix = \"\";\n        if (!request.nextUrl.search && !customerId && !cartId && request.method === \"GET\") {\n            postfix = \"/static\";\n        }\n        // Rewrite / to /page\n        if (request.nextUrl.pathname === \"/\") {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_1__[\"default\"].rewrite(new URL(\"/page\", request.url));\n        }\n        switch(node?.__typename){\n            case \"Brand\":\n                {\n                    const url = createRewriteUrl(`/brand/${node.entityId}${postfix}`, request);\n                    return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_1__[\"default\"].rewrite(url);\n                }\n            case \"Category\":\n                {\n                    const url = createRewriteUrl(`/category/${node.entityId}${postfix}`, request);\n                    return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_1__[\"default\"].rewrite(url);\n                }\n            case \"Product\":\n                {\n                    const url = createRewriteUrl(`/product/${node.entityId}${postfix}`, request);\n                    return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_1__[\"default\"].rewrite(url);\n                }\n            case \"ContactPage\":\n            case \"NormalPage\":\n                {\n                    const { pathname } = new URL(request.url);\n                    const url = createRewriteUrl(`/bc-page${pathname}`, request);\n                    return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_1__[\"default\"].rewrite(url);\n                }\n            default:\n                {\n                    const { pathname } = new URL(request.url);\n                    if (pathname === \"/\" && postfix) {\n                        const url = createRewriteUrl(postfix, request);\n                        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_1__[\"default\"].rewrite(url);\n                    }\n                    return next(request, event);\n                }\n        }\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(middleware)/./middlewares/with-custom-urls.ts\n");

/***/ }),

/***/ "(middleware)/./node_modules/next/dist/esm/client/components/bailout-to-client-rendering.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/next/dist/esm/client/components/bailout-to-client-rendering.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bailoutToClientRendering: () => (/* binding */ bailoutToClientRendering)\n/* harmony export */ });\n/* harmony import */ var _shared_lib_lazy_dynamic_bailout_to_csr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../shared/lib/lazy-dynamic/bailout-to-csr */ \"(middleware)/./node_modules/next/dist/esm/shared/lib/lazy-dynamic/bailout-to-csr.js\");\n/* harmony import */ var _static_generation_async_storage_external__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./static-generation-async-storage.external */ \"(shared)/./node_modules/next/dist/esm/client/components/static-generation-async-storage.external.js\");\n\n\nfunction bailoutToClientRendering(reason) {\n    const staticGenerationStore = _static_generation_async_storage_external__WEBPACK_IMPORTED_MODULE_1__.staticGenerationAsyncStorage.getStore();\n    if (staticGenerationStore == null ? void 0 : staticGenerationStore.forceStatic) return;\n    if (staticGenerationStore == null ? void 0 : staticGenerationStore.isStaticGeneration) throw new _shared_lib_lazy_dynamic_bailout_to_csr__WEBPACK_IMPORTED_MODULE_0__.BailoutToCSRError(reason);\n} //# sourceMappingURL=bailout-to-client-rendering.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9lc20vY2xpZW50L2NvbXBvbmVudHMvYmFpbG91dC10by1jbGllbnQtcmVuZGVyaW5nLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFpRjtBQUNTO0FBQ25GLFNBQVNFLHlCQUF5QkMsTUFBTTtJQUMzQyxNQUFNQyx3QkFBd0JILG1HQUE0QkEsQ0FBQ0ksUUFBUTtJQUNuRSxJQUFJRCx5QkFBeUIsT0FBTyxLQUFLLElBQUlBLHNCQUFzQkUsV0FBVyxFQUFFO0lBQ2hGLElBQUlGLHlCQUF5QixPQUFPLEtBQUssSUFBSUEsc0JBQXNCRyxrQkFBa0IsRUFBRSxNQUFNLElBQUlQLHNGQUFpQkEsQ0FBQ0c7QUFDdkgsRUFFQSx1REFBdUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9lc20vY2xpZW50L2NvbXBvbmVudHMvYmFpbG91dC10by1jbGllbnQtcmVuZGVyaW5nLmpzP2JmNWMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmFpbG91dFRvQ1NSRXJyb3IgfSBmcm9tIFwiLi4vLi4vc2hhcmVkL2xpYi9sYXp5LWR5bmFtaWMvYmFpbG91dC10by1jc3JcIjtcbmltcG9ydCB7IHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UgfSBmcm9tIFwiLi9zdGF0aWMtZ2VuZXJhdGlvbi1hc3luYy1zdG9yYWdlLmV4dGVybmFsXCI7XG5leHBvcnQgZnVuY3Rpb24gYmFpbG91dFRvQ2xpZW50UmVuZGVyaW5nKHJlYXNvbikge1xuICAgIGNvbnN0IHN0YXRpY0dlbmVyYXRpb25TdG9yZSA9IHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UuZ2V0U3RvcmUoKTtcbiAgICBpZiAoc3RhdGljR2VuZXJhdGlvblN0b3JlID09IG51bGwgPyB2b2lkIDAgOiBzdGF0aWNHZW5lcmF0aW9uU3RvcmUuZm9yY2VTdGF0aWMpIHJldHVybjtcbiAgICBpZiAoc3RhdGljR2VuZXJhdGlvblN0b3JlID09IG51bGwgPyB2b2lkIDAgOiBzdGF0aWNHZW5lcmF0aW9uU3RvcmUuaXNTdGF0aWNHZW5lcmF0aW9uKSB0aHJvdyBuZXcgQmFpbG91dFRvQ1NSRXJyb3IocmVhc29uKTtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmFpbG91dC10by1jbGllbnQtcmVuZGVyaW5nLmpzLm1hcCJdLCJuYW1lcyI6WyJCYWlsb3V0VG9DU1JFcnJvciIsInN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UiLCJiYWlsb3V0VG9DbGllbnRSZW5kZXJpbmciLCJyZWFzb24iLCJzdGF0aWNHZW5lcmF0aW9uU3RvcmUiLCJnZXRTdG9yZSIsImZvcmNlU3RhdGljIiwiaXNTdGF0aWNHZW5lcmF0aW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/next/dist/esm/client/components/bailout-to-client-rendering.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/next/dist/esm/client/components/headers.js":
/*!*****************************************************************!*\
  !*** ./node_modules/next/dist/esm/client/components/headers.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cookies: () => (/* binding */ cookies),\n/* harmony export */   draftMode: () => (/* binding */ draftMode),\n/* harmony export */   headers: () => (/* binding */ headers)\n/* harmony export */ });\n/* harmony import */ var _server_web_spec_extension_adapters_request_cookies__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../server/web/spec-extension/adapters/request-cookies */ \"(middleware)/./node_modules/next/dist/esm/server/web/spec-extension/adapters/request-cookies.js\");\n/* harmony import */ var _server_web_spec_extension_adapters_headers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../server/web/spec-extension/adapters/headers */ \"(middleware)/./node_modules/next/dist/esm/server/web/spec-extension/adapters/headers.js\");\n/* harmony import */ var _server_web_spec_extension_cookies__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../server/web/spec-extension/cookies */ \"(middleware)/./node_modules/next/dist/esm/server/web/spec-extension/cookies.js\");\n/* harmony import */ var _request_async_storage_external__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./request-async-storage.external */ \"(shared)/./node_modules/next/dist/esm/client/components/request-async-storage.external.js\");\n/* harmony import */ var _action_async_storage_external__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./action-async-storage.external */ \"(shared)/./node_modules/next/dist/esm/client/components/action-async-storage.external.js\");\n/* harmony import */ var _static_generation_bailout__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./static-generation-bailout */ \"(middleware)/./node_modules/next/dist/esm/client/components/static-generation-bailout.js\");\n/* harmony import */ var _draft_mode__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./draft-mode */ \"(middleware)/./node_modules/next/dist/esm/client/components/draft-mode.js\");\n\n\n\n\n\n\n\nfunction headers() {\n    if ((0,_static_generation_bailout__WEBPACK_IMPORTED_MODULE_5__.staticGenerationBailout)(\"headers\", {\n        link: \"https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering\"\n    })) {\n        return _server_web_spec_extension_adapters_headers__WEBPACK_IMPORTED_MODULE_1__.HeadersAdapter.seal(new Headers({}));\n    }\n    const requestStore = _request_async_storage_external__WEBPACK_IMPORTED_MODULE_3__.requestAsyncStorage.getStore();\n    if (!requestStore) {\n        throw new Error(\"Invariant: headers() expects to have requestAsyncStorage, none available.\");\n    }\n    return requestStore.headers;\n}\nfunction cookies() {\n    if ((0,_static_generation_bailout__WEBPACK_IMPORTED_MODULE_5__.staticGenerationBailout)(\"cookies\", {\n        link: \"https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering\"\n    })) {\n        return _server_web_spec_extension_adapters_request_cookies__WEBPACK_IMPORTED_MODULE_0__.RequestCookiesAdapter.seal(new _server_web_spec_extension_cookies__WEBPACK_IMPORTED_MODULE_2__.RequestCookies(new Headers({})));\n    }\n    const requestStore = _request_async_storage_external__WEBPACK_IMPORTED_MODULE_3__.requestAsyncStorage.getStore();\n    if (!requestStore) {\n        throw new Error(\"Invariant: cookies() expects to have requestAsyncStorage, none available.\");\n    }\n    const asyncActionStore = _action_async_storage_external__WEBPACK_IMPORTED_MODULE_4__.actionAsyncStorage.getStore();\n    if (asyncActionStore && (asyncActionStore.isAction || asyncActionStore.isAppRoute)) {\n        // We can't conditionally return different types here based on the context.\n        // To avoid confusion, we always return the readonly type here.\n        return requestStore.mutableCookies;\n    }\n    return requestStore.cookies;\n}\nfunction draftMode() {\n    const requestStore = _request_async_storage_external__WEBPACK_IMPORTED_MODULE_3__.requestAsyncStorage.getStore();\n    if (!requestStore) {\n        throw new Error(\"Invariant: draftMode() expects to have requestAsyncStorage, none available.\");\n    }\n    return new _draft_mode__WEBPACK_IMPORTED_MODULE_6__.DraftMode(requestStore.draftMode);\n} //# sourceMappingURL=headers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9lc20vY2xpZW50L2NvbXBvbmVudHMvaGVhZGVycy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQWlHO0FBQ2Y7QUFDVDtBQUNGO0FBQ0Y7QUFDQztBQUM3QjtBQUNsQyxTQUFTTztJQUNaLElBQUlGLG1GQUF1QkEsQ0FBQyxXQUFXO1FBQ25DRyxNQUFNO0lBQ1YsSUFBSTtRQUNBLE9BQU9QLHVGQUFjQSxDQUFDUSxJQUFJLENBQUMsSUFBSUMsUUFBUSxDQUFDO0lBQzVDO0lBQ0EsTUFBTUMsZUFBZVIsZ0ZBQW1CQSxDQUFDUyxRQUFRO0lBQ2pELElBQUksQ0FBQ0QsY0FBYztRQUNmLE1BQU0sSUFBSUUsTUFBTTtJQUNwQjtJQUNBLE9BQU9GLGFBQWFKLE9BQU87QUFDL0I7QUFDTyxTQUFTTztJQUNaLElBQUlULG1GQUF1QkEsQ0FBQyxXQUFXO1FBQ25DRyxNQUFNO0lBQ1YsSUFBSTtRQUNBLE9BQU9SLHNHQUFxQkEsQ0FBQ1MsSUFBSSxDQUFDLElBQUlQLDhFQUFjQSxDQUFDLElBQUlRLFFBQVEsQ0FBQztJQUN0RTtJQUNBLE1BQU1DLGVBQWVSLGdGQUFtQkEsQ0FBQ1MsUUFBUTtJQUNqRCxJQUFJLENBQUNELGNBQWM7UUFDZixNQUFNLElBQUlFLE1BQU07SUFDcEI7SUFDQSxNQUFNRSxtQkFBbUJYLDhFQUFrQkEsQ0FBQ1EsUUFBUTtJQUNwRCxJQUFJRyxvQkFBcUJBLENBQUFBLGlCQUFpQkMsUUFBUSxJQUFJRCxpQkFBaUJFLFVBQVUsR0FBRztRQUNoRiwyRUFBMkU7UUFDM0UsK0RBQStEO1FBQy9ELE9BQU9OLGFBQWFPLGNBQWM7SUFDdEM7SUFDQSxPQUFPUCxhQUFhRyxPQUFPO0FBQy9CO0FBQ08sU0FBU0s7SUFDWixNQUFNUixlQUFlUixnRkFBbUJBLENBQUNTLFFBQVE7SUFDakQsSUFBSSxDQUFDRCxjQUFjO1FBQ2YsTUFBTSxJQUFJRSxNQUFNO0lBQ3BCO0lBQ0EsT0FBTyxJQUFJUCxrREFBU0EsQ0FBQ0ssYUFBYVEsU0FBUztBQUMvQyxFQUVBLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9jbGllbnQvY29tcG9uZW50cy9oZWFkZXJzLmpzPzU3YjgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVxdWVzdENvb2tpZXNBZGFwdGVyIH0gZnJvbSBcIi4uLy4uL3NlcnZlci93ZWIvc3BlYy1leHRlbnNpb24vYWRhcHRlcnMvcmVxdWVzdC1jb29raWVzXCI7XG5pbXBvcnQgeyBIZWFkZXJzQWRhcHRlciB9IGZyb20gXCIuLi8uLi9zZXJ2ZXIvd2ViL3NwZWMtZXh0ZW5zaW9uL2FkYXB0ZXJzL2hlYWRlcnNcIjtcbmltcG9ydCB7IFJlcXVlc3RDb29raWVzIH0gZnJvbSBcIi4uLy4uL3NlcnZlci93ZWIvc3BlYy1leHRlbnNpb24vY29va2llc1wiO1xuaW1wb3J0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSB9IGZyb20gXCIuL3JlcXVlc3QtYXN5bmMtc3RvcmFnZS5leHRlcm5hbFwiO1xuaW1wb3J0IHsgYWN0aW9uQXN5bmNTdG9yYWdlIH0gZnJvbSBcIi4vYWN0aW9uLWFzeW5jLXN0b3JhZ2UuZXh0ZXJuYWxcIjtcbmltcG9ydCB7IHN0YXRpY0dlbmVyYXRpb25CYWlsb3V0IH0gZnJvbSBcIi4vc3RhdGljLWdlbmVyYXRpb24tYmFpbG91dFwiO1xuaW1wb3J0IHsgRHJhZnRNb2RlIH0gZnJvbSBcIi4vZHJhZnQtbW9kZVwiO1xuZXhwb3J0IGZ1bmN0aW9uIGhlYWRlcnMoKSB7XG4gICAgaWYgKHN0YXRpY0dlbmVyYXRpb25CYWlsb3V0KFwiaGVhZGVyc1wiLCB7XG4gICAgICAgIGxpbms6IFwiaHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvYXBwL2J1aWxkaW5nLXlvdXItYXBwbGljYXRpb24vcmVuZGVyaW5nL3N0YXRpYy1hbmQtZHluYW1pYyNkeW5hbWljLXJlbmRlcmluZ1wiXG4gICAgfSkpIHtcbiAgICAgICAgcmV0dXJuIEhlYWRlcnNBZGFwdGVyLnNlYWwobmV3IEhlYWRlcnMoe30pKTtcbiAgICB9XG4gICAgY29uc3QgcmVxdWVzdFN0b3JlID0gcmVxdWVzdEFzeW5jU3RvcmFnZS5nZXRTdG9yZSgpO1xuICAgIGlmICghcmVxdWVzdFN0b3JlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFyaWFudDogaGVhZGVycygpIGV4cGVjdHMgdG8gaGF2ZSByZXF1ZXN0QXN5bmNTdG9yYWdlLCBub25lIGF2YWlsYWJsZS5cIik7XG4gICAgfVxuICAgIHJldHVybiByZXF1ZXN0U3RvcmUuaGVhZGVycztcbn1cbmV4cG9ydCBmdW5jdGlvbiBjb29raWVzKCkge1xuICAgIGlmIChzdGF0aWNHZW5lcmF0aW9uQmFpbG91dChcImNvb2tpZXNcIiwge1xuICAgICAgICBsaW5rOiBcImh0dHBzOi8vbmV4dGpzLm9yZy9kb2NzL2FwcC9idWlsZGluZy15b3VyLWFwcGxpY2F0aW9uL3JlbmRlcmluZy9zdGF0aWMtYW5kLWR5bmFtaWMjZHluYW1pYy1yZW5kZXJpbmdcIlxuICAgIH0pKSB7XG4gICAgICAgIHJldHVybiBSZXF1ZXN0Q29va2llc0FkYXB0ZXIuc2VhbChuZXcgUmVxdWVzdENvb2tpZXMobmV3IEhlYWRlcnMoe30pKSk7XG4gICAgfVxuICAgIGNvbnN0IHJlcXVlc3RTdG9yZSA9IHJlcXVlc3RBc3luY1N0b3JhZ2UuZ2V0U3RvcmUoKTtcbiAgICBpZiAoIXJlcXVlc3RTdG9yZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhcmlhbnQ6IGNvb2tpZXMoKSBleHBlY3RzIHRvIGhhdmUgcmVxdWVzdEFzeW5jU3RvcmFnZSwgbm9uZSBhdmFpbGFibGUuXCIpO1xuICAgIH1cbiAgICBjb25zdCBhc3luY0FjdGlvblN0b3JlID0gYWN0aW9uQXN5bmNTdG9yYWdlLmdldFN0b3JlKCk7XG4gICAgaWYgKGFzeW5jQWN0aW9uU3RvcmUgJiYgKGFzeW5jQWN0aW9uU3RvcmUuaXNBY3Rpb24gfHwgYXN5bmNBY3Rpb25TdG9yZS5pc0FwcFJvdXRlKSkge1xuICAgICAgICAvLyBXZSBjYW4ndCBjb25kaXRpb25hbGx5IHJldHVybiBkaWZmZXJlbnQgdHlwZXMgaGVyZSBiYXNlZCBvbiB0aGUgY29udGV4dC5cbiAgICAgICAgLy8gVG8gYXZvaWQgY29uZnVzaW9uLCB3ZSBhbHdheXMgcmV0dXJuIHRoZSByZWFkb25seSB0eXBlIGhlcmUuXG4gICAgICAgIHJldHVybiByZXF1ZXN0U3RvcmUubXV0YWJsZUNvb2tpZXM7XG4gICAgfVxuICAgIHJldHVybiByZXF1ZXN0U3RvcmUuY29va2llcztcbn1cbmV4cG9ydCBmdW5jdGlvbiBkcmFmdE1vZGUoKSB7XG4gICAgY29uc3QgcmVxdWVzdFN0b3JlID0gcmVxdWVzdEFzeW5jU3RvcmFnZS5nZXRTdG9yZSgpO1xuICAgIGlmICghcmVxdWVzdFN0b3JlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFyaWFudDogZHJhZnRNb2RlKCkgZXhwZWN0cyB0byBoYXZlIHJlcXVlc3RBc3luY1N0b3JhZ2UsIG5vbmUgYXZhaWxhYmxlLlwiKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBEcmFmdE1vZGUocmVxdWVzdFN0b3JlLmRyYWZ0TW9kZSk7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhlYWRlcnMuanMubWFwIl0sIm5hbWVzIjpbIlJlcXVlc3RDb29raWVzQWRhcHRlciIsIkhlYWRlcnNBZGFwdGVyIiwiUmVxdWVzdENvb2tpZXMiLCJyZXF1ZXN0QXN5bmNTdG9yYWdlIiwiYWN0aW9uQXN5bmNTdG9yYWdlIiwic3RhdGljR2VuZXJhdGlvbkJhaWxvdXQiLCJEcmFmdE1vZGUiLCJoZWFkZXJzIiwibGluayIsInNlYWwiLCJIZWFkZXJzIiwicmVxdWVzdFN0b3JlIiwiZ2V0U3RvcmUiLCJFcnJvciIsImNvb2tpZXMiLCJhc3luY0FjdGlvblN0b3JlIiwiaXNBY3Rpb24iLCJpc0FwcFJvdXRlIiwibXV0YWJsZUNvb2tpZXMiLCJkcmFmdE1vZGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/next/dist/esm/client/components/headers.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/next/dist/esm/client/components/redirect.js":
/*!******************************************************************!*\
  !*** ./node_modules/next/dist/esm/client/components/redirect.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RedirectType: () => (/* binding */ RedirectType),\n/* harmony export */   getRedirectError: () => (/* binding */ getRedirectError),\n/* harmony export */   getRedirectStatusCodeFromError: () => (/* binding */ getRedirectStatusCodeFromError),\n/* harmony export */   getRedirectTypeFromError: () => (/* binding */ getRedirectTypeFromError),\n/* harmony export */   getURLFromRedirectError: () => (/* binding */ getURLFromRedirectError),\n/* harmony export */   isRedirectError: () => (/* binding */ isRedirectError),\n/* harmony export */   permanentRedirect: () => (/* binding */ permanentRedirect),\n/* harmony export */   redirect: () => (/* binding */ redirect)\n/* harmony export */ });\n/* harmony import */ var _request_async_storage_external__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./request-async-storage.external */ \"(shared)/./node_modules/next/dist/esm/client/components/request-async-storage.external.js\");\n/* harmony import */ var _action_async_storage_external__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./action-async-storage.external */ \"(shared)/./node_modules/next/dist/esm/client/components/action-async-storage.external.js\");\n/* harmony import */ var _redirect_status_code__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./redirect-status-code */ \"(middleware)/./node_modules/next/dist/esm/client/components/redirect-status-code.js\");\n\n\n\nconst REDIRECT_ERROR_CODE = \"NEXT_REDIRECT\";\nvar RedirectType;\n(function(RedirectType) {\n    RedirectType[\"push\"] = \"push\";\n    RedirectType[\"replace\"] = \"replace\";\n})(RedirectType || (RedirectType = {}));\nfunction getRedirectError(url, type, statusCode) {\n    if (statusCode === void 0) statusCode = _redirect_status_code__WEBPACK_IMPORTED_MODULE_2__.RedirectStatusCode.TemporaryRedirect;\n    const error = new Error(REDIRECT_ERROR_CODE);\n    error.digest = REDIRECT_ERROR_CODE + \";\" + type + \";\" + url + \";\" + statusCode + \";\";\n    const requestStore = _request_async_storage_external__WEBPACK_IMPORTED_MODULE_0__.requestAsyncStorage.getStore();\n    if (requestStore) {\n        error.mutableCookies = requestStore.mutableCookies;\n    }\n    return error;\n}\n/**\n * When used in a streaming context, this will insert a meta tag to\n * redirect the user to the target page. When used in a custom app route, it\n * will serve a 307/303 to the caller.\n *\n * @param url the url to redirect to\n */ function redirect(url, type) {\n    if (type === void 0) type = \"replace\";\n    const actionStore = _action_async_storage_external__WEBPACK_IMPORTED_MODULE_1__.actionAsyncStorage.getStore();\n    throw getRedirectError(url, type, // as we don't want the POST request to follow the redirect,\n    // as it could result in erroneous re-submissions.\n    (actionStore == null ? void 0 : actionStore.isAction) ? _redirect_status_code__WEBPACK_IMPORTED_MODULE_2__.RedirectStatusCode.SeeOther : _redirect_status_code__WEBPACK_IMPORTED_MODULE_2__.RedirectStatusCode.TemporaryRedirect);\n}\n/**\n * When used in a streaming context, this will insert a meta tag to\n * redirect the user to the target page. When used in a custom app route, it\n * will serve a 308/303 to the caller.\n *\n * @param url the url to redirect to\n */ function permanentRedirect(url, type) {\n    if (type === void 0) type = \"replace\";\n    const actionStore = _action_async_storage_external__WEBPACK_IMPORTED_MODULE_1__.actionAsyncStorage.getStore();\n    throw getRedirectError(url, type, // as we don't want the POST request to follow the redirect,\n    // as it could result in erroneous re-submissions.\n    (actionStore == null ? void 0 : actionStore.isAction) ? _redirect_status_code__WEBPACK_IMPORTED_MODULE_2__.RedirectStatusCode.SeeOther : _redirect_status_code__WEBPACK_IMPORTED_MODULE_2__.RedirectStatusCode.PermanentRedirect);\n}\n/**\n * Checks an error to determine if it's an error generated by the\n * `redirect(url)` helper.\n *\n * @param error the error that may reference a redirect error\n * @returns true if the error is a redirect error\n */ function isRedirectError(error) {\n    if (typeof error !== \"object\" || error === null || !(\"digest\" in error) || typeof error.digest !== \"string\") {\n        return false;\n    }\n    const [errorCode, type, destination, status] = error.digest.split(\";\", 4);\n    const statusCode = Number(status);\n    return errorCode === REDIRECT_ERROR_CODE && (type === \"replace\" || type === \"push\") && typeof destination === \"string\" && !isNaN(statusCode) && statusCode in _redirect_status_code__WEBPACK_IMPORTED_MODULE_2__.RedirectStatusCode;\n}\nfunction getURLFromRedirectError(error) {\n    if (!isRedirectError(error)) return null;\n    // Slices off the beginning of the digest that contains the code and the\n    // separating ';'.\n    return error.digest.split(\";\", 3)[2];\n}\nfunction getRedirectTypeFromError(error) {\n    if (!isRedirectError(error)) {\n        throw new Error(\"Not a redirect error\");\n    }\n    return error.digest.split(\";\", 2)[1];\n}\nfunction getRedirectStatusCodeFromError(error) {\n    if (!isRedirectError(error)) {\n        throw new Error(\"Not a redirect error\");\n    }\n    return Number(error.digest.split(\";\", 4)[3]);\n} //# sourceMappingURL=redirect.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9lc20vY2xpZW50L2NvbXBvbmVudHMvcmVkaXJlY3QuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBdUU7QUFDRjtBQUNUO0FBQzVELE1BQU1HLHNCQUFzQjtBQUNyQixJQUFJQyxhQUFhO0FBQ3ZCLFVBQVNBLFlBQVk7SUFDbEJBLFlBQVksQ0FBQyxPQUFPLEdBQUc7SUFDdkJBLFlBQVksQ0FBQyxVQUFVLEdBQUc7QUFDOUIsR0FBR0EsZ0JBQWlCQSxDQUFBQSxlQUFlLENBQUM7QUFDN0IsU0FBU0MsaUJBQWlCQyxHQUFHLEVBQUVDLElBQUksRUFBRUMsVUFBVTtJQUNsRCxJQUFJQSxlQUFlLEtBQUssR0FBR0EsYUFBYU4scUVBQWtCQSxDQUFDTyxpQkFBaUI7SUFDNUUsTUFBTUMsUUFBUSxJQUFJQyxNQUFNUjtJQUN4Qk8sTUFBTUUsTUFBTSxHQUFHVCxzQkFBc0IsTUFBTUksT0FBTyxNQUFNRCxNQUFNLE1BQU1FLGFBQWE7SUFDakYsTUFBTUssZUFBZWIsZ0ZBQW1CQSxDQUFDYyxRQUFRO0lBQ2pELElBQUlELGNBQWM7UUFDZEgsTUFBTUssY0FBYyxHQUFHRixhQUFhRSxjQUFjO0lBQ3REO0lBQ0EsT0FBT0w7QUFDWDtBQUNBOzs7Ozs7Q0FNQyxHQUFVLFNBQVNNLFNBQVNWLEdBQUcsRUFBRUMsSUFBSTtJQUNsQyxJQUFJQSxTQUFTLEtBQUssR0FBR0EsT0FBTztJQUM1QixNQUFNVSxjQUFjaEIsOEVBQWtCQSxDQUFDYSxRQUFRO0lBQy9DLE1BQU1ULGlCQUFpQkMsS0FBS0MsTUFHNUIsNERBRjREO0lBQzVELGtEQUFrRDtJQUNqRFUsQ0FBQUEsZUFBZSxPQUFPLEtBQUssSUFBSUEsWUFBWUMsUUFBUSxJQUFJaEIscUVBQWtCQSxDQUFDaUIsUUFBUSxHQUFHakIscUVBQWtCQSxDQUFDTyxpQkFBaUI7QUFDOUg7QUFDQTs7Ozs7O0NBTUMsR0FBVSxTQUFTVyxrQkFBa0JkLEdBQUcsRUFBRUMsSUFBSTtJQUMzQyxJQUFJQSxTQUFTLEtBQUssR0FBR0EsT0FBTztJQUM1QixNQUFNVSxjQUFjaEIsOEVBQWtCQSxDQUFDYSxRQUFRO0lBQy9DLE1BQU1ULGlCQUFpQkMsS0FBS0MsTUFHNUIsNERBRjREO0lBQzVELGtEQUFrRDtJQUNqRFUsQ0FBQUEsZUFBZSxPQUFPLEtBQUssSUFBSUEsWUFBWUMsUUFBUSxJQUFJaEIscUVBQWtCQSxDQUFDaUIsUUFBUSxHQUFHakIscUVBQWtCQSxDQUFDbUIsaUJBQWlCO0FBQzlIO0FBQ0E7Ozs7OztDQU1DLEdBQVUsU0FBU0MsZ0JBQWdCWixLQUFLO0lBQ3JDLElBQUksT0FBT0EsVUFBVSxZQUFZQSxVQUFVLFFBQVEsQ0FBRSxhQUFZQSxLQUFJLEtBQU0sT0FBT0EsTUFBTUUsTUFBTSxLQUFLLFVBQVU7UUFDekcsT0FBTztJQUNYO0lBQ0EsTUFBTSxDQUFDVyxXQUFXaEIsTUFBTWlCLGFBQWFDLE9BQU8sR0FBR2YsTUFBTUUsTUFBTSxDQUFDYyxLQUFLLENBQUMsS0FBSztJQUN2RSxNQUFNbEIsYUFBYW1CLE9BQU9GO0lBQzFCLE9BQU9GLGNBQWNwQix1QkFBd0JJLENBQUFBLFNBQVMsYUFBYUEsU0FBUyxNQUFLLEtBQU0sT0FBT2lCLGdCQUFnQixZQUFZLENBQUNJLE1BQU1wQixlQUFlQSxjQUFjTixxRUFBa0JBO0FBQ3BMO0FBQ08sU0FBUzJCLHdCQUF3Qm5CLEtBQUs7SUFDekMsSUFBSSxDQUFDWSxnQkFBZ0JaLFFBQVEsT0FBTztJQUNwQyx3RUFBd0U7SUFDeEUsa0JBQWtCO0lBQ2xCLE9BQU9BLE1BQU1FLE1BQU0sQ0FBQ2MsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUU7QUFDeEM7QUFDTyxTQUFTSSx5QkFBeUJwQixLQUFLO0lBQzFDLElBQUksQ0FBQ1ksZ0JBQWdCWixRQUFRO1FBQ3pCLE1BQU0sSUFBSUMsTUFBTTtJQUNwQjtJQUNBLE9BQU9ELE1BQU1FLE1BQU0sQ0FBQ2MsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUU7QUFDeEM7QUFDTyxTQUFTSywrQkFBK0JyQixLQUFLO0lBQ2hELElBQUksQ0FBQ1ksZ0JBQWdCWixRQUFRO1FBQ3pCLE1BQU0sSUFBSUMsTUFBTTtJQUNwQjtJQUNBLE9BQU9nQixPQUFPakIsTUFBTUUsTUFBTSxDQUFDYyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRTtBQUMvQyxFQUVBLG9DQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2VzbS9jbGllbnQvY29tcG9uZW50cy9yZWRpcmVjdC5qcz9lMTQ4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlcXVlc3RBc3luY1N0b3JhZ2UgfSBmcm9tIFwiLi9yZXF1ZXN0LWFzeW5jLXN0b3JhZ2UuZXh0ZXJuYWxcIjtcbmltcG9ydCB7IGFjdGlvbkFzeW5jU3RvcmFnZSB9IGZyb20gXCIuL2FjdGlvbi1hc3luYy1zdG9yYWdlLmV4dGVybmFsXCI7XG5pbXBvcnQgeyBSZWRpcmVjdFN0YXR1c0NvZGUgfSBmcm9tIFwiLi9yZWRpcmVjdC1zdGF0dXMtY29kZVwiO1xuY29uc3QgUkVESVJFQ1RfRVJST1JfQ09ERSA9IFwiTkVYVF9SRURJUkVDVFwiO1xuZXhwb3J0IHZhciBSZWRpcmVjdFR5cGU7XG4oZnVuY3Rpb24oUmVkaXJlY3RUeXBlKSB7XG4gICAgUmVkaXJlY3RUeXBlW1wicHVzaFwiXSA9IFwicHVzaFwiO1xuICAgIFJlZGlyZWN0VHlwZVtcInJlcGxhY2VcIl0gPSBcInJlcGxhY2VcIjtcbn0pKFJlZGlyZWN0VHlwZSB8fCAoUmVkaXJlY3RUeXBlID0ge30pKTtcbmV4cG9ydCBmdW5jdGlvbiBnZXRSZWRpcmVjdEVycm9yKHVybCwgdHlwZSwgc3RhdHVzQ29kZSkge1xuICAgIGlmIChzdGF0dXNDb2RlID09PSB2b2lkIDApIHN0YXR1c0NvZGUgPSBSZWRpcmVjdFN0YXR1c0NvZGUuVGVtcG9yYXJ5UmVkaXJlY3Q7XG4gICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoUkVESVJFQ1RfRVJST1JfQ09ERSk7XG4gICAgZXJyb3IuZGlnZXN0ID0gUkVESVJFQ1RfRVJST1JfQ09ERSArIFwiO1wiICsgdHlwZSArIFwiO1wiICsgdXJsICsgXCI7XCIgKyBzdGF0dXNDb2RlICsgXCI7XCI7XG4gICAgY29uc3QgcmVxdWVzdFN0b3JlID0gcmVxdWVzdEFzeW5jU3RvcmFnZS5nZXRTdG9yZSgpO1xuICAgIGlmIChyZXF1ZXN0U3RvcmUpIHtcbiAgICAgICAgZXJyb3IubXV0YWJsZUNvb2tpZXMgPSByZXF1ZXN0U3RvcmUubXV0YWJsZUNvb2tpZXM7XG4gICAgfVxuICAgIHJldHVybiBlcnJvcjtcbn1cbi8qKlxuICogV2hlbiB1c2VkIGluIGEgc3RyZWFtaW5nIGNvbnRleHQsIHRoaXMgd2lsbCBpbnNlcnQgYSBtZXRhIHRhZyB0b1xuICogcmVkaXJlY3QgdGhlIHVzZXIgdG8gdGhlIHRhcmdldCBwYWdlLiBXaGVuIHVzZWQgaW4gYSBjdXN0b20gYXBwIHJvdXRlLCBpdFxuICogd2lsbCBzZXJ2ZSBhIDMwNy8zMDMgdG8gdGhlIGNhbGxlci5cbiAqXG4gKiBAcGFyYW0gdXJsIHRoZSB1cmwgdG8gcmVkaXJlY3QgdG9cbiAqLyBleHBvcnQgZnVuY3Rpb24gcmVkaXJlY3QodXJsLCB0eXBlKSB7XG4gICAgaWYgKHR5cGUgPT09IHZvaWQgMCkgdHlwZSA9IFwicmVwbGFjZVwiO1xuICAgIGNvbnN0IGFjdGlvblN0b3JlID0gYWN0aW9uQXN5bmNTdG9yYWdlLmdldFN0b3JlKCk7XG4gICAgdGhyb3cgZ2V0UmVkaXJlY3RFcnJvcih1cmwsIHR5cGUsIC8vIElmIHdlJ3JlIGluIGFuIGFjdGlvbiwgd2Ugd2FudCB0byB1c2UgYSAzMDMgcmVkaXJlY3RcbiAgICAvLyBhcyB3ZSBkb24ndCB3YW50IHRoZSBQT1NUIHJlcXVlc3QgdG8gZm9sbG93IHRoZSByZWRpcmVjdCxcbiAgICAvLyBhcyBpdCBjb3VsZCByZXN1bHQgaW4gZXJyb25lb3VzIHJlLXN1Ym1pc3Npb25zLlxuICAgIChhY3Rpb25TdG9yZSA9PSBudWxsID8gdm9pZCAwIDogYWN0aW9uU3RvcmUuaXNBY3Rpb24pID8gUmVkaXJlY3RTdGF0dXNDb2RlLlNlZU90aGVyIDogUmVkaXJlY3RTdGF0dXNDb2RlLlRlbXBvcmFyeVJlZGlyZWN0KTtcbn1cbi8qKlxuICogV2hlbiB1c2VkIGluIGEgc3RyZWFtaW5nIGNvbnRleHQsIHRoaXMgd2lsbCBpbnNlcnQgYSBtZXRhIHRhZyB0b1xuICogcmVkaXJlY3QgdGhlIHVzZXIgdG8gdGhlIHRhcmdldCBwYWdlLiBXaGVuIHVzZWQgaW4gYSBjdXN0b20gYXBwIHJvdXRlLCBpdFxuICogd2lsbCBzZXJ2ZSBhIDMwOC8zMDMgdG8gdGhlIGNhbGxlci5cbiAqXG4gKiBAcGFyYW0gdXJsIHRoZSB1cmwgdG8gcmVkaXJlY3QgdG9cbiAqLyBleHBvcnQgZnVuY3Rpb24gcGVybWFuZW50UmVkaXJlY3QodXJsLCB0eXBlKSB7XG4gICAgaWYgKHR5cGUgPT09IHZvaWQgMCkgdHlwZSA9IFwicmVwbGFjZVwiO1xuICAgIGNvbnN0IGFjdGlvblN0b3JlID0gYWN0aW9uQXN5bmNTdG9yYWdlLmdldFN0b3JlKCk7XG4gICAgdGhyb3cgZ2V0UmVkaXJlY3RFcnJvcih1cmwsIHR5cGUsIC8vIElmIHdlJ3JlIGluIGFuIGFjdGlvbiwgd2Ugd2FudCB0byB1c2UgYSAzMDMgcmVkaXJlY3RcbiAgICAvLyBhcyB3ZSBkb24ndCB3YW50IHRoZSBQT1NUIHJlcXVlc3QgdG8gZm9sbG93IHRoZSByZWRpcmVjdCxcbiAgICAvLyBhcyBpdCBjb3VsZCByZXN1bHQgaW4gZXJyb25lb3VzIHJlLXN1Ym1pc3Npb25zLlxuICAgIChhY3Rpb25TdG9yZSA9PSBudWxsID8gdm9pZCAwIDogYWN0aW9uU3RvcmUuaXNBY3Rpb24pID8gUmVkaXJlY3RTdGF0dXNDb2RlLlNlZU90aGVyIDogUmVkaXJlY3RTdGF0dXNDb2RlLlBlcm1hbmVudFJlZGlyZWN0KTtcbn1cbi8qKlxuICogQ2hlY2tzIGFuIGVycm9yIHRvIGRldGVybWluZSBpZiBpdCdzIGFuIGVycm9yIGdlbmVyYXRlZCBieSB0aGVcbiAqIGByZWRpcmVjdCh1cmwpYCBoZWxwZXIuXG4gKlxuICogQHBhcmFtIGVycm9yIHRoZSBlcnJvciB0aGF0IG1heSByZWZlcmVuY2UgYSByZWRpcmVjdCBlcnJvclxuICogQHJldHVybnMgdHJ1ZSBpZiB0aGUgZXJyb3IgaXMgYSByZWRpcmVjdCBlcnJvclxuICovIGV4cG9ydCBmdW5jdGlvbiBpc1JlZGlyZWN0RXJyb3IoZXJyb3IpIHtcbiAgICBpZiAodHlwZW9mIGVycm9yICE9PSBcIm9iamVjdFwiIHx8IGVycm9yID09PSBudWxsIHx8ICEoXCJkaWdlc3RcIiBpbiBlcnJvcikgfHwgdHlwZW9mIGVycm9yLmRpZ2VzdCAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IFtlcnJvckNvZGUsIHR5cGUsIGRlc3RpbmF0aW9uLCBzdGF0dXNdID0gZXJyb3IuZGlnZXN0LnNwbGl0KFwiO1wiLCA0KTtcbiAgICBjb25zdCBzdGF0dXNDb2RlID0gTnVtYmVyKHN0YXR1cyk7XG4gICAgcmV0dXJuIGVycm9yQ29kZSA9PT0gUkVESVJFQ1RfRVJST1JfQ09ERSAmJiAodHlwZSA9PT0gXCJyZXBsYWNlXCIgfHwgdHlwZSA9PT0gXCJwdXNoXCIpICYmIHR5cGVvZiBkZXN0aW5hdGlvbiA9PT0gXCJzdHJpbmdcIiAmJiAhaXNOYU4oc3RhdHVzQ29kZSkgJiYgc3RhdHVzQ29kZSBpbiBSZWRpcmVjdFN0YXR1c0NvZGU7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0VVJMRnJvbVJlZGlyZWN0RXJyb3IoZXJyb3IpIHtcbiAgICBpZiAoIWlzUmVkaXJlY3RFcnJvcihlcnJvcikpIHJldHVybiBudWxsO1xuICAgIC8vIFNsaWNlcyBvZmYgdGhlIGJlZ2lubmluZyBvZiB0aGUgZGlnZXN0IHRoYXQgY29udGFpbnMgdGhlIGNvZGUgYW5kIHRoZVxuICAgIC8vIHNlcGFyYXRpbmcgJzsnLlxuICAgIHJldHVybiBlcnJvci5kaWdlc3Quc3BsaXQoXCI7XCIsIDMpWzJdO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldFJlZGlyZWN0VHlwZUZyb21FcnJvcihlcnJvcikge1xuICAgIGlmICghaXNSZWRpcmVjdEVycm9yKGVycm9yKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJOb3QgYSByZWRpcmVjdCBlcnJvclwiKTtcbiAgICB9XG4gICAgcmV0dXJuIGVycm9yLmRpZ2VzdC5zcGxpdChcIjtcIiwgMilbMV07XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0UmVkaXJlY3RTdGF0dXNDb2RlRnJvbUVycm9yKGVycm9yKSB7XG4gICAgaWYgKCFpc1JlZGlyZWN0RXJyb3IoZXJyb3IpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vdCBhIHJlZGlyZWN0IGVycm9yXCIpO1xuICAgIH1cbiAgICByZXR1cm4gTnVtYmVyKGVycm9yLmRpZ2VzdC5zcGxpdChcIjtcIiwgNClbM10pO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWRpcmVjdC5qcy5tYXAiXSwibmFtZXMiOlsicmVxdWVzdEFzeW5jU3RvcmFnZSIsImFjdGlvbkFzeW5jU3RvcmFnZSIsIlJlZGlyZWN0U3RhdHVzQ29kZSIsIlJFRElSRUNUX0VSUk9SX0NPREUiLCJSZWRpcmVjdFR5cGUiLCJnZXRSZWRpcmVjdEVycm9yIiwidXJsIiwidHlwZSIsInN0YXR1c0NvZGUiLCJUZW1wb3JhcnlSZWRpcmVjdCIsImVycm9yIiwiRXJyb3IiLCJkaWdlc3QiLCJyZXF1ZXN0U3RvcmUiLCJnZXRTdG9yZSIsIm11dGFibGVDb29raWVzIiwicmVkaXJlY3QiLCJhY3Rpb25TdG9yZSIsImlzQWN0aW9uIiwiU2VlT3RoZXIiLCJwZXJtYW5lbnRSZWRpcmVjdCIsIlBlcm1hbmVudFJlZGlyZWN0IiwiaXNSZWRpcmVjdEVycm9yIiwiZXJyb3JDb2RlIiwiZGVzdGluYXRpb24iLCJzdGF0dXMiLCJzcGxpdCIsIk51bWJlciIsImlzTmFOIiwiZ2V0VVJMRnJvbVJlZGlyZWN0RXJyb3IiLCJnZXRSZWRpcmVjdFR5cGVGcm9tRXJyb3IiLCJnZXRSZWRpcmVjdFN0YXR1c0NvZGVGcm9tRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/next/dist/esm/client/components/redirect.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/next/dist/esm/client/components/static-generation-bailout.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/next/dist/esm/client/components/static-generation-bailout.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isStaticGenBailoutError: () => (/* binding */ isStaticGenBailoutError),\n/* harmony export */   staticGenerationBailout: () => (/* binding */ staticGenerationBailout)\n/* harmony export */ });\n/* harmony import */ var _hooks_server_context__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./hooks-server-context */ \"(middleware)/./node_modules/next/dist/esm/client/components/hooks-server-context.js\");\n/* harmony import */ var _static_generation_async_storage_external__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./static-generation-async-storage.external */ \"(shared)/./node_modules/next/dist/esm/client/components/static-generation-async-storage.external.js\");\n\n\nconst NEXT_STATIC_GEN_BAILOUT = \"NEXT_STATIC_GEN_BAILOUT\";\nclass StaticGenBailoutError extends Error {\n    constructor(...args){\n        super(...args);\n        this.code = NEXT_STATIC_GEN_BAILOUT;\n    }\n}\nfunction isStaticGenBailoutError(error) {\n    if (typeof error !== \"object\" || error === null || !(\"code\" in error)) {\n        return false;\n    }\n    return error.code === NEXT_STATIC_GEN_BAILOUT;\n}\nfunction formatErrorMessage(reason, opts) {\n    const { dynamic, link } = opts || {};\n    const suffix = link ? \" See more info here: \" + link : \"\";\n    return \"Page\" + (dynamic ? ' with `dynamic = \"' + dynamic + '\"`' : \"\") + \" couldn't be rendered statically because it used `\" + reason + \"`.\" + suffix;\n}\nconst staticGenerationBailout = (reason, param)=>{\n    let { dynamic, link } = param === void 0 ? {} : param;\n    const staticGenerationStore = _static_generation_async_storage_external__WEBPACK_IMPORTED_MODULE_1__.staticGenerationAsyncStorage.getStore();\n    if (!staticGenerationStore) return false;\n    if (staticGenerationStore.forceStatic) {\n        return true;\n    }\n    if (staticGenerationStore.dynamicShouldError) {\n        throw new StaticGenBailoutError(formatErrorMessage(reason, {\n            link,\n            dynamic: dynamic != null ? dynamic : \"error\"\n        }));\n    }\n    const message = formatErrorMessage(reason, {\n        dynamic,\n        // this error should be caught by Next to bail out of static generation\n        // in case it's uncaught, this link provides some additional context as to why\n        link: \"https://nextjs.org/docs/messages/dynamic-server-error\"\n    });\n    // If postpone is available, we should postpone the render.\n    staticGenerationStore.postpone == null ? void 0 : staticGenerationStore.postpone.call(staticGenerationStore, reason);\n    // As this is a bailout, we don't want to revalidate, so set the revalidate\n    // to 0.\n    staticGenerationStore.revalidate = 0;\n    if (staticGenerationStore.isStaticGeneration) {\n        const err = new _hooks_server_context__WEBPACK_IMPORTED_MODULE_0__.DynamicServerError(message);\n        staticGenerationStore.dynamicUsageDescription = reason;\n        staticGenerationStore.dynamicUsageStack = err.stack;\n        throw err;\n    }\n    return false;\n}; //# sourceMappingURL=static-generation-bailout.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9lc20vY2xpZW50L2NvbXBvbmVudHMvc3RhdGljLWdlbmVyYXRpb24tYmFpbG91dC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTREO0FBQzhCO0FBQzFGLE1BQU1FLDBCQUEwQjtBQUNoQyxNQUFNQyw4QkFBOEJDO0lBQ2hDQyxZQUFZLEdBQUdDLElBQUksQ0FBQztRQUNoQixLQUFLLElBQUlBO1FBQ1QsSUFBSSxDQUFDQyxJQUFJLEdBQUdMO0lBQ2hCO0FBQ0o7QUFDTyxTQUFTTSx3QkFBd0JDLEtBQUs7SUFDekMsSUFBSSxPQUFPQSxVQUFVLFlBQVlBLFVBQVUsUUFBUSxDQUFFLFdBQVVBLEtBQUksR0FBSTtRQUNuRSxPQUFPO0lBQ1g7SUFDQSxPQUFPQSxNQUFNRixJQUFJLEtBQUtMO0FBQzFCO0FBQ0EsU0FBU1EsbUJBQW1CQyxNQUFNLEVBQUVDLElBQUk7SUFDcEMsTUFBTSxFQUFFQyxPQUFPLEVBQUVDLElBQUksRUFBRSxHQUFHRixRQUFRLENBQUM7SUFDbkMsTUFBTUcsU0FBU0QsT0FBTywwQkFBMEJBLE9BQU87SUFDdkQsT0FBTyxTQUFVRCxDQUFBQSxVQUFVLHVCQUF1QkEsVUFBVSxPQUFPLEVBQUMsSUFBSyx1REFBdURGLFNBQVMsT0FBT0k7QUFDcEo7QUFDTyxNQUFNQywwQkFBMEIsQ0FBQ0wsUUFBUU07SUFDNUMsSUFBSSxFQUFFSixPQUFPLEVBQUVDLElBQUksRUFBRSxHQUFHRyxVQUFVLEtBQUssSUFBSSxDQUFDLElBQUlBO0lBQ2hELE1BQU1DLHdCQUF3QmpCLG1HQUE0QkEsQ0FBQ2tCLFFBQVE7SUFDbkUsSUFBSSxDQUFDRCx1QkFBdUIsT0FBTztJQUNuQyxJQUFJQSxzQkFBc0JFLFdBQVcsRUFBRTtRQUNuQyxPQUFPO0lBQ1g7SUFDQSxJQUFJRixzQkFBc0JHLGtCQUFrQixFQUFFO1FBQzFDLE1BQU0sSUFBSWxCLHNCQUFzQk8sbUJBQW1CQyxRQUFRO1lBQ3ZERztZQUNBRCxTQUFTQSxXQUFXLE9BQU9BLFVBQVU7UUFDekM7SUFDSjtJQUNBLE1BQU1TLFVBQVVaLG1CQUFtQkMsUUFBUTtRQUN2Q0U7UUFDQSx1RUFBdUU7UUFDdkUsOEVBQThFO1FBQzlFQyxNQUFNO0lBQ1Y7SUFDQSwyREFBMkQ7SUFDM0RJLHNCQUFzQkssUUFBUSxJQUFJLE9BQU8sS0FBSyxJQUFJTCxzQkFBc0JLLFFBQVEsQ0FBQ0MsSUFBSSxDQUFDTix1QkFBdUJQO0lBQzdHLDJFQUEyRTtJQUMzRSxRQUFRO0lBQ1JPLHNCQUFzQk8sVUFBVSxHQUFHO0lBQ25DLElBQUlQLHNCQUFzQlEsa0JBQWtCLEVBQUU7UUFDMUMsTUFBTUMsTUFBTSxJQUFJM0IscUVBQWtCQSxDQUFDc0I7UUFDbkNKLHNCQUFzQlUsdUJBQXVCLEdBQUdqQjtRQUNoRE8sc0JBQXNCVyxpQkFBaUIsR0FBR0YsSUFBSUcsS0FBSztRQUNuRCxNQUFNSDtJQUNWO0lBQ0EsT0FBTztBQUNYLEVBQUUsQ0FFRixxREFBcUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9lc20vY2xpZW50L2NvbXBvbmVudHMvc3RhdGljLWdlbmVyYXRpb24tYmFpbG91dC5qcz9kYzgzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IER5bmFtaWNTZXJ2ZXJFcnJvciB9IGZyb20gXCIuL2hvb2tzLXNlcnZlci1jb250ZXh0XCI7XG5pbXBvcnQgeyBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlIH0gZnJvbSBcIi4vc3RhdGljLWdlbmVyYXRpb24tYXN5bmMtc3RvcmFnZS5leHRlcm5hbFwiO1xuY29uc3QgTkVYVF9TVEFUSUNfR0VOX0JBSUxPVVQgPSBcIk5FWFRfU1RBVElDX0dFTl9CQUlMT1VUXCI7XG5jbGFzcyBTdGF0aWNHZW5CYWlsb3V0RXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IoLi4uYXJncyl7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3MpO1xuICAgICAgICB0aGlzLmNvZGUgPSBORVhUX1NUQVRJQ19HRU5fQkFJTE9VVDtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gaXNTdGF0aWNHZW5CYWlsb3V0RXJyb3IoZXJyb3IpIHtcbiAgICBpZiAodHlwZW9mIGVycm9yICE9PSBcIm9iamVjdFwiIHx8IGVycm9yID09PSBudWxsIHx8ICEoXCJjb2RlXCIgaW4gZXJyb3IpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIGVycm9yLmNvZGUgPT09IE5FWFRfU1RBVElDX0dFTl9CQUlMT1VUO1xufVxuZnVuY3Rpb24gZm9ybWF0RXJyb3JNZXNzYWdlKHJlYXNvbiwgb3B0cykge1xuICAgIGNvbnN0IHsgZHluYW1pYywgbGluayB9ID0gb3B0cyB8fCB7fTtcbiAgICBjb25zdCBzdWZmaXggPSBsaW5rID8gXCIgU2VlIG1vcmUgaW5mbyBoZXJlOiBcIiArIGxpbmsgOiBcIlwiO1xuICAgIHJldHVybiBcIlBhZ2VcIiArIChkeW5hbWljID8gJyB3aXRoIGBkeW5hbWljID0gXCInICsgZHluYW1pYyArICdcImAnIDogXCJcIikgKyBcIiBjb3VsZG4ndCBiZSByZW5kZXJlZCBzdGF0aWNhbGx5IGJlY2F1c2UgaXQgdXNlZCBgXCIgKyByZWFzb24gKyBcImAuXCIgKyBzdWZmaXg7XG59XG5leHBvcnQgY29uc3Qgc3RhdGljR2VuZXJhdGlvbkJhaWxvdXQgPSAocmVhc29uLCBwYXJhbSk9PntcbiAgICBsZXQgeyBkeW5hbWljLCBsaW5rIH0gPSBwYXJhbSA9PT0gdm9pZCAwID8ge30gOiBwYXJhbTtcbiAgICBjb25zdCBzdGF0aWNHZW5lcmF0aW9uU3RvcmUgPSBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLmdldFN0b3JlKCk7XG4gICAgaWYgKCFzdGF0aWNHZW5lcmF0aW9uU3RvcmUpIHJldHVybiBmYWxzZTtcbiAgICBpZiAoc3RhdGljR2VuZXJhdGlvblN0b3JlLmZvcmNlU3RhdGljKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoc3RhdGljR2VuZXJhdGlvblN0b3JlLmR5bmFtaWNTaG91bGRFcnJvcikge1xuICAgICAgICB0aHJvdyBuZXcgU3RhdGljR2VuQmFpbG91dEVycm9yKGZvcm1hdEVycm9yTWVzc2FnZShyZWFzb24sIHtcbiAgICAgICAgICAgIGxpbmssXG4gICAgICAgICAgICBkeW5hbWljOiBkeW5hbWljICE9IG51bGwgPyBkeW5hbWljIDogXCJlcnJvclwiXG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgY29uc3QgbWVzc2FnZSA9IGZvcm1hdEVycm9yTWVzc2FnZShyZWFzb24sIHtcbiAgICAgICAgZHluYW1pYyxcbiAgICAgICAgLy8gdGhpcyBlcnJvciBzaG91bGQgYmUgY2F1Z2h0IGJ5IE5leHQgdG8gYmFpbCBvdXQgb2Ygc3RhdGljIGdlbmVyYXRpb25cbiAgICAgICAgLy8gaW4gY2FzZSBpdCdzIHVuY2F1Z2h0LCB0aGlzIGxpbmsgcHJvdmlkZXMgc29tZSBhZGRpdGlvbmFsIGNvbnRleHQgYXMgdG8gd2h5XG4gICAgICAgIGxpbms6IFwiaHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvbWVzc2FnZXMvZHluYW1pYy1zZXJ2ZXItZXJyb3JcIlxuICAgIH0pO1xuICAgIC8vIElmIHBvc3Rwb25lIGlzIGF2YWlsYWJsZSwgd2Ugc2hvdWxkIHBvc3Rwb25lIHRoZSByZW5kZXIuXG4gICAgc3RhdGljR2VuZXJhdGlvblN0b3JlLnBvc3Rwb25lID09IG51bGwgPyB2b2lkIDAgOiBzdGF0aWNHZW5lcmF0aW9uU3RvcmUucG9zdHBvbmUuY2FsbChzdGF0aWNHZW5lcmF0aW9uU3RvcmUsIHJlYXNvbik7XG4gICAgLy8gQXMgdGhpcyBpcyBhIGJhaWxvdXQsIHdlIGRvbid0IHdhbnQgdG8gcmV2YWxpZGF0ZSwgc28gc2V0IHRoZSByZXZhbGlkYXRlXG4gICAgLy8gdG8gMC5cbiAgICBzdGF0aWNHZW5lcmF0aW9uU3RvcmUucmV2YWxpZGF0ZSA9IDA7XG4gICAgaWYgKHN0YXRpY0dlbmVyYXRpb25TdG9yZS5pc1N0YXRpY0dlbmVyYXRpb24pIHtcbiAgICAgICAgY29uc3QgZXJyID0gbmV3IER5bmFtaWNTZXJ2ZXJFcnJvcihtZXNzYWdlKTtcbiAgICAgICAgc3RhdGljR2VuZXJhdGlvblN0b3JlLmR5bmFtaWNVc2FnZURlc2NyaXB0aW9uID0gcmVhc29uO1xuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uU3RvcmUuZHluYW1pY1VzYWdlU3RhY2sgPSBlcnIuc3RhY2s7XG4gICAgICAgIHRocm93IGVycjtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RhdGljLWdlbmVyYXRpb24tYmFpbG91dC5qcy5tYXAiXSwibmFtZXMiOlsiRHluYW1pY1NlcnZlckVycm9yIiwic3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSIsIk5FWFRfU1RBVElDX0dFTl9CQUlMT1VUIiwiU3RhdGljR2VuQmFpbG91dEVycm9yIiwiRXJyb3IiLCJjb25zdHJ1Y3RvciIsImFyZ3MiLCJjb2RlIiwiaXNTdGF0aWNHZW5CYWlsb3V0RXJyb3IiLCJlcnJvciIsImZvcm1hdEVycm9yTWVzc2FnZSIsInJlYXNvbiIsIm9wdHMiLCJkeW5hbWljIiwibGluayIsInN1ZmZpeCIsInN0YXRpY0dlbmVyYXRpb25CYWlsb3V0IiwicGFyYW0iLCJzdGF0aWNHZW5lcmF0aW9uU3RvcmUiLCJnZXRTdG9yZSIsImZvcmNlU3RhdGljIiwiZHluYW1pY1Nob3VsZEVycm9yIiwibWVzc2FnZSIsInBvc3Rwb25lIiwiY2FsbCIsInJldmFsaWRhdGUiLCJpc1N0YXRpY0dlbmVyYXRpb24iLCJlcnIiLCJkeW5hbWljVXNhZ2VEZXNjcmlwdGlvbiIsImR5bmFtaWNVc2FnZVN0YWNrIiwic3RhY2siXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/next/dist/esm/client/components/static-generation-bailout.js\n");

/***/ }),

/***/ "(middleware)/./node_modules/next/dist/esm/server/web/adapter.js":
/*!**********************************************************!*\
  !*** ./node_modules/next/dist/esm/server/web/adapter.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   adapter: () => (/* binding */ adapter)\n/* harmony export */ });\n/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./error */ \"(middleware)/./node_modules/next/dist/esm/server/web/error.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ \"(middleware)/./node_modules/next/dist/esm/server/web/utils.js\");\n/* harmony import */ var _spec_extension_fetch_event__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./spec-extension/fetch-event */ \"(middleware)/./node_modules/next/dist/esm/server/web/spec-extension/fetch-event.js\");\n/* harmony import */ var _spec_extension_request__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./spec-extension/request */ \"(middleware)/./node_modules/next/dist/esm/server/web/spec-extension/request.js\");\n/* harmony import */ var _spec_extension_response__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./spec-extension/response */ \"(middleware)/./node_modules/next/dist/esm/server/web/spec-extension/response.js\");\n/* harmony import */ var _shared_lib_router_utils_relativize_url__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../shared/lib/router/utils/relativize-url */ \"(middleware)/./node_modules/next/dist/esm/shared/lib/router/utils/relativize-url.js\");\n/* harmony import */ var _next_url__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./next-url */ \"(middleware)/./node_modules/next/dist/esm/server/web/next-url.js\");\n/* harmony import */ var _internal_utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../internal-utils */ \"(middleware)/./node_modules/next/dist/esm/server/internal-utils.js\");\n/* harmony import */ var _shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../shared/lib/router/utils/app-paths */ \"(middleware)/./node_modules/next/dist/esm/shared/lib/router/utils/app-paths.js\");\n/* harmony import */ var _client_components_app_router_headers__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../client/components/app-router-headers */ \"(middleware)/./node_modules/next/dist/esm/client/components/app-router-headers.js\");\n/* harmony import */ var _lib_constants__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../lib/constants */ \"(middleware)/./node_modules/next/dist/esm/lib/constants.js\");\n/* harmony import */ var _globals__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./globals */ \"(middleware)/./node_modules/next/dist/esm/server/web/globals.js\");\n/* harmony import */ var _async_storage_request_async_storage_wrapper__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../async-storage/request-async-storage-wrapper */ \"(middleware)/./node_modules/next/dist/esm/server/async-storage/request-async-storage-wrapper.js\");\n/* harmony import */ var _client_components_request_async_storage_external__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../client/components/request-async-storage.external */ \"(shared)/./node_modules/next/dist/esm/client/components/request-async-storage.external.js\");\n/* harmony import */ var _lib_trace_tracer__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../lib/trace/tracer */ \"(middleware)/./node_modules/next/dist/esm/server/lib/trace/tracer.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass NextRequestHint extends _spec_extension_request__WEBPACK_IMPORTED_MODULE_3__.NextRequest {\n    constructor(params){\n        super(params.input, params.init);\n        this.sourcePage = params.page;\n    }\n    get request() {\n        throw new _error__WEBPACK_IMPORTED_MODULE_0__.PageSignatureError({\n            page: this.sourcePage\n        });\n    }\n    respondWith() {\n        throw new _error__WEBPACK_IMPORTED_MODULE_0__.PageSignatureError({\n            page: this.sourcePage\n        });\n    }\n    waitUntil() {\n        throw new _error__WEBPACK_IMPORTED_MODULE_0__.PageSignatureError({\n            page: this.sourcePage\n        });\n    }\n}\nconst headersGetter = {\n    keys: (headers)=>Array.from(headers.keys()),\n    get: (headers, key)=>headers.get(key) ?? undefined\n};\nlet propagator = (request, fn)=>{\n    const tracer = (0,_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_14__.getTracer)();\n    return tracer.withPropagatedContext(request.headers, fn, headersGetter);\n};\nlet testApisIntercepted = false;\nfunction ensureTestApisIntercepted() {\n    if (!testApisIntercepted) {\n        testApisIntercepted = true;\n        if (process.env.NEXT_PRIVATE_TEST_PROXY === \"true\") {\n            const { interceptTestApis, wrapRequestHandler } = __webpack_require__(/*! next/dist/experimental/testmode/server-edge */ \"(middleware)/./node_modules/next/dist/experimental/testmode/server-edge.js\");\n            interceptTestApis();\n            propagator = wrapRequestHandler(propagator);\n        }\n    }\n}\nasync function adapter(params) {\n    ensureTestApisIntercepted();\n    await (0,_globals__WEBPACK_IMPORTED_MODULE_11__.ensureInstrumentationRegistered)();\n    // TODO-APP: use explicit marker for this\n    const isEdgeRendering = typeof self.__BUILD_MANIFEST !== \"undefined\";\n    const prerenderManifest = typeof self.__PRERENDER_MANIFEST === \"string\" ? JSON.parse(self.__PRERENDER_MANIFEST) : undefined;\n    params.request.url = (0,_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_8__.normalizeRscURL)(params.request.url);\n    const requestUrl = new _next_url__WEBPACK_IMPORTED_MODULE_6__.NextURL(params.request.url, {\n        headers: params.request.headers,\n        nextConfig: params.request.nextConfig\n    });\n    // Iterator uses an index to keep track of the current iteration. Because of deleting and appending below we can't just use the iterator.\n    // Instead we use the keys before iteration.\n    const keys = [\n        ...requestUrl.searchParams.keys()\n    ];\n    for (const key of keys){\n        const value = requestUrl.searchParams.getAll(key);\n        if (key !== _lib_constants__WEBPACK_IMPORTED_MODULE_10__.NEXT_QUERY_PARAM_PREFIX && key.startsWith(_lib_constants__WEBPACK_IMPORTED_MODULE_10__.NEXT_QUERY_PARAM_PREFIX)) {\n            const normalizedKey = key.substring(_lib_constants__WEBPACK_IMPORTED_MODULE_10__.NEXT_QUERY_PARAM_PREFIX.length);\n            requestUrl.searchParams.delete(normalizedKey);\n            for (const val of value){\n                requestUrl.searchParams.append(normalizedKey, val);\n            }\n            requestUrl.searchParams.delete(key);\n        }\n    }\n    // Ensure users only see page requests, never data requests.\n    const buildId = requestUrl.buildId;\n    requestUrl.buildId = \"\";\n    const isDataReq = params.request.headers[\"x-nextjs-data\"];\n    if (isDataReq && requestUrl.pathname === \"/index\") {\n        requestUrl.pathname = \"/\";\n    }\n    const requestHeaders = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.fromNodeOutgoingHttpHeaders)(params.request.headers);\n    const flightHeaders = new Map();\n    // Parameters should only be stripped for middleware\n    if (!isEdgeRendering) {\n        for (const param of _client_components_app_router_headers__WEBPACK_IMPORTED_MODULE_9__.FLIGHT_PARAMETERS){\n            const key = param.toString().toLowerCase();\n            const value = requestHeaders.get(key);\n            if (value) {\n                flightHeaders.set(key, requestHeaders.get(key));\n                requestHeaders.delete(key);\n            }\n        }\n    }\n    const normalizeUrl =  false ? 0 : requestUrl;\n    const request = new NextRequestHint({\n        page: params.page,\n        // Strip internal query parameters off the request.\n        input: (0,_internal_utils__WEBPACK_IMPORTED_MODULE_7__.stripInternalSearchParams)(normalizeUrl, true).toString(),\n        init: {\n            body: params.request.body,\n            geo: params.request.geo,\n            headers: requestHeaders,\n            ip: params.request.ip,\n            method: params.request.method,\n            nextConfig: params.request.nextConfig,\n            signal: params.request.signal\n        }\n    });\n    /**\n   * This allows to identify the request as a data request. The user doesn't\n   * need to know about this property neither use it. We add it for testing\n   * purposes.\n   */ if (isDataReq) {\n        Object.defineProperty(request, \"__isData\", {\n            enumerable: false,\n            value: true\n        });\n    }\n    if (!globalThis.__incrementalCache && params.IncrementalCache) {\n        globalThis.__incrementalCache = new params.IncrementalCache({\n            appDir: true,\n            fetchCache: true,\n            minimalMode: \"development\" !== \"development\",\n            fetchCacheKeyPrefix: undefined,\n            dev: \"development\" === \"development\",\n            requestHeaders: params.request.headers,\n            requestProtocol: \"https\",\n            getPrerenderManifest: ()=>{\n                return {\n                    version: -1,\n                    routes: {},\n                    dynamicRoutes: {},\n                    notFoundRoutes: [],\n                    preview: {\n                        previewModeId: \"development-id\"\n                    }\n                };\n            }\n        });\n    }\n    const event = new _spec_extension_fetch_event__WEBPACK_IMPORTED_MODULE_2__.NextFetchEvent({\n        request,\n        page: params.page\n    });\n    let response;\n    let cookiesFromResponse;\n    response = await propagator(request, ()=>{\n        // we only care to make async storage available for middleware\n        const isMiddleware = params.page === \"/middleware\" || params.page === \"/src/middleware\";\n        if (isMiddleware) {\n            return _async_storage_request_async_storage_wrapper__WEBPACK_IMPORTED_MODULE_12__.RequestAsyncStorageWrapper.wrap(_client_components_request_async_storage_external__WEBPACK_IMPORTED_MODULE_13__.requestAsyncStorage, {\n                req: request,\n                renderOpts: {\n                    onUpdateCookies: (cookies)=>{\n                        cookiesFromResponse = cookies;\n                    },\n                    // @ts-expect-error: TODO: investigate why previewProps isn't on RenderOpts\n                    previewProps: (prerenderManifest == null ? void 0 : prerenderManifest.preview) || {\n                        previewModeId: \"development-id\",\n                        previewModeEncryptionKey: \"\",\n                        previewModeSigningKey: \"\"\n                    }\n                }\n            }, ()=>params.handler(request, event));\n        }\n        return params.handler(request, event);\n    });\n    // check if response is a Response object\n    if (response && !(response instanceof Response)) {\n        throw new TypeError(\"Expected an instance of Response to be returned\");\n    }\n    if (response && cookiesFromResponse) {\n        response.headers.set(\"set-cookie\", cookiesFromResponse);\n    }\n    /**\n   * For rewrites we must always include the locale in the final pathname\n   * so we re-create the NextURL forcing it to include it when the it is\n   * an internal rewrite. Also we make sure the outgoing rewrite URL is\n   * a data URL if the request was a data request.\n   */ const rewrite = response == null ? void 0 : response.headers.get(\"x-middleware-rewrite\");\n    if (response && rewrite) {\n        const rewriteUrl = new _next_url__WEBPACK_IMPORTED_MODULE_6__.NextURL(rewrite, {\n            forceLocale: true,\n            headers: params.request.headers,\n            nextConfig: params.request.nextConfig\n        });\n        if (true) {\n            if (rewriteUrl.host === request.nextUrl.host) {\n                rewriteUrl.buildId = buildId || rewriteUrl.buildId;\n                response.headers.set(\"x-middleware-rewrite\", String(rewriteUrl));\n            }\n        }\n        /**\n     * When the request is a data request we must show if there was a rewrite\n     * with an internal header so the client knows which component to load\n     * from the data request.\n     */ const relativizedRewrite = (0,_shared_lib_router_utils_relativize_url__WEBPACK_IMPORTED_MODULE_5__.relativizeURL)(String(rewriteUrl), String(requestUrl));\n        if (isDataReq && // if the rewrite is external and external rewrite\n        // resolving config is enabled don't add this header\n        // so the upstream app can set it instead\n        !(undefined && 0)) {\n            response.headers.set(\"x-nextjs-rewrite\", relativizedRewrite);\n        }\n    }\n    /**\n   * For redirects we will not include the locale in case when it is the\n   * default and we must also make sure the outgoing URL is a data one if\n   * the incoming request was a data request.\n   */ const redirect = response == null ? void 0 : response.headers.get(\"Location\");\n    if (response && redirect && !isEdgeRendering) {\n        const redirectURL = new _next_url__WEBPACK_IMPORTED_MODULE_6__.NextURL(redirect, {\n            forceLocale: false,\n            headers: params.request.headers,\n            nextConfig: params.request.nextConfig\n        });\n        /**\n     * Responses created from redirects have immutable headers so we have\n     * to clone the response to be able to modify it.\n     */ response = new Response(response.body, response);\n        if (true) {\n            if (redirectURL.host === request.nextUrl.host) {\n                redirectURL.buildId = buildId || redirectURL.buildId;\n                response.headers.set(\"Location\", String(redirectURL));\n            }\n        }\n        /**\n     * When the request is a data request we can't use the location header as\n     * it may end up with CORS error. Instead we map to an internal header so\n     * the client knows the destination.\n     */ if (isDataReq) {\n            response.headers.delete(\"Location\");\n            response.headers.set(\"x-nextjs-redirect\", (0,_shared_lib_router_utils_relativize_url__WEBPACK_IMPORTED_MODULE_5__.relativizeURL)(String(redirectURL), String(requestUrl)));\n        }\n    }\n    const finalResponse = response ? response : _spec_extension_response__WEBPACK_IMPORTED_MODULE_4__.NextResponse.next();\n    // Flight headers are not overridable / removable so they are applied at the end.\n    const middlewareOverrideHeaders = finalResponse.headers.get(\"x-middleware-override-headers\");\n    const overwrittenHeaders = [];\n    if (middlewareOverrideHeaders) {\n        for (const [key, value] of flightHeaders){\n            finalResponse.headers.set(`x-middleware-request-${key}`, value);\n            overwrittenHeaders.push(key);\n        }\n        if (overwrittenHeaders.length > 0) {\n            finalResponse.headers.set(\"x-middleware-override-headers\", middlewareOverrideHeaders + \",\" + overwrittenHeaders.join(\",\"));\n        }\n    }\n    return {\n        response: finalResponse,\n        waitUntil: Promise.all(event[_spec_extension_fetch_event__WEBPACK_IMPORTED_MODULE_2__.waitUntilSymbol]),\n        fetchMetrics: request.fetchMetrics\n    };\n} //# sourceMappingURL=adapter.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(middleware)/./node_modules/next/dist/esm/server/web/adapter.js\n");

/***/ })

});