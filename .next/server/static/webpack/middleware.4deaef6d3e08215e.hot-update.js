/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("middleware",{

/***/ "(middleware)/./middleware.ts":
/*!***********************!*\
  !*** ./middleware.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   middleware: () => (/* binding */ middleware)\n/* harmony export */ });\n/* harmony import */ var _middlewares_compose_middlewares__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./middlewares/compose-middlewares */ \"(middleware)/./middlewares/compose-middlewares.ts\");\n/* harmony import */ var _middlewares_with_auth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./middlewares/with-auth */ \"(middleware)/./middlewares/with-auth.ts\");\n/* harmony import */ var _middlewares_with_custom_urls__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./middlewares/with-custom-urls */ \"(middleware)/./middlewares/with-custom-urls.ts\");\n/* harmony import */ var _middlewares_with_custom_urls__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_middlewares_with_custom_urls__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\nconst middleware = (0,_middlewares_compose_middlewares__WEBPACK_IMPORTED_MODULE_0__.composeMiddlewares)(_middlewares_with_auth__WEBPACK_IMPORTED_MODULE_1__.withAuth, _middlewares_with_custom_urls__WEBPACK_IMPORTED_MODULE_2__.withCustomUrls);\nconst config = {\n    matcher: [\n        /*\n     * Match all request paths except for the ones starting with:\n     * - api (API routes)\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - _vercel (vercel internals, eg: web vitals)\n     * - favicon.ico (favicon file)\n     */ \"/((?!api|_next/static|_next/image|_vercel|favicon.ico).*)\"\n    ]\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKG1pZGRsZXdhcmUpLy4vbWlkZGxld2FyZS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBdUU7QUFDcEI7QUFDYTtBQUV6RCxNQUFNRyxhQUFhSCxvRkFBa0JBLENBQUNDLDREQUFRQSxFQUFFQyx5RUFBY0EsRUFBRTtBQUVoRSxNQUFNRSxTQUFTO0lBQ3BCQyxTQUFTO1FBQ1A7Ozs7Ozs7S0FPQyxHQUNEO0tBQ0Q7QUFDSCxFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL21pZGRsZXdhcmUudHM/NDIyZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb21wb3NlTWlkZGxld2FyZXMgfSBmcm9tICcuL21pZGRsZXdhcmVzL2NvbXBvc2UtbWlkZGxld2FyZXMnO1xuaW1wb3J0IHsgd2l0aEF1dGggfSBmcm9tICcuL21pZGRsZXdhcmVzL3dpdGgtYXV0aCc7XG5pbXBvcnQgeyB3aXRoQ3VzdG9tVXJscyB9IGZyb20gJy4vbWlkZGxld2FyZXMvd2l0aC1jdXN0b20tdXJscyc7XG5cbmV4cG9ydCBjb25zdCBtaWRkbGV3YXJlID0gY29tcG9zZU1pZGRsZXdhcmVzKHdpdGhBdXRoLCB3aXRoQ3VzdG9tVXJscyk7XG5cbmV4cG9ydCBjb25zdCBjb25maWcgPSB7XG4gIG1hdGNoZXI6IFtcbiAgICAvKlxuICAgICAqIE1hdGNoIGFsbCByZXF1ZXN0IHBhdGhzIGV4Y2VwdCBmb3IgdGhlIG9uZXMgc3RhcnRpbmcgd2l0aDpcbiAgICAgKiAtIGFwaSAoQVBJIHJvdXRlcylcbiAgICAgKiAtIF9uZXh0L3N0YXRpYyAoc3RhdGljIGZpbGVzKVxuICAgICAqIC0gX25leHQvaW1hZ2UgKGltYWdlIG9wdGltaXphdGlvbiBmaWxlcylcbiAgICAgKiAtIF92ZXJjZWwgKHZlcmNlbCBpbnRlcm5hbHMsIGVnOiB3ZWIgdml0YWxzKVxuICAgICAqIC0gZmF2aWNvbi5pY28gKGZhdmljb24gZmlsZSlcbiAgICAgKi9cbiAgICAnLygoPyFhcGl8X25leHQvc3RhdGljfF9uZXh0L2ltYWdlfF92ZXJjZWx8ZmF2aWNvbi5pY28pLiopJyxcbiAgXSxcbn07XG4iXSwibmFtZXMiOlsiY29tcG9zZU1pZGRsZXdhcmVzIiwid2l0aEF1dGgiLCJ3aXRoQ3VzdG9tVXJscyIsIm1pZGRsZXdhcmUiLCJjb25maWciLCJtYXRjaGVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(middleware)/./middleware.ts\n");

/***/ }),

/***/ "(middleware)/./middlewares/with-custom-urls.ts":
/*!*****************************************!*\
  !*** ./middlewares/with-custom-urls.ts ***!
  \*****************************************/
/***/ (() => {

eval("// import { cookies } from 'next/headers';\n// import { NextRequest, NextResponse } from 'next/server';\n// import { z } from 'zod';\n// import { getSessionCustomerId } from '~/auth';\n// import { StorefrontStatusType } from '~/client/generated/graphql';\n// import { getRoute } from '~/client/queries/get-route';\n// import { getStoreStatus } from '~/client/queries/get-store-status';\n// import { kv } from '../lib/kv';\n// import { type MiddlewareFactory } from './compose-middlewares';\n// type Node = Awaited<ReturnType<typeof getRoute>>;\n// interface RouteCache {\n//   node: Node;\n//   expiryTime: number;\n// }\n// const STORE_STATUS_KEY = 'storeStatus';\n// interface StorefrontStatusCache {\n//   status: StorefrontStatusType;\n//   expiryTime: number;\n// }\n// const createRewriteUrl = (path: string, request: NextRequest) => {\n//   const url = new URL(path, request.url);\n//   url.search = request.nextUrl.search;\n//   return url;\n// };\n// const StorefrontStatusCacheSchema = z.object({\n//   status: z.nativeEnum(StorefrontStatusType),\n//   expiryTime: z.number(),\n// });\n// const RouteCacheSchema = z.object({\n//   node: z.nullable(z.object({ __typename: z.string(), entityId: z.optional(z.number()) })),\n//   expiryTime: z.number(),\n// });\n// const getExistingRouteInfo = async (request: NextRequest) => {\n//   try {\n//     const pathname = request.nextUrl.pathname;\n//     const [routeCache, statusCache] = await kv.mget<RouteCache | StorefrontStatusCache>(\n//       pathname,\n//       STORE_STATUS_KEY,\n//     );\n//     if (statusCache && statusCache.expiryTime < Date.now()) {\n//       void fetch(new URL(`/api/revalidate/store-status`, request.url), {\n//         method: 'POST',\n//         headers: {\n//           'x-internal-token': process.env.BIGCOMMERCE_CUSTOMER_IMPERSONATION_TOKEN ?? '',\n//         },\n//       });\n//     }\n//     if (routeCache && routeCache.expiryTime < Date.now()) {\n//       void fetch(new URL(`/api/revalidate/route`, request.url), {\n//         method: 'POST',\n//         body: JSON.stringify({ pathname }),\n//         headers: {\n//           'x-internal-token': process.env.BIGCOMMERCE_CUSTOMER_IMPERSONATION_TOKEN ?? '',\n//         },\n//       });\n//     }\n//     const parsedRoute = RouteCacheSchema.safeParse(routeCache);\n//     const parsedStatus = StorefrontStatusCacheSchema.safeParse(statusCache);\n//     return {\n//       // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n//       node: parsedRoute.success ? (parsedRoute.data.node as Node) : undefined,\n//       status: parsedStatus.success ? parsedStatus.data.status : undefined,\n//     };\n//   } catch (error) {\n//     // eslint-disable-next-line no-console\n//     console.error(error);\n//     return {\n//       node: undefined,\n//       status: undefined,\n//     };\n//   }\n// };\n// const setKvStatus = async (status?: StorefrontStatusType | null) => {\n//   try {\n//     const expiryTime = Date.now() + 1000 * 60 * 5; // 5 minutes;\n//     await kv.set(STORE_STATUS_KEY, { status, expiryTime });\n//   } catch (error) {\n//     // eslint-disable-next-line no-console\n//     console.error(error);\n//   }\n// };\n// const setKvRoute = async (request: NextRequest, node: Node) => {\n//   try {\n//     const expiryTime = Date.now() + 1000 * 60 * 30; // 30 minutes;\n//     await kv.set(request.nextUrl.pathname, { node, expiryTime });\n//   } catch (error) {\n//     // eslint-disable-next-line no-console\n//     console.error(error);\n//   }\n// };\n// const getRouteInfo = async (request: NextRequest) => {\n//   try {\n//     let { node, status } = await getExistingRouteInfo(request);\n//     if (status === undefined) {\n//       const newStatus = await getStoreStatus();\n//       if (newStatus) {\n//         status = newStatus;\n//         await setKvStatus(status);\n//       }\n//     }\n//     if (node === undefined) {\n//       const newNode = await getRoute(request.nextUrl.pathname);\n//       node = newNode;\n//       await setKvRoute(request, node);\n//     }\n//     return { node, status };\n//   } catch (error) {\n//     // eslint-disable-next-line no-console\n//     console.error(error);\n//     return {\n//       node: undefined,\n//       status: undefined,\n//     };\n//   }\n// };\n// export const withCustomUrls: MiddlewareFactory = (next) => {\n//   return async (request, event) => {\n//     const { node, status } = await getRouteInfo(request);\n//     if (status === 'MAINTENANCE') {\n//       // 503 status code not working - https://github.com/vercel/next.js/issues/50155\n//       return NextResponse.rewrite(new URL(`/maintenance`, request.url), { status: 503 });\n//     }\n//     const customerId = await getSessionCustomerId();\n//     const cartId = cookies().get('cartId');\n//     let postfix = '';\n//     if (!request.nextUrl.search && !customerId && !cartId && request.method === 'GET') {\n//       postfix = '/static';\n//     }\n//     switch (node?.__typename) {\n//       case 'Brand': {\n//         const url = createRewriteUrl(`/brand/${node.entityId}${postfix}`, request);\n//         return NextResponse.rewrite(url);\n//       }\n//       case 'Category': {\n//         const url = createRewriteUrl(`/category/${node.entityId}${postfix}`, request);\n//         return NextResponse.rewrite(url);\n//       }\n//       case 'Product': {\n//         const url = createRewriteUrl(`/product/${node.entityId}${postfix}`, request);\n//         return NextResponse.rewrite(url);\n//       }\n//       case 'ContactPage':\n//       case 'NormalPage': {\n//         const { pathname } = new URL(request.url);\n//         const url = createRewriteUrl(`/bc-page${pathname}`, request);\n//         return NextResponse.rewrite(url);\n//       }\n//       default: {\n//         const { pathname } = new URL(request.url);\n//         if (pathname === '/' && postfix) {\n//           const url = createRewriteUrl(postfix, request);\n//           return NextResponse.rewrite(url);\n//         }\n//         return next(request, event);\n//       }\n//     }\n//   };\n// };\n// import { cookies } from 'next/headers';\n// import { NextRequest, NextResponse } from 'next/server';\n// import { z } from 'zod';\n// import { getSessionCustomerId } from '~/auth';\n// import { StorefrontStatusType } from '~/client/generated/graphql';\n// import { getRoute } from '~/client/queries/get-route';\n// import { getStoreStatus } from '~/client/queries/get-store-status';\n// import { kv } from '../lib/kv';\n// import { type MiddlewareFactory } from './compose-middlewares';\n// type Node = Awaited<ReturnType<typeof getRoute>>;\n// interface RouteCache {\n//   node: Node;\n//   expiryTime: number;\n// }\n// const STORE_STATUS_KEY = 'storeStatus';\n// interface StorefrontStatusCache {\n//   status: StorefrontStatusType;\n//   expiryTime: number;\n// }\n// const createRewriteUrl = (path: string, request: NextRequest) => {\n//   const url = new URL(path, request.url);\n//   url.search = request.nextUrl.search;\n//   return url;\n// };\n// const StorefrontStatusCacheSchema = z.object({\n//   status: z.nativeEnum(StorefrontStatusType),\n//   expiryTime: z.number(),\n// });\n// const RouteCacheSchema = z.object({\n//   node: z.nullable(z.object({ __typename: z.string(), entityId: z.optional(z.number()) })),\n//   expiryTime: z.number(),\n// });\n// const getExistingRouteInfo = async (request: NextRequest) => {\n//   try {\n//     const pathname = request.nextUrl.pathname;\n//     const [routeCache, statusCache] = await kv.mget<RouteCache | StorefrontStatusCache>(\n//       pathname,\n//       STORE_STATUS_KEY,\n//     );\n//     if (statusCache && statusCache.expiryTime < Date.now()) {\n//       void fetch(new URL(`/api/revalidate/store-status`, request.url), {\n//         method: 'POST',\n//         headers: {\n//           'x-internal-token': process.env.BIGCOMMERCE_CUSTOMER_IMPERSONATION_TOKEN ?? '',\n//         },\n//       });\n//     }\n//     if (routeCache && routeCache.expiryTime < Date.now()) {\n//       void fetch(new URL(`/api/revalidate/route`, request.url), {\n//         method: 'POST',\n//         body: JSON.stringify({ pathname }),\n//         headers: {\n//           'x-internal-token': process.env.BIGCOMMERCE_CUSTOMER_IMPERSONATION_TOKEN ?? '',\n//         },\n//       });\n//     }\n//     const parsedRoute = RouteCacheSchema.safeParse(routeCache);\n//     const parsedStatus = StorefrontStatusCacheSchema.safeParse(statusCache);\n//     return {\n//       // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n//       node: parsedRoute.success ? (parsedRoute.data.node as Node) : undefined,\n//       status: parsedStatus.success ? parsedStatus.data.status : undefined,\n//     };\n//   } catch (error) {\n//     // eslint-disable-next-line no-console\n//     console.error(error);\n//     return {\n//       node: undefined,\n//       status: undefined,\n//     };\n//   }\n// };\n// const setKvStatus = async (status?: StorefrontStatusType | null) => {\n//   try {\n//     const expiryTime = Date.now() + 1000 * 60 * 5; // 5 minutes;\n//     await kv.set(STORE_STATUS_KEY, { status, expiryTime });\n//   } catch (error) {\n//     // eslint-disable-next-line no-console\n//     console.error(error);\n//   }\n// };\n// const setKvRoute = async (request: NextRequest, node: Node) => {\n//   try {\n//     const expiryTime = Date.now() + 1000 * 60 * 30; // 30 minutes;\n//     await kv.set(request.nextUrl.pathname, { node, expiryTime });\n//   } catch (error) {\n//     // eslint-disable-next-line no-console\n//     console.error(error);\n//   }\n// };\n// const getRouteInfo = async (request: NextRequest) => {\n//   try {\n//     let { node, status } = await getExistingRouteInfo(request);\n//     if (status === undefined) {\n//       const newStatus = await getStoreStatus();\n//       if (newStatus) {\n//         status = newStatus;\n//         await setKvStatus(status);\n//       }\n//     }\n//     if (node === undefined) {\n//       const newNode = await getRoute(request.nextUrl.pathname);\n//       node = newNode;\n//       await setKvRoute(request, node);\n//     }\n//     return { node, status };\n//   } catch (error) {\n//     // eslint-disable-next-line no-console\n//     console.error(error);\n//     return {\n//       node: undefined,\n//       status: undefined,\n//     };\n//   }\n// };\n// export const withCustomUrls: MiddlewareFactory = (next) => {\n//   return async (request, event) => {\n//     const { node, status } = await getRouteInfo(request);\n//     if (status === 'MAINTENANCE') {\n//       // 503 status code not working - https://github.com/vercel/next.js/issues/50155\n//       return NextResponse.rewrite(new URL(`/maintenance`, request.url), { status: 503 });\n//     }\n//     const customerId = await getSessionCustomerId();\n//     const cartId = cookies().get('cartId');\n//     let postfix = '';\n//     if (!request.nextUrl.search && !customerId && !cartId && request.method === 'GET') {\n//       postfix = '/static';\n//     }\n//     // Rewrite / to /lookbook -- ARIZON\n//     if (request.nextUrl.pathname === '/') {\n//       return NextResponse.rewrite(new URL('/page', request.url));\n//     }\n//     switch (node?.__typename) {\n//       case 'Brand': {\n//         const url = createRewriteUrl(`/brand/${node.entityId}${postfix}`, request);\n//         return NextResponse.rewrite(url);\n//       }\n//       case 'Category': {\n//         const url = createRewriteUrl(`/category/${node.entityId}${postfix}`, request);\n//         return NextResponse.rewrite(url);\n//       }\n//       case 'Product': {\n//         const url = createRewriteUrl(`/product/${node.entityId}${postfix}`, request);\n//         return NextResponse.rewrite(url);\n//       }\n//       case 'ContactPage':\n//       case 'NormalPage': {\n//         const { pathname } = new URL(request.url);\n//         const url = createRewriteUrl(`/bc-page${pathname}`, request);\n//         return NextResponse.rewrite(url);\n//       }\n//       default: {\n//         const { pathname } = new URL(request.url);\n//         if (pathname === '/' && postfix) {\n//           const url = createRewriteUrl(postfix, request);\n//           return NextResponse.rewrite(url);\n//         }\n//         return next(request, event);\n//       }\n//     }\n//   };\n// };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(middleware)/./middlewares/with-custom-urls.ts\n");

/***/ })

});